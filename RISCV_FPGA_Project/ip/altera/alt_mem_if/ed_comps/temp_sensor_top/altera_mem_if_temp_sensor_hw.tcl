# (C) 2001-2013 Altera Corporation. All rights reserved.
# Your use of Altera Corporation's design tools, logic functions and other 
# software and tools, and its AMPP partner logic functions, and any output 
# files any of the foregoing (including device programming or simulation 
# files), and any associated documentation or information are expressly subject 
# to the terms and conditions of the Altera Program License Subscription 
# Agreement, Altera MegaCore Function License Agreement, or other applicable 
# license agreement, including, without limitation, that your use is for the 
# sole purpose of programming logic devices manufactured by Altera and sold by 
# Altera or its authorized distributors.  Please refer to the applicable 
# agreement for further details.


# TCL File Generated by Component Editor 11.0
# Thu Oct 07 16:58:41 EDT 2010
# DO NOT MODIFY

# +-----------------------------------
# Required header to put the alt_mem_if TCL packages on the TCL path
set alt_mem_if_tcl_libs_dir "$env(QUARTUS_ROOTDIR)/../ip/altera/alt_mem_if/alt_mem_if_tcl_packages"
if {[lsearch -exact $auto_path $alt_mem_if_tcl_libs_dir] == -1} {
	lappend auto_path $alt_mem_if_tcl_libs_dir
}
# +-----------------------------------

# +-----------------------------------
# | 
# | altera_mem_if_temp_sensor "Altera Temp Sensor" v1.0
# | 
# | 
# +-----------------------------------

# +-----------------------------------
# | request TCL package from ACDS 12.0
# | 
package require -exact qsys 12.0

# Require alt_mem_if TCL packages
package require alt_mem_if::util::messaging
package require alt_mem_if::util::profiling
package require alt_mem_if::gui::system_info
package require alt_mem_if::util::iptclgen
package require alt_mem_if::util::hwtcl_utils

# Function Imports
namespace import ::alt_mem_if::util::messaging::*

# | 
# +-----------------------------------

# +-----------------------------------

# +-----------------------------------
# | module altera_mem_if_temp_sensor
# | 
set_module_property DESCRIPTION "altera_mem_if Temperature Sensor"
set_module_property NAME altera_mem_if_temp_sense
set_module_property VERSION 13.1
::alt_mem_if::util::hwtcl_utils::set_module_internal_mode
set_module_property OPAQUE_ADDRESS_MAP true
set_module_property GROUP [::alt_mem_if::util::hwtcl_utils::example_design_components_group_name]
set_module_property AUTHOR "Altera Corporation"
set_module_property DISPLAY_NAME "altera_mem_if Temperature Sensor"
set_module_property INSTANTIATE_IN_SYSTEM_MODULE true
set_module_property EDITABLE true
set_module_property ANALYZE_HDL TRUE
# | 
# +-----------------------------------

# Hide the block diagram
add_display_item "" "Block Diagram" GROUP

# +-----------------------------------
# | Build the GUI
# | 
alt_mem_if::gui::system_info::create_generic_parameters

::alt_mem_if::util::hwtcl_utils::_add_parameter REF_CLK_FREQ float 125
set_parameter_property REF_CLK_FREQ DISPLAY_NAME "PLL reference clock frequency"
set_parameter_property REF_CLK_FREQ UNITS Megahertz
set_parameter_property REF_CLK_FREQ DESCRIPTION "The frequency of the input clock that feeds the PLL.  Up to 4 decimal places of precision can be used."
set_parameter_property REF_CLK_FREQ DISPLAY_HINT columns:10

# | 
# +-----------------------------------


# +-----------------------------------
# | Elaboration/validation callbacks
# | 

if {[string compare -nocase [::alt_mem_if::util::hwtcl_utils::combined_callbacks] "false"] == 0} {
	set_module_property VALIDATION_CALLBACK ip_validate
	set_module_property COMPOSITION_CALLBACK ip_compose
} else {
	set_module_property COMPOSITION_CALLBACK combined_callback
}

proc combined_callback {} {
	ip_validate
	ip_compose
}

proc ip_validate {} {

	_dprint 1 "Running IP Validation"

	# Derive the system info parameters
	alt_mem_if::gui::system_info::validate_generic_component	
}

proc ip_compose {} {

	_dprint 1 "Running IP Compose for [get_module_property NAME]"
	
	## Create the temp sensor
	set TEMP_SENSE ts0
	add_instance $TEMP_SENSE alt_mem_if_temp_sense_core
	# Apply all the parameters

	## Create the PLL
	set PLL pll0
	add_instance $PLL altera_mem_if_single_clock_pll
	# Apply all the parameters
	set_instance_parameter $PLL REQ_CLK_FREQ 40
	set_instance_parameter $PLL REF_CLK_FREQ [get_parameter_value REF_CLK_FREQ]
	

    #  Create the PLL reference clock reference and export it
	add_interface pll_ref_clk clock end
	add_instance pll_ref_clk altera_clock_bridge
	set_interface_property pll_ref_clk export_of pll_ref_clk.in_clk 
	# Make the exported port name to the desired name
	set_interface_property pll_ref_clk PORT_NAME_MAP { pll_ref_clk pll_ref_clk }
 
	# Create the reset interface
    add_interface global_reset_n reset end
	add_instance global_reset_n altera_reset_bridge
    set_interface_property global_reset_n export_of global_reset_n.in_reset
	set_instance_parameter global_reset_n SYNCHRONOUS_EDGES none
    set_instance_parameter global_reset_n ACTIVE_LOW_RESET 1
	# Make the exported port name to the desired name
	set_interface_property global_reset_n PORT_NAME_MAP { global_reset_n in_reset_n }


	# Create the clock and reset connections
	add_connection "pll_ref_clk.out_clk/${PLL}.pll_ref_clk"
	add_connection "${PLL}.pll_clk/${TEMP_SENSE}.pll_clk"
	add_connection "${PLL}.pll_locked/${TEMP_SENSE}.pll_locked"

	add_connection "global_reset_n.out_reset/${PLL}.global_reset_n"
	add_connection "global_reset_n.out_reset/${TEMP_SENSE}.global_reset_n"

	# Create the sense value conduit interface
    add_interface sense_value conduit start
    set_interface_property sense_value export_of "${TEMP_SENSE}.sense_value"
}

# | 
# +-----------------------------------

