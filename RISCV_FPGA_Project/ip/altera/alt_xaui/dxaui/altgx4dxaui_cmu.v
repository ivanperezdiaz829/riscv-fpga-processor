// (C) 2001-2013 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions and other 
// software and tools, and its AMPP partner logic functions, and any output 
// files any of the foregoing (including device programming or simulation 
// files), and any associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License Subscription 
// Agreement, Altera MegaCore Function License Agreement, or other applicable 
// license agreement, including, without limitation, that your use is for the 
// sole purpose of programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the applicable 
// agreement for further details.


// megafunction wizard: %ALTGX%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: alt4gxb 

// ============================================================
// File Name: altgx4dxaui.v
// Megafunction Name(s):
// 			alt4gxb
//
// Simulation Library Files(s):
// 			stratixiv_hssi
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 10.1 Build 153 11/29/2010 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2010 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//alt4gxb CBX_AUTO_BLACKBOX="ALL" device_family="Stratix IV" effective_data_rate="6250 Mbps" enable_lc_tx_pll="false" enable_pll_inclk_drive_rx_cru="true" enable_pma_direct="true" enable_pma_xn_bonding="true" equalizer_ctrl_a_setting=0 equalizer_ctrl_b_setting=0 equalizer_ctrl_c_setting=0 equalizer_ctrl_d_setting=0 equalizer_ctrl_v_setting=0 equalizer_dcgain_setting=0 gen_reconfig_pll="false" gx_channel_type="auto" gxb_analog_power="AUTO" gxb_powerdown_width=1 input_clock_frequency="156.25 MHz" intended_device_speed_grade="4" intended_device_variant="GX" loopback_mode="slb" number_of_channels=4 number_of_quads=4 operation_mode="duplex" pll_control_width=1 pll_pfd_fb_mode="internal" preemphasis_ctrl_1stposttap_setting=0 preemphasis_ctrl_2ndposttap_inv_setting="false" preemphasis_ctrl_2ndposttap_setting=0 preemphasis_ctrl_pretap_inv_setting="false" preemphasis_ctrl_pretap_setting=0 protocol="basic" receiver_termination="OCT_100_OHMS" reconfig_calibration="true" reconfig_dprio_mode=0 reconfig_fromgxb_port_width=68 reconfig_togxb_port_width=4 rx_8b_10b_mode="none" rx_allow_align_polarity_inversion="false" rx_byte_ordering_mode="none" rx_channel_width=20 rx_common_mode="0.82v" rx_cru_bandwidth_type="auto" rx_cru_inclock0_period=6400 rx_cru_m_divider=20 rx_cru_n_divider=1 rx_cru_vco_post_scale_divider=1 rx_data_rate=6250 rx_data_rate_remainder=0 rx_digitalreset_port_width=4 rx_dwidth_factor=2 rx_enable_bit_reversal="false" rx_enable_lock_to_data_sig="true" rx_enable_lock_to_refclk_sig="true" rx_enable_self_test_mode="false" rx_force_signal_detect="true" rx_ppmselect=32 rx_rate_match_fifo_mode="none" rx_run_length=40 rx_run_length_enable="true" rx_signal_detect_loss_threshold=1 rx_signal_detect_threshold=2 rx_signal_detect_valid_threshold=1 rx_use_clkout="true" rx_use_coreclk="false" rx_use_deserializer_double_data_mode="true" rx_use_double_data_mode="false" rx_use_external_termination="false" rx_word_aligner_num_byte=2 starting_channel_number=0 transmitter_termination="OCT_100_OHMS" tx_8b_10b_mode="none" tx_allow_polarity_inversion="false" tx_analog_power="auto" tx_channel_width=20 tx_clkout_width=4 tx_common_mode="0.65v" tx_data_rate=6250 tx_data_rate_remainder=0 tx_dwidth_factor=2 tx_enable_bit_reversal="false" tx_enable_self_test_mode="false" tx_pll_bandwidth_type="auto" tx_pll_clock_post_divider=1 tx_pll_inclk0_period=6400 tx_pll_m_divider=20 tx_pll_n_divider=1 tx_pll_type="CMU" tx_pll_vco_post_scale_divider=1 tx_slew_rate="off" tx_use_coreclk="false" tx_use_double_data_mode="false" tx_use_external_termination="false" tx_use_serializer_double_data_mode="true" use_calibration_block="true" vod_ctrl_setting=3 cal_blk_clk cal_blk_powerdown gxb_powerdown pll_inclk pll_locked pll_powerdown reconfig_clk reconfig_fromgxb reconfig_togxb rx_analogreset rx_clkout rx_datain rx_dataout rx_freqlocked rx_locktodata rx_locktorefclk rx_pll_locked rx_seriallpbken tx_clkout tx_datain tx_dataout
//VERSION_BEGIN 10.1 cbx_alt4gxb 2010:11:29:21:11:55:SJ cbx_mgl 2010:11:29:21:28:48:SJ cbx_tgx 2010:11:29:21:11:55:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463


//synthesis_resources = stratixiv_hssi_calibration_block 5 stratixiv_hssi_clock_divider 1 stratixiv_hssi_cmu 5 stratixiv_hssi_pll 5 stratixiv_hssi_rx_pma 4 stratixiv_hssi_tx_pma 4 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altgx4dxaui_alt4gxb
	( 
	cal_blk_clk,
	cal_blk_powerdown,
	gxb_powerdown,
	pll_inclk,
	pll_locked,
	pll_powerdown,
	reconfig_clk,
	reconfig_fromgxb,
	reconfig_togxb,
	rx_analogreset,
	rx_clkout,
	rx_datain,
	rx_dataout,
	rx_freqlocked,
	rx_locktodata,
	rx_locktorefclk,
	rx_pll_locked,
	rx_seriallpbken,
	tx_clkout,
	tx_datain,
	tx_dataout) ;
	input   cal_blk_clk;
	input   cal_blk_powerdown;
	input   [0:0]  gxb_powerdown;
	input   pll_inclk;
	output   [0:0]  pll_locked;
	input   [0:0]  pll_powerdown;
	input   reconfig_clk;
	output   [67:0]  reconfig_fromgxb;
	input   [3:0]  reconfig_togxb;
	input   [3:0]  rx_analogreset;
	output   [3:0]  rx_clkout;
	input   [3:0]  rx_datain;
	output   [79:0]  rx_dataout;
	output   [3:0]  rx_freqlocked;
	input   [3:0]  rx_locktodata;
	input   [3:0]  rx_locktorefclk;
	output   [3:0]  rx_pll_locked;
	input   [3:0]  rx_seriallpbken;
	output   [3:0]  tx_clkout;
	input   [79:0]  tx_datain;
	output   [3:0]  tx_dataout;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   cal_blk_clk;
	tri0   cal_blk_powerdown;
	tri0   [0:0]  gxb_powerdown;
	tri0   pll_inclk;
	tri0   [0:0]  pll_powerdown;
	tri0   reconfig_clk;
	tri0   [3:0]  rx_analogreset;
	tri0   [3:0]  rx_locktodata;
	tri0   [3:0]  rx_locktorefclk;
	tri0   [3:0]  rx_seriallpbken;
	tri0   [79:0]  tx_datain;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif


	parameter	starting_channel_number = 0;


	wire  wire_cal_blk0_nonusertocmu;
	wire  wire_cal_blk1_nonusertocmu;
	wire  wire_cal_blk2_nonusertocmu;
	wire  wire_cal_blk3_nonusertocmu;
	wire  wire_pll_cal_blk0_nonusertocmu;
	wire  [1:0]   wire_central_clk_div0_analogfastrefclkout;
	wire  [1:0]   wire_central_clk_div0_analogrefclkout;
	wire  wire_central_clk_div0_analogrefclkpulse;
	wire  [99:0]   wire_central_clk_div0_dprioout;
	wire  wire_central_clk_div0_refclkout;
	wire  [1799:0]   wire_cent_unit0_cmuplldprioout;
	wire  wire_cent_unit0_dpriodisableout;
	wire  wire_cent_unit0_dprioout;
	wire  wire_cent_unit0_quadresetout;
	wire  [5:0]   wire_cent_unit0_rxanalogresetout;
	wire  [5:0]   wire_cent_unit0_rxcrupowerdown;
	wire  [5:0]   wire_cent_unit0_rxcruresetout;
	wire  [5:0]   wire_cent_unit0_rxibpowerdown;
	wire  [1799:0]   wire_cent_unit0_rxpmadprioout;
	wire  [5:0]   wire_cent_unit0_txanalogresetout;
	wire  [5:0]   wire_cent_unit0_txdetectrxpowerdown;
	wire  [5:0]   wire_cent_unit0_txobpowerdown;
	wire  [1799:0]   wire_cent_unit0_txpmadprioout;
	wire  [1799:0]   wire_cent_unit1_cmuplldprioout;
	wire  wire_cent_unit1_dpriodisableout;
	wire  wire_cent_unit1_dprioout;
	wire  wire_cent_unit1_quadresetout;
	wire  [5:0]   wire_cent_unit1_rxanalogresetout;
	wire  [5:0]   wire_cent_unit1_rxcrupowerdown;
	wire  [5:0]   wire_cent_unit1_rxcruresetout;
	wire  [5:0]   wire_cent_unit1_rxibpowerdown;
	wire  [1799:0]   wire_cent_unit1_rxpmadprioout;
	wire  [5:0]   wire_cent_unit1_txanalogresetout;
	wire  [5:0]   wire_cent_unit1_txdetectrxpowerdown;
	wire  [5:0]   wire_cent_unit1_txobpowerdown;
	wire  [1799:0]   wire_cent_unit1_txpmadprioout;
	wire  [1799:0]   wire_cent_unit2_cmuplldprioout;
	wire  wire_cent_unit2_dpriodisableout;
	wire  wire_cent_unit2_dprioout;
	wire  wire_cent_unit2_quadresetout;
	wire  [5:0]   wire_cent_unit2_rxanalogresetout;
	wire  [5:0]   wire_cent_unit2_rxcrupowerdown;
	wire  [5:0]   wire_cent_unit2_rxcruresetout;
	wire  [5:0]   wire_cent_unit2_rxibpowerdown;
	wire  [1799:0]   wire_cent_unit2_rxpmadprioout;
	wire  [5:0]   wire_cent_unit2_txanalogresetout;
	wire  [5:0]   wire_cent_unit2_txdetectrxpowerdown;
	wire  [5:0]   wire_cent_unit2_txobpowerdown;
	wire  [1799:0]   wire_cent_unit2_txpmadprioout;
	wire  [1799:0]   wire_cent_unit3_cmuplldprioout;
	wire  wire_cent_unit3_dpriodisableout;
	wire  wire_cent_unit3_dprioout;
	wire  wire_cent_unit3_quadresetout;
	wire  [5:0]   wire_cent_unit3_rxanalogresetout;
	wire  [5:0]   wire_cent_unit3_rxcrupowerdown;
	wire  [5:0]   wire_cent_unit3_rxcruresetout;
	wire  [5:0]   wire_cent_unit3_rxibpowerdown;
	wire  [1799:0]   wire_cent_unit3_rxpmadprioout;
	wire  [5:0]   wire_cent_unit3_txanalogresetout;
	wire  [5:0]   wire_cent_unit3_txdetectrxpowerdown;
	wire  [5:0]   wire_cent_unit3_txobpowerdown;
	wire  [1799:0]   wire_cent_unit3_txpmadprioout;
	wire  [1:0]   wire_tx_pll_cent_unit0_clkdivpowerdn;
	wire  [599:0]   wire_tx_pll_cent_unit0_cmudividerdprioout;
	wire  [1799:0]   wire_tx_pll_cent_unit0_cmuplldprioout;
	wire  wire_tx_pll_cent_unit0_dpriodisableout;
	wire  [1:0]   wire_tx_pll_cent_unit0_pllpowerdn;
	wire  [1:0]   wire_tx_pll_cent_unit0_pllresetout;
	wire  wire_tx_pll_cent_unit0_quadresetout;
	wire  [3:0]   wire_rx_cdr_pll0_clk;
	wire  [1:0]   wire_rx_cdr_pll0_dataout;
	wire  [299:0]   wire_rx_cdr_pll0_dprioout;
	wire  wire_rx_cdr_pll0_freqlocked;
	wire  wire_rx_cdr_pll0_locked;
	wire  wire_rx_cdr_pll0_pfdrefclkout;
	wire  [3:0]   wire_rx_cdr_pll1_clk;
	wire  [1:0]   wire_rx_cdr_pll1_dataout;
	wire  [299:0]   wire_rx_cdr_pll1_dprioout;
	wire  wire_rx_cdr_pll1_freqlocked;
	wire  wire_rx_cdr_pll1_locked;
	wire  wire_rx_cdr_pll1_pfdrefclkout;
	wire  [3:0]   wire_rx_cdr_pll2_clk;
	wire  [1:0]   wire_rx_cdr_pll2_dataout;
	wire  [299:0]   wire_rx_cdr_pll2_dprioout;
	wire  wire_rx_cdr_pll2_freqlocked;
	wire  wire_rx_cdr_pll2_locked;
	wire  wire_rx_cdr_pll2_pfdrefclkout;
	wire  [3:0]   wire_rx_cdr_pll3_clk;
	wire  [1:0]   wire_rx_cdr_pll3_dataout;
	wire  [299:0]   wire_rx_cdr_pll3_dprioout;
	wire  wire_rx_cdr_pll3_freqlocked;
	wire  wire_rx_cdr_pll3_locked;
	wire  wire_rx_cdr_pll3_pfdrefclkout;
	wire  [3:0]   wire_tx_pll_edge0_clk;
	wire  [299:0]   wire_tx_pll_edge0_dprioout;
	wire  wire_tx_pll_edge0_locked;
	wire  [7:0]   wire_receive_pma0_analogtestbus;
	wire  wire_receive_pma0_clockout;
	wire  wire_receive_pma0_dataout;
	wire  [299:0]   wire_receive_pma0_dprioout;
	wire  wire_receive_pma0_locktorefout;
	wire  [63:0]   wire_receive_pma0_recoverdataout;
	wire  wire_receive_pma0_signaldetect;
	wire  [7:0]   wire_receive_pma1_analogtestbus;
	wire  wire_receive_pma1_clockout;
	wire  wire_receive_pma1_dataout;
	wire  [299:0]   wire_receive_pma1_dprioout;
	wire  wire_receive_pma1_locktorefout;
	wire  [63:0]   wire_receive_pma1_recoverdataout;
	wire  wire_receive_pma1_signaldetect;
	wire  [7:0]   wire_receive_pma2_analogtestbus;
	wire  wire_receive_pma2_clockout;
	wire  wire_receive_pma2_dataout;
	wire  [299:0]   wire_receive_pma2_dprioout;
	wire  wire_receive_pma2_locktorefout;
	wire  [63:0]   wire_receive_pma2_recoverdataout;
	wire  wire_receive_pma2_signaldetect;
	wire  [7:0]   wire_receive_pma3_analogtestbus;
	wire  wire_receive_pma3_clockout;
	wire  wire_receive_pma3_dataout;
	wire  [299:0]   wire_receive_pma3_dprioout;
	wire  wire_receive_pma3_locktorefout;
	wire  [63:0]   wire_receive_pma3_recoverdataout;
	wire  wire_receive_pma3_signaldetect;
	wire  wire_transmit_pma0_clockout;
	wire  wire_transmit_pma0_dataout;
	wire  [299:0]   wire_transmit_pma0_dprioout;
	wire  wire_transmit_pma0_seriallpbkout;
	wire  wire_transmit_pma1_clockout;
	wire  wire_transmit_pma1_dataout;
	wire  [299:0]   wire_transmit_pma1_dprioout;
	wire  wire_transmit_pma1_seriallpbkout;
	wire  wire_transmit_pma2_clockout;
	wire  wire_transmit_pma2_dataout;
	wire  [299:0]   wire_transmit_pma2_dprioout;
	wire  wire_transmit_pma2_seriallpbkout;
	wire  wire_transmit_pma3_clockout;
	wire  wire_transmit_pma3_dataout;
	wire  [299:0]   wire_transmit_pma3_dprioout;
	wire  wire_transmit_pma3_seriallpbkout;
	wire  [7199:0]  cent_unit_cmuplldprioout;
	wire  [23:0]  cent_unit_rxcrupowerdn;
	wire  [23:0]  cent_unit_rxibpowerdn;
	wire  [1199:0]  cent_unit_rxpmadprioin;
	wire  [1199:0]  cent_unit_rxpmadprioout;
	wire  [23:0]  cent_unit_txdetectrxpowerdn;
	wire  [2399:0]  cent_unit_txdprioout;
	wire  [23:0]  cent_unit_txobpowerdn;
	wire  [1199:0]  cent_unit_txpmadprioin;
	wire  [1199:0]  cent_unit_txpmadprioout;
	wire  [3:0]  clock_divider_clk0in;
	wire  [599:0]  edge_clk_div_cmudividerdprioin;
	wire  [0:0]  edge_cmu_clkdivpowerdn;
	wire  [99:0]  edge_cmu_cmudividerdprioout;
	wire  [299:0]  edge_cmu_cmuplldprioout;
	wire  [0:0]  edge_cmu_dpriodisableout;
	wire  [0:0]  edge_cmu_pllpowerdn;
	wire  [0:0]  edge_cmu_pllresetout;
	wire  [0:0]  edge_cmu_quadresetout;
	wire  [1:0]  edge_pll_analogfastrefclkout;
	wire  [1:0]  edge_pll_analogrefclkout;
	wire  [0:0]  edge_pll_analogrefclkpulse;
	wire  [9:0]  edge_pll_clkin;
	wire  [299:0]  edge_pll_cmuplldprioout;
	wire  [299:0]  edge_pll_dprioin;
	wire  [299:0]  edge_pll_dprioout;
	wire  [3:0]  edge_pll_out;
	wire  [0:0]  edge_pllpowerdn_in;
	wire  [0:0]  edge_pllreset_in;
	wire  [23:0]  fixedclk_to_cmu;
	wire  [3:0]  nonusertocmu_out;
	wire  [0:0]  nonusertocmu_out_pll;
	wire  [7:0]  pll_ch_dataout_wire;
	wire  [1199:0]  pll_ch_dprioout;
	wire  [7199:0]  pll_cmuplldprioout;
	wire  [0:0]  pll_edge_locked_out;
	wire  [0:0]  pll_inclk_wire;
	wire  [0:0]  reconfig_togxb_busy;
	wire  [0:0]  reconfig_togxb_disable;
	wire  [0:0]  reconfig_togxb_in;
	wire  [0:0]  reconfig_togxb_load;
	wire  [0:0]  refclk_pma_wire;
	wire  [23:0]  rx_analogreset_in;
	wire  [23:0]  rx_analogreset_out;
	wire  [3:0]  rx_clkout_wire;
	wire  [39:0]  rx_cruclk_in;
	wire  [15:0]  rx_deserclock_in;
	wire  [3:0]  rx_freqlocked_wire;
	wire  [3:0]  rx_locktodata_wire;
	wire  [6399:0]  rx_pcsdprioout;
	wire  [3:0]  rx_pldcruclk_in;
	wire  [15:0]  rx_pll_clkout;
	wire  [3:0]  rx_pll_pfdrefclkout_wire;
	wire  [3:0]  rx_plllocked_wire;
	wire  [67:0]  rx_pma_analogtestbus;
	wire  [3:0]  rx_pma_clockout;
	wire  [3:0]  rx_pma_dataout;
	wire  [3:0]  rx_pma_locktorefout;
	wire  [79:0]  rx_pma_recoverdataout_wire;
	wire  [1199:0]  rx_pmadprioin_wire;
	wire  [1199:0]  rx_pmadprioout;
	wire [3:0]  rx_powerdown;
	wire  [23:0]  rx_powerdown_in;
	wire  [23:0]  rx_rxcruresetout;
	wire  [1199:0]  rxpll_dprioin;
	wire  [23:0]  tx_analogreset_out;
	wire  [3:0]  tx_core_clkout_wire;
	wire  [79:0]  tx_datain_wire;
	wire  [3:0]  tx_localrefclk;
	wire  [1199:0]  tx_pmadprioin_wire;
	wire  [1199:0]  tx_pmadprioout;
	wire  [3:0]  tx_serialloopbackout;
	wire  [2399:0]  tx_txdprioout;
	wire  [3:0]  w_cent_unit_dpriodisableout1w;

	stratixiv_hssi_calibration_block   cal_blk0
	( 
	.calibrationstatus(),
	.clk(cal_blk_clk),
	.enabletestbus(1'b1),
	.nonusertocmu(wire_cal_blk0_nonusertocmu),
	.powerdn(cal_blk_powerdown)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.testctrl(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	stratixiv_hssi_calibration_block   cal_blk1
	( 
	.calibrationstatus(),
	.clk(cal_blk_clk),
	.enabletestbus(1'b1),
	.nonusertocmu(wire_cal_blk1_nonusertocmu),
	.powerdn(cal_blk_powerdown)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.testctrl(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	stratixiv_hssi_calibration_block   cal_blk2
	( 
	.calibrationstatus(),
	.clk(cal_blk_clk),
	.enabletestbus(1'b1),
	.nonusertocmu(wire_cal_blk2_nonusertocmu),
	.powerdn(cal_blk_powerdown)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.testctrl(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	stratixiv_hssi_calibration_block   cal_blk3
	( 
	.calibrationstatus(),
	.clk(cal_blk_clk),
	.enabletestbus(1'b1),
	.nonusertocmu(wire_cal_blk3_nonusertocmu),
	.powerdn(cal_blk_powerdown)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.testctrl(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	stratixiv_hssi_calibration_block   pll_cal_blk0
	( 
	.calibrationstatus(),
	.clk(cal_blk_clk),
	.enabletestbus(1'b1),
	.nonusertocmu(wire_pll_cal_blk0_nonusertocmu),
	.powerdn(cal_blk_powerdown)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.testctrl(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	stratixiv_hssi_clock_divider   central_clk_div0
	( 
	.analogfastrefclkout(wire_central_clk_div0_analogfastrefclkout),
	.analogfastrefclkoutshifted(),
	.analogrefclkout(wire_central_clk_div0_analogrefclkout),
	.analogrefclkoutshifted(),
	.analogrefclkpulse(wire_central_clk_div0_analogrefclkpulse),
	.analogrefclkpulseshifted(),
	.clk0in(clock_divider_clk0in[3:0]),
	.coreclkout(),
	.dpriodisable(edge_cmu_dpriodisableout[0]),
	.dprioin(edge_cmu_cmudividerdprioout[99:0]),
	.dprioout(wire_central_clk_div0_dprioout),
	.powerdn(edge_cmu_clkdivpowerdn[0]),
	.quadreset(edge_cmu_quadresetout[0]),
	.rateswitchbaseclock(),
	.rateswitchdone(),
	.rateswitchout(),
	.refclkout(wire_central_clk_div0_refclkout)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1in({4{1'b0}}),
	.rateswitch(1'b0),
	.rateswitchbaseclkin({2{1'b0}}),
	.rateswitchdonein({2{1'b0}}),
	.refclkdig(1'b0),
	.refclkin({2{1'b0}}),
	.vcobypassin(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		central_clk_div0.divide_by = 5,
		central_clk_div0.divider_type = "CENTRAL_ENHANCED",
		central_clk_div0.effective_data_rate = "6250 Mbps",
		central_clk_div0.enable_dynamic_divider = "false",
		central_clk_div0.enable_refclk_out = "true",
		central_clk_div0.inclk_select = 0,
		central_clk_div0.logical_channel_address = 0,
		central_clk_div0.pre_divide_by = 1,
		central_clk_div0.select_local_rate_switch_base_clock = "true",
		central_clk_div0.select_local_refclk = "true",
		central_clk_div0.sim_analogfastrefclkout_phase_shift = 0,
		central_clk_div0.sim_analogrefclkout_phase_shift = 0,
		central_clk_div0.sim_coreclkout_phase_shift = 0,
		central_clk_div0.sim_refclkout_phase_shift = 0,
		central_clk_div0.use_coreclk_out_post_divider = "false",
		central_clk_div0.use_refclk_post_divider = "true",
		central_clk_div0.use_vco_bypass = "false",
		central_clk_div0.lpm_type = "stratixiv_hssi_clock_divider";
	stratixiv_hssi_cmu   cent_unit0
	( 
	.adet({4{1'b0}}),
	.alignstatus(),
	.autospdx4configsel(),
	.autospdx4rateswitchout(),
	.autospdx4spdchg(),
	.clkdivpowerdn(),
	.cmudividerdprioout(),
	.cmuplldprioin(pll_cmuplldprioout[1799:0]),
	.cmuplldprioout(wire_cent_unit0_cmuplldprioout),
	.digitaltestout(),
	.dpclk(reconfig_clk),
	.dpriodisable(reconfig_togxb_disable),
	.dpriodisableout(wire_cent_unit0_dpriodisableout),
	.dprioin(reconfig_togxb_in),
	.dprioload(reconfig_togxb_load),
	.dpriooe(),
	.dprioout(wire_cent_unit0_dprioout),
	.enabledeskew(),
	.extra10gout(),
	.fiforesetrd(),
	.fixedclk({{5{1'b0}}, fixedclk_to_cmu[0]}),
	.lccmutestbus(),
	.nonuserfromcal(nonusertocmu_out[0]),
	.phfifiox4ptrsreset(),
	.pllpowerdn(),
	.pllresetout(),
	.quadreset(gxb_powerdown[0]),
	.quadresetout(wire_cent_unit0_quadresetout),
	.rdalign({4{1'b0}}),
	.rdenablesync(1'b0),
	.recovclk(1'b0),
	.refclkdividerdprioout(),
	.rxadcepowerdown(),
	.rxadceresetout(),
	.rxanalogreset({{5{1'b0}}, rx_analogreset_in[0]}),
	.rxanalogresetout(wire_cent_unit0_rxanalogresetout),
	.rxcrupowerdown(wire_cent_unit0_rxcrupowerdown),
	.rxcruresetout(wire_cent_unit0_rxcruresetout),
	.rxctrl({4{1'b0}}),
	.rxctrlout(),
	.rxdatain({32{1'b0}}),
	.rxdataout(),
	.rxdatavalid({4{1'b0}}),
	.rxdigitalresetout(),
	.rxibpowerdown(wire_cent_unit0_rxibpowerdown),
	.rxpcsdprioout(),
	.rxphfifox4byteselout(),
	.rxphfifox4rdenableout(),
	.rxphfifox4wrclkout(),
	.rxphfifox4wrenableout(),
	.rxpmadprioin({{1500{1'b0}}, cent_unit_rxpmadprioin[299:0]}),
	.rxpmadprioout(wire_cent_unit0_rxpmadprioout),
	.rxpowerdown({{5{1'b0}}, rx_powerdown_in[0]}),
	.rxrunningdisp({4{1'b0}}),
	.scanout(),
	.syncstatus({4{1'b0}}),
	.testout(),
	.txanalogresetout(wire_cent_unit0_txanalogresetout),
	.txctrl({4{1'b0}}),
	.txctrlout(),
	.txdatain({32{1'b0}}),
	.txdataout(),
	.txdetectrxpowerdown(wire_cent_unit0_txdetectrxpowerdown),
	.txdigitalresetout(),
	.txdividerpowerdown(),
	.txobpowerdown(wire_cent_unit0_txobpowerdown),
	.txpcsdprioout(),
	.txphfifox4byteselout(),
	.txphfifox4rdclkout(),
	.txphfifox4rdenableout(),
	.txphfifox4wrenableout(),
	.txpmadprioin({{1500{1'b0}}, cent_unit_txpmadprioin[299:0]}),
	.txpmadprioout(wire_cent_unit0_txpmadprioout)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.cmudividerdprioin({600{1'b0}}),
	.extra10gin({7{1'b0}}),
	.lccmurtestbussel({3{1'b0}}),
	.pmacramtest(1'b0),
	.rateswitch(1'b0),
	.rateswitchdonein(1'b0),
	.refclkdividerdprioin({2{1'b0}}),
	.rxclk(1'b0),
	.rxcoreclk(1'b0),
	.rxdigitalreset({4{1'b0}}),
	.rxpcsdprioin({1600{1'b0}}),
	.rxphfifordenable(1'b1),
	.rxphfiforeset(1'b0),
	.rxphfifowrdisable(1'b0),
	.scanclk(1'b0),
	.scanin({23{1'b0}}),
	.scanmode(1'b0),
	.scanshift(1'b0),
	.testin({10000{1'b0}}),
	.txclk(1'b0),
	.txcoreclk(1'b0),
	.txdigitalreset({4{1'b0}}),
	.txpcsdprioin({600{1'b0}}),
	.txphfiforddisable(1'b0),
	.txphfiforeset(1'b0),
	.txphfifowrenable(1'b0),
	.txpllreset({2{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cent_unit0.auto_spd_deassert_ph_fifo_rst_count = 8,
		cent_unit0.auto_spd_phystatus_notify_count = 14,
		cent_unit0.bonded_quad_mode = "none",
		cent_unit0.devaddr = ((((starting_channel_number / 4) + 0) % 32) + 1),
		cent_unit0.in_xaui_mode = "false",
		cent_unit0.offset_all_errors_align = "false",
		cent_unit0.pipe_auto_speed_nego_enable = "false",
		cent_unit0.pipe_freq_scale_mode = "Frequency",
		cent_unit0.pma_done_count = 249950,
		cent_unit0.portaddr = (((starting_channel_number + 0) / 128) + 1),
		cent_unit0.rx0_auto_spd_self_switch_enable = "false",
		cent_unit0.rx0_channel_bonding = "none",
		cent_unit0.rx0_clk1_mux_select = "recovered clock",
		cent_unit0.rx0_clk2_mux_select = "recovered clock",
		cent_unit0.rx0_ph_fifo_reg_mode = "false",
		cent_unit0.rx0_rd_clk_mux_select = "core clock",
		cent_unit0.rx0_recovered_clk_mux_select = "recovered clock",
		cent_unit0.rx0_reset_clock_output_during_digital_reset = "false",
		cent_unit0.rx0_use_double_data_mode = "false",
		cent_unit0.tx0_auto_spd_self_switch_enable = "false",
		cent_unit0.tx0_channel_bonding = "none",
		cent_unit0.tx0_ph_fifo_reg_mode = "false",
		cent_unit0.tx0_rd_clk_mux_select = "cmu_clock_divider",
		cent_unit0.tx0_use_double_data_mode = "false",
		cent_unit0.tx0_wr_clk_mux_select = "core_clk",
		cent_unit0.use_deskew_fifo = "false",
		cent_unit0.vcceh_voltage = "Auto",
		cent_unit0.lpm_type = "stratixiv_hssi_cmu";
	stratixiv_hssi_cmu   cent_unit1
	( 
	.adet({4{1'b0}}),
	.alignstatus(),
	.autospdx4configsel(),
	.autospdx4rateswitchout(),
	.autospdx4spdchg(),
	.clkdivpowerdn(),
	.cmudividerdprioout(),
	.cmuplldprioin(pll_cmuplldprioout[3599:1800]),
	.cmuplldprioout(wire_cent_unit1_cmuplldprioout),
	.digitaltestout(),
	.dpclk(reconfig_clk),
	.dpriodisable(reconfig_togxb_disable),
	.dpriodisableout(wire_cent_unit1_dpriodisableout),
	.dprioin(reconfig_togxb_in),
	.dprioload(reconfig_togxb_load),
	.dpriooe(),
	.dprioout(wire_cent_unit1_dprioout),
	.enabledeskew(),
	.extra10gout(),
	.fiforesetrd(),
	.fixedclk({{5{1'b0}}, fixedclk_to_cmu[1]}),
	.lccmutestbus(),
	.nonuserfromcal(nonusertocmu_out[1]),
	.phfifiox4ptrsreset(),
	.pllpowerdn(),
	.pllresetout(),
	.quadreset(gxb_powerdown[0]),
	.quadresetout(wire_cent_unit1_quadresetout),
	.rdalign({4{1'b0}}),
	.rdenablesync(1'b0),
	.recovclk(1'b0),
	.refclkdividerdprioout(),
	.rxadcepowerdown(),
	.rxadceresetout(),
	.rxanalogreset({{5{1'b0}}, rx_analogreset_in[1]}),
	.rxanalogresetout(wire_cent_unit1_rxanalogresetout),
	.rxcrupowerdown(wire_cent_unit1_rxcrupowerdown),
	.rxcruresetout(wire_cent_unit1_rxcruresetout),
	.rxctrl({4{1'b0}}),
	.rxctrlout(),
	.rxdatain({32{1'b0}}),
	.rxdataout(),
	.rxdatavalid({4{1'b0}}),
	.rxdigitalresetout(),
	.rxibpowerdown(wire_cent_unit1_rxibpowerdown),
	.rxpcsdprioout(),
	.rxphfifox4byteselout(),
	.rxphfifox4rdenableout(),
	.rxphfifox4wrclkout(),
	.rxphfifox4wrenableout(),
	.rxpmadprioin({{1500{1'b0}}, cent_unit_rxpmadprioin[599:300]}),
	.rxpmadprioout(wire_cent_unit1_rxpmadprioout),
	.rxpowerdown({{5{1'b0}}, rx_powerdown_in[1]}),
	.rxrunningdisp({4{1'b0}}),
	.scanout(),
	.syncstatus({4{1'b0}}),
	.testout(),
	.txanalogresetout(wire_cent_unit1_txanalogresetout),
	.txctrl({4{1'b0}}),
	.txctrlout(),
	.txdatain({32{1'b0}}),
	.txdataout(),
	.txdetectrxpowerdown(wire_cent_unit1_txdetectrxpowerdown),
	.txdigitalresetout(),
	.txdividerpowerdown(),
	.txobpowerdown(wire_cent_unit1_txobpowerdown),
	.txpcsdprioout(),
	.txphfifox4byteselout(),
	.txphfifox4rdclkout(),
	.txphfifox4rdenableout(),
	.txphfifox4wrenableout(),
	.txpmadprioin({{1500{1'b0}}, cent_unit_txpmadprioin[599:300]}),
	.txpmadprioout(wire_cent_unit1_txpmadprioout)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.cmudividerdprioin({600{1'b0}}),
	.extra10gin({7{1'b0}}),
	.lccmurtestbussel({3{1'b0}}),
	.pmacramtest(1'b0),
	.rateswitch(1'b0),
	.rateswitchdonein(1'b0),
	.refclkdividerdprioin({2{1'b0}}),
	.rxclk(1'b0),
	.rxcoreclk(1'b0),
	.rxdigitalreset({4{1'b0}}),
	.rxpcsdprioin({1600{1'b0}}),
	.rxphfifordenable(1'b1),
	.rxphfiforeset(1'b0),
	.rxphfifowrdisable(1'b0),
	.scanclk(1'b0),
	.scanin({23{1'b0}}),
	.scanmode(1'b0),
	.scanshift(1'b0),
	.testin({10000{1'b0}}),
	.txclk(1'b0),
	.txcoreclk(1'b0),
	.txdigitalreset({4{1'b0}}),
	.txpcsdprioin({600{1'b0}}),
	.txphfiforddisable(1'b0),
	.txphfiforeset(1'b0),
	.txphfifowrenable(1'b0),
	.txpllreset({2{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cent_unit1.auto_spd_deassert_ph_fifo_rst_count = 8,
		cent_unit1.auto_spd_phystatus_notify_count = 14,
		cent_unit1.bonded_quad_mode = "none",
		cent_unit1.devaddr = ((((starting_channel_number / 4) + 1) % 32) + 1),
		cent_unit1.in_xaui_mode = "false",
		cent_unit1.offset_all_errors_align = "false",
		cent_unit1.pipe_auto_speed_nego_enable = "false",
		cent_unit1.pipe_freq_scale_mode = "Frequency",
		cent_unit1.pma_done_count = 249950,
		cent_unit1.portaddr = (((starting_channel_number + 4) / 128) + 1),
		cent_unit1.rx0_auto_spd_self_switch_enable = "false",
		cent_unit1.rx0_channel_bonding = "none",
		cent_unit1.rx0_clk1_mux_select = "recovered clock",
		cent_unit1.rx0_clk2_mux_select = "recovered clock",
		cent_unit1.rx0_ph_fifo_reg_mode = "false",
		cent_unit1.rx0_rd_clk_mux_select = "core clock",
		cent_unit1.rx0_recovered_clk_mux_select = "recovered clock",
		cent_unit1.rx0_reset_clock_output_during_digital_reset = "false",
		cent_unit1.rx0_use_double_data_mode = "false",
		cent_unit1.tx0_auto_spd_self_switch_enable = "false",
		cent_unit1.tx0_channel_bonding = "none",
		cent_unit1.tx0_ph_fifo_reg_mode = "false",
		cent_unit1.tx0_rd_clk_mux_select = "cmu_clock_divider",
		cent_unit1.tx0_use_double_data_mode = "false",
		cent_unit1.tx0_wr_clk_mux_select = "core_clk",
		cent_unit1.use_deskew_fifo = "false",
		cent_unit1.vcceh_voltage = "Auto",
		cent_unit1.lpm_type = "stratixiv_hssi_cmu";
	stratixiv_hssi_cmu   cent_unit2
	( 
	.adet({4{1'b0}}),
	.alignstatus(),
	.autospdx4configsel(),
	.autospdx4rateswitchout(),
	.autospdx4spdchg(),
	.clkdivpowerdn(),
	.cmudividerdprioout(),
	.cmuplldprioin(pll_cmuplldprioout[5399:3600]),
	.cmuplldprioout(wire_cent_unit2_cmuplldprioout),
	.digitaltestout(),
	.dpclk(reconfig_clk),
	.dpriodisable(reconfig_togxb_disable),
	.dpriodisableout(wire_cent_unit2_dpriodisableout),
	.dprioin(reconfig_togxb_in),
	.dprioload(reconfig_togxb_load),
	.dpriooe(),
	.dprioout(wire_cent_unit2_dprioout),
	.enabledeskew(),
	.extra10gout(),
	.fiforesetrd(),
	.fixedclk({{5{1'b0}}, fixedclk_to_cmu[2]}),
	.lccmutestbus(),
	.nonuserfromcal(nonusertocmu_out[2]),
	.phfifiox4ptrsreset(),
	.pllpowerdn(),
	.pllresetout(),
	.quadreset(gxb_powerdown[0]),
	.quadresetout(wire_cent_unit2_quadresetout),
	.rdalign({4{1'b0}}),
	.rdenablesync(1'b0),
	.recovclk(1'b0),
	.refclkdividerdprioout(),
	.rxadcepowerdown(),
	.rxadceresetout(),
	.rxanalogreset({{5{1'b0}}, rx_analogreset_in[2]}),
	.rxanalogresetout(wire_cent_unit2_rxanalogresetout),
	.rxcrupowerdown(wire_cent_unit2_rxcrupowerdown),
	.rxcruresetout(wire_cent_unit2_rxcruresetout),
	.rxctrl({4{1'b0}}),
	.rxctrlout(),
	.rxdatain({32{1'b0}}),
	.rxdataout(),
	.rxdatavalid({4{1'b0}}),
	.rxdigitalresetout(),
	.rxibpowerdown(wire_cent_unit2_rxibpowerdown),
	.rxpcsdprioout(),
	.rxphfifox4byteselout(),
	.rxphfifox4rdenableout(),
	.rxphfifox4wrclkout(),
	.rxphfifox4wrenableout(),
	.rxpmadprioin({{1500{1'b0}}, cent_unit_rxpmadprioin[899:600]}),
	.rxpmadprioout(wire_cent_unit2_rxpmadprioout),
	.rxpowerdown({{5{1'b0}}, rx_powerdown_in[2]}),
	.rxrunningdisp({4{1'b0}}),
	.scanout(),
	.syncstatus({4{1'b0}}),
	.testout(),
	.txanalogresetout(wire_cent_unit2_txanalogresetout),
	.txctrl({4{1'b0}}),
	.txctrlout(),
	.txdatain({32{1'b0}}),
	.txdataout(),
	.txdetectrxpowerdown(wire_cent_unit2_txdetectrxpowerdown),
	.txdigitalresetout(),
	.txdividerpowerdown(),
	.txobpowerdown(wire_cent_unit2_txobpowerdown),
	.txpcsdprioout(),
	.txphfifox4byteselout(),
	.txphfifox4rdclkout(),
	.txphfifox4rdenableout(),
	.txphfifox4wrenableout(),
	.txpmadprioin({{1500{1'b0}}, cent_unit_txpmadprioin[899:600]}),
	.txpmadprioout(wire_cent_unit2_txpmadprioout)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.cmudividerdprioin({600{1'b0}}),
	.extra10gin({7{1'b0}}),
	.lccmurtestbussel({3{1'b0}}),
	.pmacramtest(1'b0),
	.rateswitch(1'b0),
	.rateswitchdonein(1'b0),
	.refclkdividerdprioin({2{1'b0}}),
	.rxclk(1'b0),
	.rxcoreclk(1'b0),
	.rxdigitalreset({4{1'b0}}),
	.rxpcsdprioin({1600{1'b0}}),
	.rxphfifordenable(1'b1),
	.rxphfiforeset(1'b0),
	.rxphfifowrdisable(1'b0),
	.scanclk(1'b0),
	.scanin({23{1'b0}}),
	.scanmode(1'b0),
	.scanshift(1'b0),
	.testin({10000{1'b0}}),
	.txclk(1'b0),
	.txcoreclk(1'b0),
	.txdigitalreset({4{1'b0}}),
	.txpcsdprioin({600{1'b0}}),
	.txphfiforddisable(1'b0),
	.txphfiforeset(1'b0),
	.txphfifowrenable(1'b0),
	.txpllreset({2{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cent_unit2.auto_spd_deassert_ph_fifo_rst_count = 8,
		cent_unit2.auto_spd_phystatus_notify_count = 14,
		cent_unit2.bonded_quad_mode = "none",
		cent_unit2.devaddr = ((((starting_channel_number / 4) + 2) % 32) + 1),
		cent_unit2.in_xaui_mode = "false",
		cent_unit2.offset_all_errors_align = "false",
		cent_unit2.pipe_auto_speed_nego_enable = "false",
		cent_unit2.pipe_freq_scale_mode = "Frequency",
		cent_unit2.pma_done_count = 249950,
		cent_unit2.portaddr = (((starting_channel_number + 8) / 128) + 1),
		cent_unit2.rx0_auto_spd_self_switch_enable = "false",
		cent_unit2.rx0_channel_bonding = "none",
		cent_unit2.rx0_clk1_mux_select = "recovered clock",
		cent_unit2.rx0_clk2_mux_select = "recovered clock",
		cent_unit2.rx0_ph_fifo_reg_mode = "false",
		cent_unit2.rx0_rd_clk_mux_select = "core clock",
		cent_unit2.rx0_recovered_clk_mux_select = "recovered clock",
		cent_unit2.rx0_reset_clock_output_during_digital_reset = "false",
		cent_unit2.rx0_use_double_data_mode = "false",
		cent_unit2.tx0_auto_spd_self_switch_enable = "false",
		cent_unit2.tx0_channel_bonding = "none",
		cent_unit2.tx0_ph_fifo_reg_mode = "false",
		cent_unit2.tx0_rd_clk_mux_select = "cmu_clock_divider",
		cent_unit2.tx0_use_double_data_mode = "false",
		cent_unit2.tx0_wr_clk_mux_select = "core_clk",
		cent_unit2.use_deskew_fifo = "false",
		cent_unit2.vcceh_voltage = "Auto",
		cent_unit2.lpm_type = "stratixiv_hssi_cmu";
	stratixiv_hssi_cmu   cent_unit3
	( 
	.adet({4{1'b0}}),
	.alignstatus(),
	.autospdx4configsel(),
	.autospdx4rateswitchout(),
	.autospdx4spdchg(),
	.clkdivpowerdn(),
	.cmudividerdprioout(),
	.cmuplldprioin(pll_cmuplldprioout[7199:5400]),
	.cmuplldprioout(wire_cent_unit3_cmuplldprioout),
	.digitaltestout(),
	.dpclk(reconfig_clk),
	.dpriodisable(reconfig_togxb_disable),
	.dpriodisableout(wire_cent_unit3_dpriodisableout),
	.dprioin(reconfig_togxb_in),
	.dprioload(reconfig_togxb_load),
	.dpriooe(),
	.dprioout(wire_cent_unit3_dprioout),
	.enabledeskew(),
	.extra10gout(),
	.fiforesetrd(),
	.fixedclk({{5{1'b0}}, fixedclk_to_cmu[3]}),
	.lccmutestbus(),
	.nonuserfromcal(nonusertocmu_out[3]),
	.phfifiox4ptrsreset(),
	.pllpowerdn(),
	.pllresetout(),
	.quadreset(gxb_powerdown[0]),
	.quadresetout(wire_cent_unit3_quadresetout),
	.rdalign({4{1'b0}}),
	.rdenablesync(1'b0),
	.recovclk(1'b0),
	.refclkdividerdprioout(),
	.rxadcepowerdown(),
	.rxadceresetout(),
	.rxanalogreset({{5{1'b0}}, rx_analogreset_in[3]}),
	.rxanalogresetout(wire_cent_unit3_rxanalogresetout),
	.rxcrupowerdown(wire_cent_unit3_rxcrupowerdown),
	.rxcruresetout(wire_cent_unit3_rxcruresetout),
	.rxctrl({4{1'b0}}),
	.rxctrlout(),
	.rxdatain({32{1'b0}}),
	.rxdataout(),
	.rxdatavalid({4{1'b0}}),
	.rxdigitalresetout(),
	.rxibpowerdown(wire_cent_unit3_rxibpowerdown),
	.rxpcsdprioout(),
	.rxphfifox4byteselout(),
	.rxphfifox4rdenableout(),
	.rxphfifox4wrclkout(),
	.rxphfifox4wrenableout(),
	.rxpmadprioin({{1500{1'b0}}, cent_unit_rxpmadprioin[1199:900]}),
	.rxpmadprioout(wire_cent_unit3_rxpmadprioout),
	.rxpowerdown({{5{1'b0}}, rx_powerdown_in[3]}),
	.rxrunningdisp({4{1'b0}}),
	.scanout(),
	.syncstatus({4{1'b0}}),
	.testout(),
	.txanalogresetout(wire_cent_unit3_txanalogresetout),
	.txctrl({4{1'b0}}),
	.txctrlout(),
	.txdatain({32{1'b0}}),
	.txdataout(),
	.txdetectrxpowerdown(wire_cent_unit3_txdetectrxpowerdown),
	.txdigitalresetout(),
	.txdividerpowerdown(),
	.txobpowerdown(wire_cent_unit3_txobpowerdown),
	.txpcsdprioout(),
	.txphfifox4byteselout(),
	.txphfifox4rdclkout(),
	.txphfifox4rdenableout(),
	.txphfifox4wrenableout(),
	.txpmadprioin({{1500{1'b0}}, cent_unit_txpmadprioin[1199:900]}),
	.txpmadprioout(wire_cent_unit3_txpmadprioout)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.cmudividerdprioin({600{1'b0}}),
	.extra10gin({7{1'b0}}),
	.lccmurtestbussel({3{1'b0}}),
	.pmacramtest(1'b0),
	.rateswitch(1'b0),
	.rateswitchdonein(1'b0),
	.refclkdividerdprioin({2{1'b0}}),
	.rxclk(1'b0),
	.rxcoreclk(1'b0),
	.rxdigitalreset({4{1'b0}}),
	.rxpcsdprioin({1600{1'b0}}),
	.rxphfifordenable(1'b1),
	.rxphfiforeset(1'b0),
	.rxphfifowrdisable(1'b0),
	.scanclk(1'b0),
	.scanin({23{1'b0}}),
	.scanmode(1'b0),
	.scanshift(1'b0),
	.testin({10000{1'b0}}),
	.txclk(1'b0),
	.txcoreclk(1'b0),
	.txdigitalreset({4{1'b0}}),
	.txpcsdprioin({600{1'b0}}),
	.txphfiforddisable(1'b0),
	.txphfiforeset(1'b0),
	.txphfifowrenable(1'b0),
	.txpllreset({2{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cent_unit3.auto_spd_deassert_ph_fifo_rst_count = 8,
		cent_unit3.auto_spd_phystatus_notify_count = 14,
		cent_unit3.bonded_quad_mode = "none",
		cent_unit3.devaddr = ((((starting_channel_number / 4) + 3) % 32) + 1),
		cent_unit3.in_xaui_mode = "false",
		cent_unit3.offset_all_errors_align = "false",
		cent_unit3.pipe_auto_speed_nego_enable = "false",
		cent_unit3.pipe_freq_scale_mode = "Frequency",
		cent_unit3.pma_done_count = 249950,
		cent_unit3.portaddr = (((starting_channel_number + 12) / 128) + 1),
		cent_unit3.rx0_auto_spd_self_switch_enable = "false",
		cent_unit3.rx0_channel_bonding = "none",
		cent_unit3.rx0_clk1_mux_select = "recovered clock",
		cent_unit3.rx0_clk2_mux_select = "recovered clock",
		cent_unit3.rx0_ph_fifo_reg_mode = "false",
		cent_unit3.rx0_rd_clk_mux_select = "core clock",
		cent_unit3.rx0_recovered_clk_mux_select = "recovered clock",
		cent_unit3.rx0_reset_clock_output_during_digital_reset = "false",
		cent_unit3.rx0_use_double_data_mode = "false",
		cent_unit3.tx0_auto_spd_self_switch_enable = "false",
		cent_unit3.tx0_channel_bonding = "none",
		cent_unit3.tx0_ph_fifo_reg_mode = "false",
		cent_unit3.tx0_rd_clk_mux_select = "cmu_clock_divider",
		cent_unit3.tx0_use_double_data_mode = "false",
		cent_unit3.tx0_wr_clk_mux_select = "core_clk",
		cent_unit3.use_deskew_fifo = "false",
		cent_unit3.vcceh_voltage = "Auto",
		cent_unit3.lpm_type = "stratixiv_hssi_cmu";
	stratixiv_hssi_cmu   tx_pll_cent_unit0
	( 
	.alignstatus(),
	.autospdx4configsel(),
	.autospdx4rateswitchout(),
	.autospdx4spdchg(),
	.clkdivpowerdn(wire_tx_pll_cent_unit0_clkdivpowerdn),
	.cmudividerdprioin(edge_clk_div_cmudividerdprioin[599:0]),
	.cmudividerdprioout(wire_tx_pll_cent_unit0_cmudividerdprioout),
	.cmuplldprioin({{300{1'b0}}, edge_pll_cmuplldprioout[299:0], {1200{1'b0}}}),
	.cmuplldprioout(wire_tx_pll_cent_unit0_cmuplldprioout),
	.digitaltestout(),
	.dpclk(reconfig_clk),
	.dpriodisable(reconfig_togxb_disable),
	.dpriodisableout(wire_tx_pll_cent_unit0_dpriodisableout),
	.dprioin(reconfig_togxb_in),
	.dprioload(reconfig_togxb_load),
	.dpriooe(),
	.dprioout(),
	.enabledeskew(),
	.extra10gout(),
	.fiforesetrd(),
	.lccmutestbus(),
	.nonuserfromcal(nonusertocmu_out_pll[0]),
	.phfifiox4ptrsreset(),
	.pllpowerdn(wire_tx_pll_cent_unit0_pllpowerdn),
	.pllresetout(wire_tx_pll_cent_unit0_pllresetout),
	.quadreset(gxb_powerdown[0]),
	.quadresetout(wire_tx_pll_cent_unit0_quadresetout),
	.refclkdividerdprioout(),
	.rxadcepowerdown(),
	.rxadceresetout(),
	.rxanalogresetout(),
	.rxcrupowerdown(),
	.rxcruresetout(),
	.rxctrlout(),
	.rxdataout(),
	.rxdigitalresetout(),
	.rxibpowerdown(),
	.rxpcsdprioout(),
	.rxphfifox4byteselout(),
	.rxphfifox4rdenableout(),
	.rxphfifox4wrclkout(),
	.rxphfifox4wrenableout(),
	.rxpmadprioout(),
	.scanout(),
	.testout(),
	.txanalogresetout(),
	.txctrlout(),
	.txdataout(),
	.txdetectrxpowerdown(),
	.txdigitalresetout(),
	.txdividerpowerdown(),
	.txobpowerdown(),
	.txpcsdprioout(),
	.txphfifox4byteselout(),
	.txphfifox4rdclkout(),
	.txphfifox4rdenableout(),
	.txphfifox4wrenableout(),
	.txpllreset({{1{1'b0}}, pll_powerdown[0]}),
	.txpmadprioout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.adet({4{1'b0}}),
	.extra10gin({7{1'b0}}),
	.fixedclk({6{1'b0}}),
	.lccmurtestbussel({3{1'b0}}),
	.pmacramtest(1'b0),
	.rateswitch(1'b0),
	.rateswitchdonein(1'b0),
	.rdalign({4{1'b0}}),
	.rdenablesync(1'b1),
	.recovclk(1'b0),
	.refclkdividerdprioin({2{1'b0}}),
	.rxanalogreset({6{1'b0}}),
	.rxclk(1'b0),
	.rxcoreclk(1'b0),
	.rxctrl({4{1'b0}}),
	.rxdatain({32{1'b0}}),
	.rxdatavalid({4{1'b0}}),
	.rxdigitalreset({4{1'b0}}),
	.rxpcsdprioin({1600{1'b0}}),
	.rxphfifordenable(1'b1),
	.rxphfiforeset(1'b0),
	.rxphfifowrdisable(1'b0),
	.rxpmadprioin({1800{1'b0}}),
	.rxpowerdown({6{1'b0}}),
	.rxrunningdisp({4{1'b0}}),
	.scanclk(1'b0),
	.scanin({23{1'b0}}),
	.scanmode(1'b0),
	.scanshift(1'b0),
	.syncstatus({4{1'b0}}),
	.testin({10000{1'b0}}),
	.txclk(1'b0),
	.txcoreclk(1'b0),
	.txctrl({4{1'b0}}),
	.txdatain({32{1'b0}}),
	.txdigitalreset({4{1'b0}}),
	.txpcsdprioin({600{1'b0}}),
	.txphfiforddisable(1'b0),
	.txphfiforeset(1'b0),
	.txphfifowrenable(1'b0),
	.txpmadprioin({1800{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		tx_pll_cent_unit0.auto_spd_deassert_ph_fifo_rst_count = 8,
		tx_pll_cent_unit0.auto_spd_phystatus_notify_count = 14,
		tx_pll_cent_unit0.devaddr = ((((starting_channel_number / 4) + 4) % 32) + 1),
		tx_pll_cent_unit0.offset_all_errors_align = "false",
		tx_pll_cent_unit0.pipe_freq_scale_mode = "Frequency",
		tx_pll_cent_unit0.pma_done_count = 249950,
		tx_pll_cent_unit0.portaddr = (((starting_channel_number + 16) / 128) + 1),
		tx_pll_cent_unit0.rx0_clk1_mux_select = "recovered clock",
		tx_pll_cent_unit0.rx0_clk2_mux_select = "recovered clock",
		tx_pll_cent_unit0.rx0_rd_clk_mux_select = "core clock",
		tx_pll_cent_unit0.rx0_recovered_clk_mux_select = "recovered clock",
		tx_pll_cent_unit0.rx0_use_double_data_mode = "false",
		tx_pll_cent_unit0.tx0_rd_clk_mux_select = "cmu_clock_divider",
		tx_pll_cent_unit0.tx0_use_double_data_mode = "false",
		tx_pll_cent_unit0.tx0_wr_clk_mux_select = "core_clk",
		tx_pll_cent_unit0.use_deskew_fifo = "false",
		tx_pll_cent_unit0.vcceh_voltage = "Auto",
		tx_pll_cent_unit0.lpm_type = "stratixiv_hssi_cmu";
	stratixiv_hssi_pll   rx_cdr_pll0
	( 
	.areset(rx_rxcruresetout[0]),
	.clk(wire_rx_cdr_pll0_clk),
	.datain(rx_pma_dataout[0]),
	.dataout(wire_rx_cdr_pll0_dataout),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(rxpll_dprioin[299:0]),
	.dprioout(wire_rx_cdr_pll0_dprioout),
	.freqlocked(wire_rx_cdr_pll0_freqlocked),
	.inclk({rx_cruclk_in[9:0]}),
	.locked(wire_rx_cdr_pll0_locked),
	.locktorefclk(rx_pma_locktorefout[0]),
	.pfdfbclkout(),
	.pfdrefclkout(wire_rx_cdr_pll0_pfdrefclkout),
	.powerdown(cent_unit_rxcrupowerdn[0]),
	.vcobypassout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.earlyeios(1'b0),
	.extra10gin({6{1'b0}}),
	.pfdfbclk(1'b0),
	.rateswitch(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		rx_cdr_pll0.bandwidth_type = "Auto",
		rx_cdr_pll0.channel_num = (starting_channel_number % 4),
		rx_cdr_pll0.dprio_config_mode = 6'h00,
		rx_cdr_pll0.effective_data_rate = "6250 Mbps",
		rx_cdr_pll0.enable_dynamic_divider = "false",
		rx_cdr_pll0.fast_lock_control = "false",
		rx_cdr_pll0.inclk0_input_period = 6400,
		rx_cdr_pll0.input_clock_frequency = "156.25 MHz",
		rx_cdr_pll0.m = 20,
		rx_cdr_pll0.n = 1,
		rx_cdr_pll0.pfd_clk_select = 0,
		rx_cdr_pll0.pll_type = "RX CDR",
		rx_cdr_pll0.use_refclk_pin = "false",
		rx_cdr_pll0.vco_post_scale = 1,
		rx_cdr_pll0.lpm_type = "stratixiv_hssi_pll";
	stratixiv_hssi_pll   rx_cdr_pll1
	( 
	.areset(rx_rxcruresetout[1]),
	.clk(wire_rx_cdr_pll1_clk),
	.datain(rx_pma_dataout[1]),
	.dataout(wire_rx_cdr_pll1_dataout),
	.dpriodisable(w_cent_unit_dpriodisableout1w[1]),
	.dprioin(rxpll_dprioin[599:300]),
	.dprioout(wire_rx_cdr_pll1_dprioout),
	.freqlocked(wire_rx_cdr_pll1_freqlocked),
	.inclk({rx_cruclk_in[19:10]}),
	.locked(wire_rx_cdr_pll1_locked),
	.locktorefclk(rx_pma_locktorefout[1]),
	.pfdfbclkout(),
	.pfdrefclkout(wire_rx_cdr_pll1_pfdrefclkout),
	.powerdown(cent_unit_rxcrupowerdn[1]),
	.vcobypassout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.earlyeios(1'b0),
	.extra10gin({6{1'b0}}),
	.pfdfbclk(1'b0),
	.rateswitch(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		rx_cdr_pll1.bandwidth_type = "Auto",
		rx_cdr_pll1.channel_num = (starting_channel_number % 4),
		rx_cdr_pll1.dprio_config_mode = 6'h00,
		rx_cdr_pll1.effective_data_rate = "6250 Mbps",
		rx_cdr_pll1.enable_dynamic_divider = "false",
		rx_cdr_pll1.fast_lock_control = "false",
		rx_cdr_pll1.inclk0_input_period = 6400,
		rx_cdr_pll1.input_clock_frequency = "156.25 MHz",
		rx_cdr_pll1.m = 20,
		rx_cdr_pll1.n = 1,
		rx_cdr_pll1.pfd_clk_select = 0,
		rx_cdr_pll1.pll_type = "RX CDR",
		rx_cdr_pll1.use_refclk_pin = "false",
		rx_cdr_pll1.vco_post_scale = 1,
		rx_cdr_pll1.lpm_type = "stratixiv_hssi_pll";
	stratixiv_hssi_pll   rx_cdr_pll2
	( 
	.areset(rx_rxcruresetout[2]),
	.clk(wire_rx_cdr_pll2_clk),
	.datain(rx_pma_dataout[2]),
	.dataout(wire_rx_cdr_pll2_dataout),
	.dpriodisable(w_cent_unit_dpriodisableout1w[2]),
	.dprioin(rxpll_dprioin[899:600]),
	.dprioout(wire_rx_cdr_pll2_dprioout),
	.freqlocked(wire_rx_cdr_pll2_freqlocked),
	.inclk({rx_cruclk_in[29:20]}),
	.locked(wire_rx_cdr_pll2_locked),
	.locktorefclk(rx_pma_locktorefout[2]),
	.pfdfbclkout(),
	.pfdrefclkout(wire_rx_cdr_pll2_pfdrefclkout),
	.powerdown(cent_unit_rxcrupowerdn[2]),
	.vcobypassout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.earlyeios(1'b0),
	.extra10gin({6{1'b0}}),
	.pfdfbclk(1'b0),
	.rateswitch(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		rx_cdr_pll2.bandwidth_type = "Auto",
		rx_cdr_pll2.channel_num = (starting_channel_number % 4),
		rx_cdr_pll2.dprio_config_mode = 6'h00,
		rx_cdr_pll2.effective_data_rate = "6250 Mbps",
		rx_cdr_pll2.enable_dynamic_divider = "false",
		rx_cdr_pll2.fast_lock_control = "false",
		rx_cdr_pll2.inclk0_input_period = 6400,
		rx_cdr_pll2.input_clock_frequency = "156.25 MHz",
		rx_cdr_pll2.m = 20,
		rx_cdr_pll2.n = 1,
		rx_cdr_pll2.pfd_clk_select = 0,
		rx_cdr_pll2.pll_type = "RX CDR",
		rx_cdr_pll2.use_refclk_pin = "false",
		rx_cdr_pll2.vco_post_scale = 1,
		rx_cdr_pll2.lpm_type = "stratixiv_hssi_pll";
	stratixiv_hssi_pll   rx_cdr_pll3
	( 
	.areset(rx_rxcruresetout[3]),
	.clk(wire_rx_cdr_pll3_clk),
	.datain(rx_pma_dataout[3]),
	.dataout(wire_rx_cdr_pll3_dataout),
	.dpriodisable(w_cent_unit_dpriodisableout1w[3]),
	.dprioin(rxpll_dprioin[1199:900]),
	.dprioout(wire_rx_cdr_pll3_dprioout),
	.freqlocked(wire_rx_cdr_pll3_freqlocked),
	.inclk({rx_cruclk_in[39:30]}),
	.locked(wire_rx_cdr_pll3_locked),
	.locktorefclk(rx_pma_locktorefout[3]),
	.pfdfbclkout(),
	.pfdrefclkout(wire_rx_cdr_pll3_pfdrefclkout),
	.powerdown(cent_unit_rxcrupowerdn[3]),
	.vcobypassout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.earlyeios(1'b0),
	.extra10gin({6{1'b0}}),
	.pfdfbclk(1'b0),
	.rateswitch(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		rx_cdr_pll3.bandwidth_type = "Auto",
		rx_cdr_pll3.channel_num = (starting_channel_number % 4),
		rx_cdr_pll3.dprio_config_mode = 6'h00,
		rx_cdr_pll3.effective_data_rate = "6250 Mbps",
		rx_cdr_pll3.enable_dynamic_divider = "false",
		rx_cdr_pll3.fast_lock_control = "false",
		rx_cdr_pll3.inclk0_input_period = 6400,
		rx_cdr_pll3.input_clock_frequency = "156.25 MHz",
		rx_cdr_pll3.m = 20,
		rx_cdr_pll3.n = 1,
		rx_cdr_pll3.pfd_clk_select = 0,
		rx_cdr_pll3.pll_type = "RX CDR",
		rx_cdr_pll3.use_refclk_pin = "false",
		rx_cdr_pll3.vco_post_scale = 1,
		rx_cdr_pll3.lpm_type = "stratixiv_hssi_pll";
	stratixiv_hssi_pll   tx_pll_edge0
	( 
	.areset(edge_pllreset_in[0]),
	.clk(wire_tx_pll_edge0_clk),
	.dataout(),
	.dpriodisable(edge_cmu_dpriodisableout[0]),
	.dprioin(edge_pll_dprioin[299:0]),
	.dprioout(wire_tx_pll_edge0_dprioout),
	.freqlocked(),
	.inclk({edge_pll_clkin[9:0]}),
	.locked(wire_tx_pll_edge0_locked),
	.pfdfbclkout(),
	.pfdrefclkout(),
	.powerdown(edge_pllpowerdn_in[0]),
	.vcobypassout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.datain(1'b0),
	.earlyeios(1'b0),
	.extra10gin({6{1'b0}}),
	.locktorefclk(1'b1),
	.pfdfbclk(1'b0),
	.rateswitch(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		tx_pll_edge0.bandwidth_type = "Auto",
		tx_pll_edge0.channel_num = 4,
		tx_pll_edge0.dprio_config_mode = 6'h00,
		tx_pll_edge0.inclk0_input_period = 6400,
		tx_pll_edge0.input_clock_frequency = "156.25 MHz",
		tx_pll_edge0.logical_channel_address = (starting_channel_number + 16),
		tx_pll_edge0.m = 20,
		tx_pll_edge0.n = 1,
		tx_pll_edge0.pfd_clk_select = 0,
		tx_pll_edge0.pll_type = "CMU",
		tx_pll_edge0.use_refclk_pin = "false",
		tx_pll_edge0.vco_post_scale = 1,
		tx_pll_edge0.lpm_type = "stratixiv_hssi_pll";
	stratixiv_hssi_rx_pma   receive_pma0
	( 
	.adaptdone(),
	.analogtestbus(wire_receive_pma0_analogtestbus),
	.clockout(wire_receive_pma0_clockout),
	.datain(rx_datain[0]),
	.dataout(wire_receive_pma0_dataout),
	.dataoutfull(),
	.deserclock(rx_deserclock_in[3:0]),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(rx_pmadprioin_wire[299:0]),
	.dprioout(wire_receive_pma0_dprioout),
	.freqlock(1'b0),
	.ignorephslck(1'b0),
	.locktodata(rx_locktodata_wire[0]),
	.locktoref((reconfig_togxb_busy | rx_locktorefclk[0])),
	.locktorefout(wire_receive_pma0_locktorefout),
	.offsetcancellationen(1'b0),
	.plllocked(rx_plllocked_wire[0]),
	.powerdn(cent_unit_rxibpowerdn[0]),
	.ppmdetectclkrel(),
	.ppmdetectrefclk(rx_pll_pfdrefclkout_wire[0]),
	.recoverdatain(pll_ch_dataout_wire[1:0]),
	.recoverdataout(wire_receive_pma0_recoverdataout),
	.reverselpbkout(),
	.revserialfdbkout(),
	.rxpmareset(rx_analogreset_out[0]),
	.seriallpbken(rx_seriallpbken[0]),
	.seriallpbkin(tx_serialloopbackout[0]),
	.signaldetect(wire_receive_pma0_signaldetect),
	.testbussel(4'b0110)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.adaptcapture(1'b0),
	.adcepowerdn(1'b0),
	.adcereset(1'b0),
	.adcestandby(1'b0),
	.extra10gin({38{1'b0}}),
	.ppmdetectdividedclk(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		receive_pma0.adaptive_equalization_mode = "none",
		receive_pma0.allow_serial_loopback = "true",
		receive_pma0.channel_number = (starting_channel_number % 4),
		receive_pma0.channel_type = "auto",
		receive_pma0.common_mode = "0.82V",
		receive_pma0.deserialization_factor = 20,
		receive_pma0.dprio_config_mode = 6'h01,
		receive_pma0.enable_ltd = "true",
		receive_pma0.enable_ltr = "true",
		receive_pma0.eq_dc_gain = 0,
		receive_pma0.eqa_ctrl = 0,
		receive_pma0.eqb_ctrl = 0,
		receive_pma0.eqc_ctrl = 0,
		receive_pma0.eqd_ctrl = 0,
		receive_pma0.eqv_ctrl = 0,
		receive_pma0.eyemon_bandwidth = 0,
		receive_pma0.force_signal_detect = "true",
		receive_pma0.logical_channel_address = (starting_channel_number + 0),
		receive_pma0.low_speed_test_select = 0,
		receive_pma0.offset_cancellation = 1,
		receive_pma0.ppmselect = 32,
		receive_pma0.protocol_hint = "basic",
		receive_pma0.send_direct_reverse_serial_loopback = "None",
		receive_pma0.signal_detect_hysteresis = 2,
		receive_pma0.signal_detect_hysteresis_valid_threshold = 1,
		receive_pma0.signal_detect_loss_threshold = 1,
		receive_pma0.termination = "OCT 100 Ohms",
		receive_pma0.use_deser_double_data_width = "true",
		receive_pma0.use_external_termination = "false",
		receive_pma0.use_pma_direct = "true",
		receive_pma0.lpm_type = "stratixiv_hssi_rx_pma";
	stratixiv_hssi_rx_pma   receive_pma1
	( 
	.adaptdone(),
	.analogtestbus(wire_receive_pma1_analogtestbus),
	.clockout(wire_receive_pma1_clockout),
	.datain(rx_datain[1]),
	.dataout(wire_receive_pma1_dataout),
	.dataoutfull(),
	.deserclock(rx_deserclock_in[7:4]),
	.dpriodisable(w_cent_unit_dpriodisableout1w[1]),
	.dprioin(rx_pmadprioin_wire[599:300]),
	.dprioout(wire_receive_pma1_dprioout),
	.freqlock(1'b0),
	.ignorephslck(1'b0),
	.locktodata(rx_locktodata_wire[1]),
	.locktoref((reconfig_togxb_busy | rx_locktorefclk[1])),
	.locktorefout(wire_receive_pma1_locktorefout),
	.offsetcancellationen(1'b0),
	.plllocked(rx_plllocked_wire[1]),
	.powerdn(cent_unit_rxibpowerdn[1]),
	.ppmdetectclkrel(),
	.ppmdetectrefclk(rx_pll_pfdrefclkout_wire[1]),
	.recoverdatain(pll_ch_dataout_wire[3:2]),
	.recoverdataout(wire_receive_pma1_recoverdataout),
	.reverselpbkout(),
	.revserialfdbkout(),
	.rxpmareset(rx_analogreset_out[1]),
	.seriallpbken(rx_seriallpbken[1]),
	.seriallpbkin(tx_serialloopbackout[1]),
	.signaldetect(wire_receive_pma1_signaldetect),
	.testbussel(4'b0110)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.adaptcapture(1'b0),
	.adcepowerdn(1'b0),
	.adcereset(1'b0),
	.adcestandby(1'b0),
	.extra10gin({38{1'b0}}),
	.ppmdetectdividedclk(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		receive_pma1.adaptive_equalization_mode = "none",
		receive_pma1.allow_serial_loopback = "true",
		receive_pma1.channel_number = (starting_channel_number % 4),
		receive_pma1.channel_type = "auto",
		receive_pma1.common_mode = "0.82V",
		receive_pma1.deserialization_factor = 20,
		receive_pma1.dprio_config_mode = 6'h01,
		receive_pma1.enable_ltd = "true",
		receive_pma1.enable_ltr = "true",
		receive_pma1.eq_dc_gain = 0,
		receive_pma1.eqa_ctrl = 0,
		receive_pma1.eqb_ctrl = 0,
		receive_pma1.eqc_ctrl = 0,
		receive_pma1.eqd_ctrl = 0,
		receive_pma1.eqv_ctrl = 0,
		receive_pma1.eyemon_bandwidth = 0,
		receive_pma1.force_signal_detect = "true",
		receive_pma1.logical_channel_address = (starting_channel_number + 4),
		receive_pma1.low_speed_test_select = 0,
		receive_pma1.offset_cancellation = 1,
		receive_pma1.ppmselect = 32,
		receive_pma1.protocol_hint = "basic",
		receive_pma1.send_direct_reverse_serial_loopback = "None",
		receive_pma1.signal_detect_hysteresis = 2,
		receive_pma1.signal_detect_hysteresis_valid_threshold = 1,
		receive_pma1.signal_detect_loss_threshold = 1,
		receive_pma1.termination = "OCT 100 Ohms",
		receive_pma1.use_deser_double_data_width = "true",
		receive_pma1.use_external_termination = "false",
		receive_pma1.use_pma_direct = "true",
		receive_pma1.lpm_type = "stratixiv_hssi_rx_pma";
	stratixiv_hssi_rx_pma   receive_pma2
	( 
	.adaptdone(),
	.analogtestbus(wire_receive_pma2_analogtestbus),
	.clockout(wire_receive_pma2_clockout),
	.datain(rx_datain[2]),
	.dataout(wire_receive_pma2_dataout),
	.dataoutfull(),
	.deserclock(rx_deserclock_in[11:8]),
	.dpriodisable(w_cent_unit_dpriodisableout1w[2]),
	.dprioin(rx_pmadprioin_wire[899:600]),
	.dprioout(wire_receive_pma2_dprioout),
	.freqlock(1'b0),
	.ignorephslck(1'b0),
	.locktodata(rx_locktodata_wire[2]),
	.locktoref((reconfig_togxb_busy | rx_locktorefclk[2])),
	.locktorefout(wire_receive_pma2_locktorefout),
	.offsetcancellationen(1'b0),
	.plllocked(rx_plllocked_wire[2]),
	.powerdn(cent_unit_rxibpowerdn[2]),
	.ppmdetectclkrel(),
	.ppmdetectrefclk(rx_pll_pfdrefclkout_wire[2]),
	.recoverdatain(pll_ch_dataout_wire[5:4]),
	.recoverdataout(wire_receive_pma2_recoverdataout),
	.reverselpbkout(),
	.revserialfdbkout(),
	.rxpmareset(rx_analogreset_out[2]),
	.seriallpbken(rx_seriallpbken[2]),
	.seriallpbkin(tx_serialloopbackout[2]),
	.signaldetect(wire_receive_pma2_signaldetect),
	.testbussel(4'b0110)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.adaptcapture(1'b0),
	.adcepowerdn(1'b0),
	.adcereset(1'b0),
	.adcestandby(1'b0),
	.extra10gin({38{1'b0}}),
	.ppmdetectdividedclk(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		receive_pma2.adaptive_equalization_mode = "none",
		receive_pma2.allow_serial_loopback = "true",
		receive_pma2.channel_number = (starting_channel_number % 4),
		receive_pma2.channel_type = "auto",
		receive_pma2.common_mode = "0.82V",
		receive_pma2.deserialization_factor = 20,
		receive_pma2.dprio_config_mode = 6'h01,
		receive_pma2.enable_ltd = "true",
		receive_pma2.enable_ltr = "true",
		receive_pma2.eq_dc_gain = 0,
		receive_pma2.eqa_ctrl = 0,
		receive_pma2.eqb_ctrl = 0,
		receive_pma2.eqc_ctrl = 0,
		receive_pma2.eqd_ctrl = 0,
		receive_pma2.eqv_ctrl = 0,
		receive_pma2.eyemon_bandwidth = 0,
		receive_pma2.force_signal_detect = "true",
		receive_pma2.logical_channel_address = (starting_channel_number + 8),
		receive_pma2.low_speed_test_select = 0,
		receive_pma2.offset_cancellation = 1,
		receive_pma2.ppmselect = 32,
		receive_pma2.protocol_hint = "basic",
		receive_pma2.send_direct_reverse_serial_loopback = "None",
		receive_pma2.signal_detect_hysteresis = 2,
		receive_pma2.signal_detect_hysteresis_valid_threshold = 1,
		receive_pma2.signal_detect_loss_threshold = 1,
		receive_pma2.termination = "OCT 100 Ohms",
		receive_pma2.use_deser_double_data_width = "true",
		receive_pma2.use_external_termination = "false",
		receive_pma2.use_pma_direct = "true",
		receive_pma2.lpm_type = "stratixiv_hssi_rx_pma";
	stratixiv_hssi_rx_pma   receive_pma3
	( 
	.adaptdone(),
	.analogtestbus(wire_receive_pma3_analogtestbus),
	.clockout(wire_receive_pma3_clockout),
	.datain(rx_datain[3]),
	.dataout(wire_receive_pma3_dataout),
	.dataoutfull(),
	.deserclock(rx_deserclock_in[15:12]),
	.dpriodisable(w_cent_unit_dpriodisableout1w[3]),
	.dprioin(rx_pmadprioin_wire[1199:900]),
	.dprioout(wire_receive_pma3_dprioout),
	.freqlock(1'b0),
	.ignorephslck(1'b0),
	.locktodata(rx_locktodata_wire[3]),
	.locktoref((reconfig_togxb_busy | rx_locktorefclk[3])),
	.locktorefout(wire_receive_pma3_locktorefout),
	.offsetcancellationen(1'b0),
	.plllocked(rx_plllocked_wire[3]),
	.powerdn(cent_unit_rxibpowerdn[3]),
	.ppmdetectclkrel(),
	.ppmdetectrefclk(rx_pll_pfdrefclkout_wire[3]),
	.recoverdatain(pll_ch_dataout_wire[7:6]),
	.recoverdataout(wire_receive_pma3_recoverdataout),
	.reverselpbkout(),
	.revserialfdbkout(),
	.rxpmareset(rx_analogreset_out[3]),
	.seriallpbken(rx_seriallpbken[3]),
	.seriallpbkin(tx_serialloopbackout[3]),
	.signaldetect(wire_receive_pma3_signaldetect),
	.testbussel(4'b0110)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.adaptcapture(1'b0),
	.adcepowerdn(1'b0),
	.adcereset(1'b0),
	.adcestandby(1'b0),
	.extra10gin({38{1'b0}}),
	.ppmdetectdividedclk(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		receive_pma3.adaptive_equalization_mode = "none",
		receive_pma3.allow_serial_loopback = "true",
		receive_pma3.channel_number = (starting_channel_number % 4),
		receive_pma3.channel_type = "auto",
		receive_pma3.common_mode = "0.82V",
		receive_pma3.deserialization_factor = 20,
		receive_pma3.dprio_config_mode = 6'h01,
		receive_pma3.enable_ltd = "true",
		receive_pma3.enable_ltr = "true",
		receive_pma3.eq_dc_gain = 0,
		receive_pma3.eqa_ctrl = 0,
		receive_pma3.eqb_ctrl = 0,
		receive_pma3.eqc_ctrl = 0,
		receive_pma3.eqd_ctrl = 0,
		receive_pma3.eqv_ctrl = 0,
		receive_pma3.eyemon_bandwidth = 0,
		receive_pma3.force_signal_detect = "true",
		receive_pma3.logical_channel_address = (starting_channel_number + 12),
		receive_pma3.low_speed_test_select = 0,
		receive_pma3.offset_cancellation = 1,
		receive_pma3.ppmselect = 32,
		receive_pma3.protocol_hint = "basic",
		receive_pma3.send_direct_reverse_serial_loopback = "None",
		receive_pma3.signal_detect_hysteresis = 2,
		receive_pma3.signal_detect_hysteresis_valid_threshold = 1,
		receive_pma3.signal_detect_loss_threshold = 1,
		receive_pma3.termination = "OCT 100 Ohms",
		receive_pma3.use_deser_double_data_width = "true",
		receive_pma3.use_external_termination = "false",
		receive_pma3.use_pma_direct = "true",
		receive_pma3.lpm_type = "stratixiv_hssi_rx_pma";
	stratixiv_hssi_tx_pma   transmit_pma0
	( 
	.clockout(wire_transmit_pma0_clockout),
	.datain({{44{1'b0}}, tx_datain_wire[19:0]}),
	.dataout(wire_transmit_pma0_dataout),
	.detectrxpowerdown(cent_unit_txdetectrxpowerdn[0]),
	.dftout(),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(tx_pmadprioin_wire[299:0]),
	.dprioout(wire_transmit_pma0_dprioout),
	.fastrefclk0in({2{1'b0}}),
	.fastrefclk1in({2{1'b0}}),
	.fastrefclk2in(edge_pll_analogfastrefclkout[1:0]),
	.fastrefclk4in({2{1'b0}}),
	.forceelecidle(1'b0),
	.pclk({{2{1'b0}}, refclk_pma_wire, {2{1'b0}}}),
	.powerdn(cent_unit_txobpowerdn[0]),
	.refclk0in({2{1'b0}}),
	.refclk0inpulse(1'b0),
	.refclk1in({2{1'b0}}),
	.refclk1inpulse(1'b0),
	.refclk2in(edge_pll_analogrefclkout[1:0]),
	.refclk2inpulse(edge_pll_analogrefclkpulse[0]),
	.refclk4in({2{1'b0}}),
	.refclk4inpulse(1'b0),
	.revserialfdbk(1'b0),
	.rxdetectvalidout(),
	.rxfoundout(),
	.seriallpbkout(wire_transmit_pma0_seriallpbkout),
	.txpmareset(tx_analogreset_out[0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.datainfull({20{1'b0}}),
	.extra10gin({11{1'b0}}),
	.fastrefclk3in({2{1'b0}}),
	.refclk3in({2{1'b0}}),
	.refclk3inpulse(1'b0),
	.rxdetectclk(1'b0),
	.rxdetecten(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		transmit_pma0.analog_power = "auto",
		transmit_pma0.channel_number = (starting_channel_number % 4),
		transmit_pma0.channel_type = "auto",
		transmit_pma0.clkin_select = 2,
		transmit_pma0.clkmux_delay = "false",
		transmit_pma0.common_mode = "0.65V",
		transmit_pma0.dprio_config_mode = 6'h01,
		transmit_pma0.enable_reverse_serial_loopback = "false",
		transmit_pma0.logical_channel_address = (starting_channel_number + 0),
		transmit_pma0.logical_protocol_hint_0 = "basic",
		transmit_pma0.low_speed_test_select = 0,
		transmit_pma0.physical_clkin2_mapping = "xn_top",
		transmit_pma0.preemp_pretap = 0,
		transmit_pma0.preemp_pretap_inv = "false",
		transmit_pma0.preemp_tap_1 = 0,
		transmit_pma0.preemp_tap_2 = 0,
		transmit_pma0.preemp_tap_2_inv = "false",
		transmit_pma0.protocol_hint = "basic",
		transmit_pma0.rx_detect = 0,
		transmit_pma0.serialization_factor = 20,
		transmit_pma0.slew_rate = "off",
		transmit_pma0.termination = "OCT 100 Ohms",
		transmit_pma0.use_external_termination = "false",
		transmit_pma0.use_pclk = "true",
		transmit_pma0.use_pma_direct = "true",
		transmit_pma0.use_ser_double_data_mode = "true",
		transmit_pma0.vod_selection = 3,
		transmit_pma0.lpm_type = "stratixiv_hssi_tx_pma";
	stratixiv_hssi_tx_pma   transmit_pma1
	( 
	.clockout(wire_transmit_pma1_clockout),
	.datain({{44{1'b0}}, tx_datain_wire[39:20]}),
	.dataout(wire_transmit_pma1_dataout),
	.detectrxpowerdown(cent_unit_txdetectrxpowerdn[1]),
	.dftout(),
	.dpriodisable(w_cent_unit_dpriodisableout1w[1]),
	.dprioin(tx_pmadprioin_wire[599:300]),
	.dprioout(wire_transmit_pma1_dprioout),
	.fastrefclk0in({2{1'b0}}),
	.fastrefclk1in({2{1'b0}}),
	.fastrefclk2in(edge_pll_analogfastrefclkout[1:0]),
	.fastrefclk4in({2{1'b0}}),
	.forceelecidle(1'b0),
	.pclk({{2{1'b0}}, refclk_pma_wire, {2{1'b0}}}),
	.powerdn(cent_unit_txobpowerdn[1]),
	.refclk0in({2{1'b0}}),
	.refclk0inpulse(1'b0),
	.refclk1in({2{1'b0}}),
	.refclk1inpulse(1'b0),
	.refclk2in(edge_pll_analogrefclkout[1:0]),
	.refclk2inpulse(edge_pll_analogrefclkpulse[0]),
	.refclk4in({2{1'b0}}),
	.refclk4inpulse(1'b0),
	.revserialfdbk(1'b0),
	.rxdetectvalidout(),
	.rxfoundout(),
	.seriallpbkout(wire_transmit_pma1_seriallpbkout),
	.txpmareset(tx_analogreset_out[1])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.datainfull({20{1'b0}}),
	.extra10gin({11{1'b0}}),
	.fastrefclk3in({2{1'b0}}),
	.refclk3in({2{1'b0}}),
	.refclk3inpulse(1'b0),
	.rxdetectclk(1'b0),
	.rxdetecten(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		transmit_pma1.analog_power = "auto",
		transmit_pma1.channel_number = (starting_channel_number % 4),
		transmit_pma1.channel_type = "auto",
		transmit_pma1.clkin_select = 2,
		transmit_pma1.clkmux_delay = "false",
		transmit_pma1.common_mode = "0.65V",
		transmit_pma1.dprio_config_mode = 6'h01,
		transmit_pma1.enable_reverse_serial_loopback = "false",
		transmit_pma1.logical_channel_address = (starting_channel_number + 4),
		transmit_pma1.logical_protocol_hint_0 = "basic",
		transmit_pma1.low_speed_test_select = 0,
		transmit_pma1.physical_clkin2_mapping = "xn_top",
		transmit_pma1.preemp_pretap = 0,
		transmit_pma1.preemp_pretap_inv = "false",
		transmit_pma1.preemp_tap_1 = 0,
		transmit_pma1.preemp_tap_2 = 0,
		transmit_pma1.preemp_tap_2_inv = "false",
		transmit_pma1.protocol_hint = "basic",
		transmit_pma1.rx_detect = 0,
		transmit_pma1.serialization_factor = 20,
		transmit_pma1.slew_rate = "off",
		transmit_pma1.termination = "OCT 100 Ohms",
		transmit_pma1.use_external_termination = "false",
		transmit_pma1.use_pclk = "true",
		transmit_pma1.use_pma_direct = "true",
		transmit_pma1.use_ser_double_data_mode = "true",
		transmit_pma1.vod_selection = 3,
		transmit_pma1.lpm_type = "stratixiv_hssi_tx_pma";
	stratixiv_hssi_tx_pma   transmit_pma2
	( 
	.clockout(wire_transmit_pma2_clockout),
	.datain({{44{1'b0}}, tx_datain_wire[59:40]}),
	.dataout(wire_transmit_pma2_dataout),
	.detectrxpowerdown(cent_unit_txdetectrxpowerdn[2]),
	.dftout(),
	.dpriodisable(w_cent_unit_dpriodisableout1w[2]),
	.dprioin(tx_pmadprioin_wire[899:600]),
	.dprioout(wire_transmit_pma2_dprioout),
	.fastrefclk0in({2{1'b0}}),
	.fastrefclk1in({2{1'b0}}),
	.fastrefclk2in(edge_pll_analogfastrefclkout[1:0]),
	.fastrefclk4in({2{1'b0}}),
	.forceelecidle(1'b0),
	.pclk({{2{1'b0}}, refclk_pma_wire, {2{1'b0}}}),
	.powerdn(cent_unit_txobpowerdn[2]),
	.refclk0in({2{1'b0}}),
	.refclk0inpulse(1'b0),
	.refclk1in({2{1'b0}}),
	.refclk1inpulse(1'b0),
	.refclk2in(edge_pll_analogrefclkout[1:0]),
	.refclk2inpulse(edge_pll_analogrefclkpulse[0]),
	.refclk4in({2{1'b0}}),
	.refclk4inpulse(1'b0),
	.revserialfdbk(1'b0),
	.rxdetectvalidout(),
	.rxfoundout(),
	.seriallpbkout(wire_transmit_pma2_seriallpbkout),
	.txpmareset(tx_analogreset_out[2])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.datainfull({20{1'b0}}),
	.extra10gin({11{1'b0}}),
	.fastrefclk3in({2{1'b0}}),
	.refclk3in({2{1'b0}}),
	.refclk3inpulse(1'b0),
	.rxdetectclk(1'b0),
	.rxdetecten(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		transmit_pma2.analog_power = "auto",
		transmit_pma2.channel_number = (starting_channel_number % 4),
		transmit_pma2.channel_type = "auto",
		transmit_pma2.clkin_select = 2,
		transmit_pma2.clkmux_delay = "false",
		transmit_pma2.common_mode = "0.65V",
		transmit_pma2.dprio_config_mode = 6'h01,
		transmit_pma2.enable_reverse_serial_loopback = "false",
		transmit_pma2.logical_channel_address = (starting_channel_number + 8),
		transmit_pma2.logical_protocol_hint_0 = "basic",
		transmit_pma2.low_speed_test_select = 0,
		transmit_pma2.physical_clkin2_mapping = "xn_top",
		transmit_pma2.preemp_pretap = 0,
		transmit_pma2.preemp_pretap_inv = "false",
		transmit_pma2.preemp_tap_1 = 0,
		transmit_pma2.preemp_tap_2 = 0,
		transmit_pma2.preemp_tap_2_inv = "false",
		transmit_pma2.protocol_hint = "basic",
		transmit_pma2.rx_detect = 0,
		transmit_pma2.serialization_factor = 20,
		transmit_pma2.slew_rate = "off",
		transmit_pma2.termination = "OCT 100 Ohms",
		transmit_pma2.use_external_termination = "false",
		transmit_pma2.use_pclk = "true",
		transmit_pma2.use_pma_direct = "true",
		transmit_pma2.use_ser_double_data_mode = "true",
		transmit_pma2.vod_selection = 3,
		transmit_pma2.lpm_type = "stratixiv_hssi_tx_pma";
	stratixiv_hssi_tx_pma   transmit_pma3
	( 
	.clockout(wire_transmit_pma3_clockout),
	.datain({{44{1'b0}}, tx_datain_wire[79:60]}),
	.dataout(wire_transmit_pma3_dataout),
	.detectrxpowerdown(cent_unit_txdetectrxpowerdn[3]),
	.dftout(),
	.dpriodisable(w_cent_unit_dpriodisableout1w[3]),
	.dprioin(tx_pmadprioin_wire[1199:900]),
	.dprioout(wire_transmit_pma3_dprioout),
	.fastrefclk0in({2{1'b0}}),
	.fastrefclk1in({2{1'b0}}),
	.fastrefclk2in(edge_pll_analogfastrefclkout[1:0]),
	.fastrefclk4in({2{1'b0}}),
	.forceelecidle(1'b0),
	.pclk({{2{1'b0}}, refclk_pma_wire, {2{1'b0}}}),
	.powerdn(cent_unit_txobpowerdn[3]),
	.refclk0in({2{1'b0}}),
	.refclk0inpulse(1'b0),
	.refclk1in({2{1'b0}}),
	.refclk1inpulse(1'b0),
	.refclk2in(edge_pll_analogrefclkout[1:0]),
	.refclk2inpulse(edge_pll_analogrefclkpulse[0]),
	.refclk4in({2{1'b0}}),
	.refclk4inpulse(1'b0),
	.revserialfdbk(1'b0),
	.rxdetectvalidout(),
	.rxfoundout(),
	.seriallpbkout(wire_transmit_pma3_seriallpbkout),
	.txpmareset(tx_analogreset_out[3])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.datainfull({20{1'b0}}),
	.extra10gin({11{1'b0}}),
	.fastrefclk3in({2{1'b0}}),
	.refclk3in({2{1'b0}}),
	.refclk3inpulse(1'b0),
	.rxdetectclk(1'b0),
	.rxdetecten(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		transmit_pma3.analog_power = "auto",
		transmit_pma3.channel_number = (starting_channel_number % 4),
		transmit_pma3.channel_type = "auto",
		transmit_pma3.clkin_select = 2,
		transmit_pma3.clkmux_delay = "false",
		transmit_pma3.common_mode = "0.65V",
		transmit_pma3.dprio_config_mode = 6'h01,
		transmit_pma3.enable_reverse_serial_loopback = "false",
		transmit_pma3.logical_channel_address = (starting_channel_number + 12),
		transmit_pma3.logical_protocol_hint_0 = "basic",
		transmit_pma3.low_speed_test_select = 0,
		transmit_pma3.physical_clkin2_mapping = "xn_top",
		transmit_pma3.preemp_pretap = 0,
		transmit_pma3.preemp_pretap_inv = "false",
		transmit_pma3.preemp_tap_1 = 0,
		transmit_pma3.preemp_tap_2 = 0,
		transmit_pma3.preemp_tap_2_inv = "false",
		transmit_pma3.protocol_hint = "basic",
		transmit_pma3.rx_detect = 0,
		transmit_pma3.serialization_factor = 20,
		transmit_pma3.slew_rate = "off",
		transmit_pma3.termination = "OCT 100 Ohms",
		transmit_pma3.use_external_termination = "false",
		transmit_pma3.use_pclk = "true",
		transmit_pma3.use_pma_direct = "true",
		transmit_pma3.use_ser_double_data_mode = "true",
		transmit_pma3.vod_selection = 3,
		transmit_pma3.lpm_type = "stratixiv_hssi_tx_pma";
	assign
		cent_unit_cmuplldprioout = {wire_cent_unit3_cmuplldprioout, wire_cent_unit2_cmuplldprioout, wire_cent_unit1_cmuplldprioout, wire_cent_unit0_cmuplldprioout},
		cent_unit_rxcrupowerdn = {{20{1'b0}}, wire_cent_unit3_rxcrupowerdown[0], wire_cent_unit2_rxcrupowerdown[0], wire_cent_unit1_rxcrupowerdown[0], wire_cent_unit0_rxcrupowerdown[0]},
		cent_unit_rxibpowerdn = {{20{1'b0}}, wire_cent_unit3_rxibpowerdown[0], wire_cent_unit2_rxibpowerdown[0], wire_cent_unit1_rxibpowerdown[0], wire_cent_unit0_rxibpowerdown[0]},
		cent_unit_rxpmadprioin = {rx_pmadprioout[1199:0]},
		cent_unit_rxpmadprioout = {wire_cent_unit3_rxpmadprioout[299:0], wire_cent_unit2_rxpmadprioout[299:0], wire_cent_unit1_rxpmadprioout[299:0], wire_cent_unit0_rxpmadprioout[299:0]},
		cent_unit_txdetectrxpowerdn = {{20{1'b0}}, wire_cent_unit3_txdetectrxpowerdown[0], wire_cent_unit2_txdetectrxpowerdown[0], wire_cent_unit1_txdetectrxpowerdown[0], wire_cent_unit0_txdetectrxpowerdown[0]},
		cent_unit_txobpowerdn = {{20{1'b0}}, wire_cent_unit3_txobpowerdown[0], wire_cent_unit2_txobpowerdown[0], wire_cent_unit1_txobpowerdown[0], wire_cent_unit0_txobpowerdown[0]},
		cent_unit_txpmadprioin = {tx_pmadprioout[1199:0]},
		cent_unit_txpmadprioout = {wire_cent_unit3_txpmadprioout[299:0], wire_cent_unit2_txpmadprioout[299:0], wire_cent_unit1_txpmadprioout[299:0], wire_cent_unit0_txpmadprioout[299:0]},
		clock_divider_clk0in = {edge_pll_out[3:0]},
		edge_clk_div_cmudividerdprioin = {{100{1'b0}}, wire_central_clk_div0_dprioout, {400{1'b0}}},
		edge_cmu_clkdivpowerdn = {wire_tx_pll_cent_unit0_clkdivpowerdn[0]},
		edge_cmu_cmudividerdprioout = {wire_tx_pll_cent_unit0_cmudividerdprioout[499:400]},
		edge_cmu_cmuplldprioout = {wire_tx_pll_cent_unit0_cmuplldprioout[1499:1200]},
		edge_cmu_dpriodisableout = {wire_tx_pll_cent_unit0_dpriodisableout},
		edge_cmu_pllpowerdn = {wire_tx_pll_cent_unit0_pllpowerdn[0]},
		edge_cmu_pllresetout = {wire_tx_pll_cent_unit0_pllresetout[0]},
		edge_cmu_quadresetout = {wire_tx_pll_cent_unit0_quadresetout},
		edge_pll_analogfastrefclkout = {wire_central_clk_div0_analogfastrefclkout},
		edge_pll_analogrefclkout = {wire_central_clk_div0_analogrefclkout},
		edge_pll_analogrefclkpulse = {wire_central_clk_div0_analogrefclkpulse},
		edge_pll_clkin = {{9{1'b0}}, pll_inclk_wire[0]},
		edge_pll_cmuplldprioout = {edge_pll_dprioout[299:0]},
		edge_pll_dprioin = {edge_cmu_cmuplldprioout[299:0]},
		edge_pll_dprioout = {wire_tx_pll_edge0_dprioout},
		edge_pll_out = {wire_tx_pll_edge0_clk[3:0]},
		edge_pllpowerdn_in = {edge_cmu_pllpowerdn[0]},
		edge_pllreset_in = {edge_cmu_pllresetout[0]},
		fixedclk_to_cmu = {{20{1'b0}}, {4{reconfig_clk}}},
		nonusertocmu_out = {wire_cal_blk3_nonusertocmu, wire_cal_blk2_nonusertocmu, wire_cal_blk1_nonusertocmu, wire_cal_blk0_nonusertocmu},
		nonusertocmu_out_pll = {wire_pll_cal_blk0_nonusertocmu},
		pll_ch_dataout_wire = {wire_rx_cdr_pll3_dataout, wire_rx_cdr_pll2_dataout, wire_rx_cdr_pll1_dataout, wire_rx_cdr_pll0_dataout},
		pll_ch_dprioout = {wire_rx_cdr_pll3_dprioout, wire_rx_cdr_pll2_dprioout, wire_rx_cdr_pll1_dprioout, wire_rx_cdr_pll0_dprioout},
		pll_cmuplldprioout = {{600{1'b0}}, {900{1'b0}}, pll_ch_dprioout[1199:900], {600{1'b0}}, {900{1'b0}}, pll_ch_dprioout[899:600], {600{1'b0}}, {900{1'b0}}, pll_ch_dprioout[599:300], {600{1'b0}}, {900{1'b0}}, pll_ch_dprioout[299:0]},
		pll_edge_locked_out = {wire_tx_pll_edge0_locked},
		pll_inclk_wire = {pll_inclk},
		pll_locked = {pll_edge_locked_out[0]},
		reconfig_fromgxb = {rx_pma_analogtestbus[67:52], wire_cent_unit3_dprioout, rx_pma_analogtestbus[50:35], wire_cent_unit2_dprioout, rx_pma_analogtestbus[33:18], wire_cent_unit1_dprioout, rx_pma_analogtestbus[16:1], wire_cent_unit0_dprioout},
		reconfig_togxb_busy = reconfig_togxb[3],
		reconfig_togxb_disable = reconfig_togxb[1],
		reconfig_togxb_in = reconfig_togxb[0],
		reconfig_togxb_load = reconfig_togxb[2],
		refclk_pma_wire = {wire_central_clk_div0_refclkout},
		rx_analogreset_in = {{20{1'b0}}, ((~ reconfig_togxb_busy) & rx_analogreset[3]), ((~ reconfig_togxb_busy) & rx_analogreset[2]), ((~ reconfig_togxb_busy) & rx_analogreset[1]), ((~ reconfig_togxb_busy) & rx_analogreset[0])},
		rx_analogreset_out = {{20{1'b0}}, wire_cent_unit3_rxanalogresetout[0], wire_cent_unit2_rxanalogresetout[0], wire_cent_unit1_rxanalogresetout[0], wire_cent_unit0_rxanalogresetout[0]},
		rx_clkout = {rx_pma_clockout[3:0]},
		rx_cruclk_in = {{9{1'b0}}, rx_pldcruclk_in[3], {9{1'b0}}, rx_pldcruclk_in[2], {9{1'b0}}, rx_pldcruclk_in[1], {9{1'b0}}, rx_pldcruclk_in[0]},
		rx_dataout = {rx_pma_recoverdataout_wire[79:0]},
		rx_deserclock_in = {rx_pll_clkout[15:0]},
		rx_freqlocked = {(rx_freqlocked_wire[3] & (~ rx_analogreset[3])), (rx_freqlocked_wire[2] & (~ rx_analogreset[2])), (rx_freqlocked_wire[1] & (~ rx_analogreset[1])), (rx_freqlocked_wire[0] & (~ rx_analogreset[0]))},
		rx_freqlocked_wire = {wire_rx_cdr_pll3_freqlocked, wire_rx_cdr_pll2_freqlocked, wire_rx_cdr_pll1_freqlocked, wire_rx_cdr_pll0_freqlocked},
		rx_locktodata_wire = {((~ reconfig_togxb_busy) & rx_locktodata[3]), ((~ reconfig_togxb_busy) & rx_locktodata[2]), ((~ reconfig_togxb_busy) & rx_locktodata[1]), ((~ reconfig_togxb_busy) & rx_locktodata[0])},
		rx_pldcruclk_in = {4{pll_inclk}},
		rx_pll_clkout = {wire_rx_cdr_pll3_clk, wire_rx_cdr_pll2_clk, wire_rx_cdr_pll1_clk, wire_rx_cdr_pll0_clk},
		rx_pll_locked = {(rx_plllocked_wire[3] & (~ rx_analogreset[3])), (rx_plllocked_wire[2] & (~ rx_analogreset[2])), (rx_plllocked_wire[1] & (~ rx_analogreset[1])), (rx_plllocked_wire[0] & (~ rx_analogreset[0]))},
		rx_pll_pfdrefclkout_wire = {wire_rx_cdr_pll3_pfdrefclkout, wire_rx_cdr_pll2_pfdrefclkout, wire_rx_cdr_pll1_pfdrefclkout, wire_rx_cdr_pll0_pfdrefclkout},
		rx_plllocked_wire = {wire_rx_cdr_pll3_locked, wire_rx_cdr_pll2_locked, wire_rx_cdr_pll1_locked, wire_rx_cdr_pll0_locked},
		rx_pma_analogtestbus = {{12{1'b0}}, wire_receive_pma3_analogtestbus[5:2], 1'b0, {12{1'b0}}, wire_receive_pma2_analogtestbus[5:2], 1'b0, {12{1'b0}}, wire_receive_pma1_analogtestbus[5:2], 1'b0, {12{1'b0}}, wire_receive_pma0_analogtestbus[5:2], 1'b0},
		rx_pma_clockout = {wire_receive_pma3_clockout, wire_receive_pma2_clockout, wire_receive_pma1_clockout, wire_receive_pma0_clockout},
		rx_pma_dataout = {wire_receive_pma3_dataout, wire_receive_pma2_dataout, wire_receive_pma1_dataout, wire_receive_pma0_dataout},
		rx_pma_locktorefout = {wire_receive_pma3_locktorefout, wire_receive_pma2_locktorefout, wire_receive_pma1_locktorefout, wire_receive_pma0_locktorefout},
		rx_pma_recoverdataout_wire = {wire_receive_pma3_recoverdataout[19:0], wire_receive_pma2_recoverdataout[19:0], wire_receive_pma1_recoverdataout[19:0], wire_receive_pma0_recoverdataout[19:0]},
		rx_pmadprioin_wire = {cent_unit_rxpmadprioout[1199:0]},
		rx_pmadprioout = {wire_receive_pma3_dprioout, wire_receive_pma2_dprioout, wire_receive_pma1_dprioout, wire_receive_pma0_dprioout},
		rx_powerdown = {4{1'b0}},
		rx_powerdown_in = {{20{1'b0}}, rx_powerdown[3:0]},
		rx_rxcruresetout = {{20{1'b0}}, wire_cent_unit3_rxcruresetout[0], wire_cent_unit2_rxcruresetout[0], wire_cent_unit1_rxcruresetout[0], wire_cent_unit0_rxcruresetout[0]},
		rxpll_dprioin = {cent_unit_cmuplldprioout[5699:5400], cent_unit_cmuplldprioout[3899:3600], cent_unit_cmuplldprioout[2099:1800], cent_unit_cmuplldprioout[299:0]},
		tx_analogreset_out = {{20{1'b0}}, wire_cent_unit3_txanalogresetout[0], wire_cent_unit2_txanalogresetout[0], wire_cent_unit1_txanalogresetout[0], wire_cent_unit0_txanalogresetout[0]},
		tx_clkout = {tx_localrefclk[3:0]},
		tx_datain_wire = {tx_datain[79:0]},
		tx_dataout = {wire_transmit_pma3_dataout, wire_transmit_pma2_dataout, wire_transmit_pma1_dataout, wire_transmit_pma0_dataout},
		tx_localrefclk = {wire_transmit_pma3_clockout, wire_transmit_pma2_clockout, wire_transmit_pma1_clockout, wire_transmit_pma0_clockout},
		tx_pmadprioin_wire = {cent_unit_txpmadprioout[1199:0]},
		tx_pmadprioout = {wire_transmit_pma3_dprioout, wire_transmit_pma2_dprioout, wire_transmit_pma1_dprioout, wire_transmit_pma0_dprioout},
		tx_serialloopbackout = {wire_transmit_pma3_seriallpbkout, wire_transmit_pma2_seriallpbkout, wire_transmit_pma1_seriallpbkout, wire_transmit_pma0_seriallpbkout},
		w_cent_unit_dpriodisableout1w = {wire_cent_unit3_dpriodisableout, wire_cent_unit2_dpriodisableout, wire_cent_unit1_dpriodisableout, wire_cent_unit0_dpriodisableout};
endmodule //altgx4dxaui_alt4gxb
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module altgx4dxaui (
	cal_blk_clk,
	cal_blk_powerdown,
	gxb_powerdown,
	pll_inclk,
	pll_powerdown,
	reconfig_clk,
	reconfig_togxb,
	rx_analogreset,
	rx_datain,
	rx_locktodata,
	rx_locktorefclk,
	rx_seriallpbken,
	tx_datain,
	pll_locked,
	reconfig_fromgxb,
	rx_clkout,
	rx_dataout,
	rx_freqlocked,
	rx_pll_locked,
	tx_clkout,
	tx_dataout);

	input	  cal_blk_clk;
	input	  cal_blk_powerdown;
	input	[0:0]  gxb_powerdown;
	input	  pll_inclk;
	input	[0:0]  pll_powerdown;
	input	  reconfig_clk;
	input	[3:0]  reconfig_togxb;
	input	[3:0]  rx_analogreset;
	input	[3:0]  rx_datain;
	input	[3:0]  rx_locktodata;
	input	[3:0]  rx_locktorefclk;
	input	[3:0]  rx_seriallpbken;
	input	[79:0]  tx_datain;
	output	[0:0]  pll_locked;
	output	[67:0]  reconfig_fromgxb;
	output	[3:0]  rx_clkout;
	output	[79:0]  rx_dataout;
	output	[3:0]  rx_freqlocked;
	output	[3:0]  rx_pll_locked;
	output	[3:0]  tx_clkout;
	output	[3:0]  tx_dataout;

	parameter		starting_channel_number = 0;


	wire [0:0] sub_wire0;
	wire [67:0] sub_wire1;
	wire [3:0] sub_wire2;
	wire [3:0] sub_wire3;
	wire [3:0] sub_wire4;
	wire [79:0] sub_wire5;
	wire [3:0] sub_wire6;
	wire [3:0] sub_wire7;
	wire [0:0] pll_locked = sub_wire0[0:0];
	wire [67:0] reconfig_fromgxb = sub_wire1[67:0];
	wire [3:0] rx_freqlocked = sub_wire2[3:0];
	wire [3:0] rx_pll_locked = sub_wire3[3:0];
	wire [3:0] rx_clkout = sub_wire4[3:0];
	wire [79:0] rx_dataout = sub_wire5[79:0];
	wire [3:0] tx_clkout = sub_wire6[3:0];
	wire [3:0] tx_dataout = sub_wire7[3:0];

	altgx4dxaui_alt4gxb	altgx4dxaui_alt4gxb_component (
				.pll_inclk (pll_inclk),
				.reconfig_togxb (reconfig_togxb),
				.cal_blk_clk (cal_blk_clk),
				.reconfig_clk (reconfig_clk),
				.rx_analogreset (rx_analogreset),
				.rx_datain (rx_datain),
				.rx_locktodata (rx_locktodata),
				.cal_blk_powerdown (cal_blk_powerdown),
				.pll_powerdown (pll_powerdown),
				.rx_locktorefclk (rx_locktorefclk),
				.tx_datain (tx_datain),
				.gxb_powerdown (gxb_powerdown),
				.rx_seriallpbken (rx_seriallpbken),
				.pll_locked (sub_wire0),
				.reconfig_fromgxb (sub_wire1),
				.rx_freqlocked (sub_wire2),
				.rx_pll_locked (sub_wire3),
				.rx_clkout (sub_wire4),
				.rx_dataout (sub_wire5),
				.tx_clkout (sub_wire6),
				.tx_dataout (sub_wire7));
	defparam
		altgx4dxaui_alt4gxb_component.starting_channel_number = starting_channel_number;


endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Stratix IV"
// Retrieval info: PRIVATE: NUM_KEYS NUMERIC "0"
// Retrieval info: PRIVATE: RECONFIG_PROTOCOL STRING "BASIC"
// Retrieval info: PRIVATE: RECONFIG_SUBPROTOCOL STRING "none"
// Retrieval info: PRIVATE: RX_ENABLE_DC_COUPLING STRING "false"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "0"
// Retrieval info: PRIVATE: WIZ_BASE_DATA_RATE STRING "6250.0"
// Retrieval info: PRIVATE: WIZ_BASE_DATA_RATE_ENABLE STRING "0"
// Retrieval info: PRIVATE: WIZ_DATA_RATE STRING "6250"
// Retrieval info: PRIVATE: WIZ_DPRIO_INCLK_FREQ_ARRAY STRING "100"
// Retrieval info: PRIVATE: WIZ_DPRIO_INPUT_A STRING "2000"
// Retrieval info: PRIVATE: WIZ_DPRIO_INPUT_A_UNIT STRING "Mbps"
// Retrieval info: PRIVATE: WIZ_DPRIO_INPUT_B STRING "100"
// Retrieval info: PRIVATE: WIZ_DPRIO_INPUT_B_UNIT STRING "MHz"
// Retrieval info: PRIVATE: WIZ_DPRIO_INPUT_SELECTION NUMERIC "0"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK0_FREQ STRING "125.0"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK0_PROTOCOL STRING "Basic (PMA Direct)"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK1_FREQ STRING "250"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK1_PROTOCOL STRING "Basic"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK2_FREQ STRING "250"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK2_PROTOCOL STRING "Basic"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK3_FREQ STRING "250"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK3_PROTOCOL STRING "Basic"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK4_FREQ STRING "250"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK4_PROTOCOL STRING "Basic"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK5_FREQ STRING "250"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK5_PROTOCOL STRING "Basic"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK6_FREQ STRING "250"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK6_PROTOCOL STRING "Basic"
// Retrieval info: PRIVATE: WIZ_ENABLE_EQUALIZER_CTRL NUMERIC "0"
// Retrieval info: PRIVATE: WIZ_EQUALIZER_CTRL_SETTING NUMERIC "0"
// Retrieval info: PRIVATE: WIZ_FORCE_DEFAULT_SETTINGS NUMERIC "0"
// Retrieval info: PRIVATE: WIZ_INCLK_FREQ STRING "156.25"
// Retrieval info: PRIVATE: WIZ_INCLK_FREQ_ARRAY STRING "125.0 156.25 195.3125 250.0 312.5 390.625 500.0 625.0"
// Retrieval info: PRIVATE: WIZ_INPUT_A STRING "6250"
// Retrieval info: PRIVATE: WIZ_INPUT_A_UNIT STRING "Mbps"
// Retrieval info: PRIVATE: WIZ_INPUT_B STRING "156.25"
// Retrieval info: PRIVATE: WIZ_INPUT_B_UNIT STRING "MHz"
// Retrieval info: PRIVATE: WIZ_INPUT_SELECTION NUMERIC "0"
// Retrieval info: PRIVATE: WIZ_PROTOCOL STRING "Basic (PMA Direct)"
// Retrieval info: PRIVATE: WIZ_SUBPROTOCOL STRING "XN"
// Retrieval info: PRIVATE: WIZ_WORD_ALIGN_FLIP_PATTERN STRING "0"
// Retrieval info: PARAMETER: STARTING_CHANNEL_NUMBER NUMERIC "0"
// Retrieval info: CONSTANT: EFFECTIVE_DATA_RATE STRING "6250 Mbps"
// Retrieval info: CONSTANT: ENABLE_LC_TX_PLL STRING "false"
// Retrieval info: CONSTANT: ENABLE_PLL_INCLK_ALT_DRIVE_RX_CRU STRING "true"
// Retrieval info: CONSTANT: ENABLE_PLL_INCLK_DRIVE_RX_CRU STRING "true"
// Retrieval info: CONSTANT: EQUALIZER_CTRL_A_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: EQUALIZER_CTRL_B_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: EQUALIZER_CTRL_C_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: EQUALIZER_CTRL_D_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: EQUALIZER_CTRL_V_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: EQUALIZER_DCGAIN_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: GEN_RECONFIG_PLL STRING "false"
// Retrieval info: CONSTANT: GXB_ANALOG_POWER STRING "AUTO"
// Retrieval info: CONSTANT: GX_CHANNEL_TYPE STRING "AUTO"
// Retrieval info: CONSTANT: INPUT_CLOCK_FREQUENCY STRING "156.25 MHz"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Stratix IV"
// Retrieval info: CONSTANT: INTENDED_DEVICE_SPEED_GRADE STRING "4"
// Retrieval info: CONSTANT: INTENDED_DEVICE_VARIANT STRING "GX"
// Retrieval info: CONSTANT: LOOPBACK_MODE STRING "slb"
// Retrieval info: CONSTANT: LPM_TYPE STRING "alt4gxb"
// Retrieval info: CONSTANT: NUMBER_OF_CHANNELS NUMERIC "4"
// Retrieval info: CONSTANT: OPERATION_MODE STRING "duplex"
// Retrieval info: CONSTANT: PLL_CONTROL_WIDTH NUMERIC "1"
// Retrieval info: CONSTANT: PLL_PFD_FB_MODE STRING "internal"
// Retrieval info: CONSTANT: PREEMPHASIS_CTRL_1STPOSTTAP_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: PREEMPHASIS_CTRL_2NDPOSTTAP_INV_SETTING STRING "false"
// Retrieval info: CONSTANT: PREEMPHASIS_CTRL_2NDPOSTTAP_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: PREEMPHASIS_CTRL_PRETAP_INV_SETTING STRING "false"
// Retrieval info: CONSTANT: PREEMPHASIS_CTRL_PRETAP_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: PROTOCOL STRING "basic"
// Retrieval info: CONSTANT: RECEIVER_TERMINATION STRING "oct_100_ohms"
// Retrieval info: CONSTANT: RECONFIG_DPRIO_MODE NUMERIC "0"
// Retrieval info: CONSTANT: RX_8B_10B_MODE STRING "none"
// Retrieval info: CONSTANT: RX_ALLOW_ALIGN_POLARITY_INVERSION STRING "false"
// Retrieval info: CONSTANT: RX_BYTE_ORDERING_MODE STRING "NONE"
// Retrieval info: CONSTANT: RX_CHANNEL_WIDTH NUMERIC "20"
// Retrieval info: CONSTANT: RX_COMMON_MODE STRING "0.82v"
// Retrieval info: CONSTANT: RX_CRU_BANDWIDTH_TYPE STRING "Auto"
// Retrieval info: CONSTANT: RX_CRU_INCLOCK0_PERIOD NUMERIC "6400"
// Retrieval info: CONSTANT: RX_DATA_RATE NUMERIC "6250"
// Retrieval info: CONSTANT: RX_DATA_RATE_REMAINDER NUMERIC "0"
// Retrieval info: CONSTANT: RX_DIGITALRESET_PORT_WIDTH NUMERIC "4"
// Retrieval info: CONSTANT: RX_ENABLE_BIT_REVERSAL STRING "false"
// Retrieval info: CONSTANT: RX_ENABLE_LOCK_TO_DATA_SIG STRING "true"
// Retrieval info: CONSTANT: RX_ENABLE_LOCK_TO_REFCLK_SIG STRING "true"
// Retrieval info: CONSTANT: RX_ENABLE_SELF_TEST_MODE STRING "false"
// Retrieval info: CONSTANT: RX_FORCE_SIGNAL_DETECT STRING "true"
// Retrieval info: CONSTANT: RX_PPMSELECT NUMERIC "32"
// Retrieval info: CONSTANT: RX_RATE_MATCH_FIFO_MODE STRING "none"
// Retrieval info: CONSTANT: RX_RUN_LENGTH NUMERIC "40"
// Retrieval info: CONSTANT: RX_RUN_LENGTH_ENABLE STRING "true"
// Retrieval info: CONSTANT: RX_SIGNAL_DETECT_THRESHOLD NUMERIC "2"
// Retrieval info: CONSTANT: RX_USE_CLKOUT STRING "true"
// Retrieval info: CONSTANT: RX_USE_CORECLK STRING "false"
// Retrieval info: CONSTANT: RX_USE_DESERIALIZER_DOUBLE_DATA_MODE STRING "true"
// Retrieval info: CONSTANT: RX_USE_DOUBLE_DATA_MODE STRING "false"
// Retrieval info: CONSTANT: TRANSMITTER_TERMINATION STRING "oct_100_ohms"
// Retrieval info: CONSTANT: TX_8B_10B_MODE STRING "none"
// Retrieval info: CONSTANT: TX_ALLOW_POLARITY_INVERSION STRING "false"
// Retrieval info: CONSTANT: TX_ANALOG_POWER STRING "AUTO"
// Retrieval info: CONSTANT: TX_CHANNEL_WIDTH NUMERIC "20"
// Retrieval info: CONSTANT: TX_CLKOUT_WIDTH NUMERIC "4"
// Retrieval info: CONSTANT: TX_COMMON_MODE STRING "0.65v"
// Retrieval info: CONSTANT: TX_DATA_RATE NUMERIC "6250"
// Retrieval info: CONSTANT: TX_DATA_RATE_REMAINDER NUMERIC "0"
// Retrieval info: CONSTANT: TX_ENABLE_BIT_REVERSAL STRING "false"
// Retrieval info: CONSTANT: TX_ENABLE_SELF_TEST_MODE STRING "false"
// Retrieval info: CONSTANT: TX_PLL_BANDWIDTH_TYPE STRING "Auto"
// Retrieval info: CONSTANT: TX_PLL_INCLK0_PERIOD NUMERIC "6400"
// Retrieval info: CONSTANT: TX_PLL_TYPE STRING "CMU"
// Retrieval info: CONSTANT: TX_SLEW_RATE STRING "off"
// Retrieval info: CONSTANT: TX_USE_CORECLK STRING "false"
// Retrieval info: CONSTANT: TX_USE_DOUBLE_DATA_MODE STRING "false"
// Retrieval info: CONSTANT: TX_USE_SERIALIZER_DOUBLE_DATA_MODE STRING "true"
// Retrieval info: CONSTANT: USE_CALIBRATION_BLOCK STRING "true"
// Retrieval info: CONSTANT: VOD_CTRL_SETTING NUMERIC "3"
// Retrieval info: CONSTANT: enable_pma_direct STRING "true"
// Retrieval info: CONSTANT: enable_pma_xn_bonding STRING "true"
// Retrieval info: CONSTANT: gxb_powerdown_width NUMERIC "1"
// Retrieval info: CONSTANT: number_of_quads NUMERIC "4"
// Retrieval info: CONSTANT: reconfig_calibration STRING "true"
// Retrieval info: CONSTANT: reconfig_fromgxb_port_width NUMERIC "68"
// Retrieval info: CONSTANT: reconfig_togxb_port_width NUMERIC "4"
// Retrieval info: CONSTANT: rx_cru_m_divider NUMERIC "20"
// Retrieval info: CONSTANT: rx_cru_n_divider NUMERIC "1"
// Retrieval info: CONSTANT: rx_cru_vco_post_scale_divider NUMERIC "1"
// Retrieval info: CONSTANT: rx_dwidth_factor NUMERIC "2"
// Retrieval info: CONSTANT: rx_signal_detect_loss_threshold STRING "1"
// Retrieval info: CONSTANT: rx_signal_detect_valid_threshold STRING "1"
// Retrieval info: CONSTANT: rx_use_external_termination STRING "false"
// Retrieval info: CONSTANT: rx_word_aligner_num_byte NUMERIC "2"
// Retrieval info: CONSTANT: tx_dwidth_factor NUMERIC "2"
// Retrieval info: CONSTANT: tx_pll_clock_post_divider NUMERIC "1"
// Retrieval info: CONSTANT: tx_pll_m_divider NUMERIC "20"
// Retrieval info: CONSTANT: tx_pll_n_divider NUMERIC "1"
// Retrieval info: CONSTANT: tx_pll_vco_post_scale_divider NUMERIC "1"
// Retrieval info: CONSTANT: tx_use_external_termination STRING "false"
// Retrieval info: USED_PORT: cal_blk_clk 0 0 0 0 INPUT NODEFVAL "cal_blk_clk"
// Retrieval info: USED_PORT: cal_blk_powerdown 0 0 0 0 INPUT NODEFVAL "cal_blk_powerdown"
// Retrieval info: USED_PORT: gxb_powerdown 0 0 1 0 INPUT NODEFVAL "gxb_powerdown[0..0]"
// Retrieval info: USED_PORT: pll_inclk 0 0 0 0 INPUT NODEFVAL "pll_inclk"
// Retrieval info: USED_PORT: pll_locked 0 0 1 0 OUTPUT NODEFVAL "pll_locked[0..0]"
// Retrieval info: USED_PORT: pll_powerdown 0 0 1 0 INPUT NODEFVAL "pll_powerdown[0..0]"
// Retrieval info: USED_PORT: reconfig_clk 0 0 0 0 INPUT NODEFVAL "reconfig_clk"
// Retrieval info: USED_PORT: reconfig_fromgxb 0 0 68 0 OUTPUT NODEFVAL "reconfig_fromgxb[67..0]"
// Retrieval info: USED_PORT: reconfig_togxb 0 0 4 0 INPUT NODEFVAL "reconfig_togxb[3..0]"
// Retrieval info: USED_PORT: rx_analogreset 0 0 4 0 INPUT NODEFVAL "rx_analogreset[3..0]"
// Retrieval info: USED_PORT: rx_clkout 0 0 4 0 OUTPUT NODEFVAL "rx_clkout[3..0]"
// Retrieval info: USED_PORT: rx_datain 0 0 4 0 INPUT NODEFVAL "rx_datain[3..0]"
// Retrieval info: USED_PORT: rx_dataout 0 0 80 0 OUTPUT NODEFVAL "rx_dataout[79..0]"
// Retrieval info: USED_PORT: rx_freqlocked 0 0 4 0 OUTPUT NODEFVAL "rx_freqlocked[3..0]"
// Retrieval info: USED_PORT: rx_locktodata 0 0 4 0 INPUT NODEFVAL "rx_locktodata[3..0]"
// Retrieval info: USED_PORT: rx_locktorefclk 0 0 4 0 INPUT NODEFVAL "rx_locktorefclk[3..0]"
// Retrieval info: USED_PORT: rx_pll_locked 0 0 4 0 OUTPUT NODEFVAL "rx_pll_locked[3..0]"
// Retrieval info: USED_PORT: rx_seriallpbken 0 0 4 0 INPUT NODEFVAL "rx_seriallpbken[3..0]"
// Retrieval info: USED_PORT: tx_clkout 0 0 4 0 OUTPUT NODEFVAL "tx_clkout[3..0]"
// Retrieval info: USED_PORT: tx_datain 0 0 80 0 INPUT NODEFVAL "tx_datain[79..0]"
// Retrieval info: USED_PORT: tx_dataout 0 0 4 0 OUTPUT NODEFVAL "tx_dataout[3..0]"
// Retrieval info: CONNECT: @cal_blk_clk 0 0 0 0 cal_blk_clk 0 0 0 0
// Retrieval info: CONNECT: @cal_blk_powerdown 0 0 0 0 cal_blk_powerdown 0 0 0 0
// Retrieval info: CONNECT: @gxb_powerdown 0 0 1 0 gxb_powerdown 0 0 1 0
// Retrieval info: CONNECT: @pll_inclk 0 0 0 0 pll_inclk 0 0 0 0
// Retrieval info: CONNECT: @pll_powerdown 0 0 1 0 pll_powerdown 0 0 1 0
// Retrieval info: CONNECT: @reconfig_clk 0 0 0 0 reconfig_clk 0 0 0 0
// Retrieval info: CONNECT: @reconfig_togxb 0 0 4 0 reconfig_togxb 0 0 4 0
// Retrieval info: CONNECT: @rx_analogreset 0 0 4 0 rx_analogreset 0 0 4 0
// Retrieval info: CONNECT: @rx_datain 0 0 4 0 rx_datain 0 0 4 0
// Retrieval info: CONNECT: @rx_locktodata 0 0 4 0 rx_locktodata 0 0 4 0
// Retrieval info: CONNECT: @rx_locktorefclk 0 0 4 0 rx_locktorefclk 0 0 4 0
// Retrieval info: CONNECT: @rx_seriallpbken 0 0 4 0 rx_seriallpbken 0 0 4 0
// Retrieval info: CONNECT: @tx_datain 0 0 80 0 tx_datain 0 0 80 0
// Retrieval info: CONNECT: pll_locked 0 0 1 0 @pll_locked 0 0 1 0
// Retrieval info: CONNECT: reconfig_fromgxb 0 0 68 0 @reconfig_fromgxb 0 0 68 0
// Retrieval info: CONNECT: rx_clkout 0 0 4 0 @rx_clkout 0 0 4 0
// Retrieval info: CONNECT: rx_dataout 0 0 80 0 @rx_dataout 0 0 80 0
// Retrieval info: CONNECT: rx_freqlocked 0 0 4 0 @rx_freqlocked 0 0 4 0
// Retrieval info: CONNECT: rx_pll_locked 0 0 4 0 @rx_pll_locked 0 0 4 0
// Retrieval info: CONNECT: tx_clkout 0 0 4 0 @tx_clkout 0 0 4 0
// Retrieval info: CONNECT: tx_dataout 0 0 4 0 @tx_dataout 0 0 4 0
// Retrieval info: GEN_FILE: TYPE_NORMAL altgx4dxaui.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altgx4dxaui.ppf TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altgx4dxaui.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altgx4dxaui.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altgx4dxaui.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altgx4dxaui_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altgx4dxaui_bb.v FALSE
// Retrieval info: LIB_FILE: stratixiv_hssi
// Retrieval info: CBX_MODULE_PREFIX: ON
