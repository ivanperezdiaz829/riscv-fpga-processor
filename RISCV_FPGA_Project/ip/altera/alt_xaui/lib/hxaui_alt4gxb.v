// (C) 2001-2013 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions and other 
// software and tools, and its AMPP partner logic functions, and any output 
// files any of the foregoing (including device programming or simulation 
// files), and any associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License Subscription 
// Agreement, Altera MegaCore Function License Agreement, or other applicable 
// license agreement, including, without limitation, that your use is for the 
// sole purpose of programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the applicable 
// agreement for further details.


// megafunction wizard: %ALTGX%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: alt4gxb 

// ============================================================
// File Name: hxaui_alt4gxb.v
// Megafunction Name(s):
// 			alt4gxb
//
// Simulation Library Files(s):
// 			stratixiv_hssi
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 9.1 Build 301 01/06/2010 SP 1 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2010 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//alt4gxb CBX_AUTO_BLACKBOX="ALL" coreclkout_control_width=1 device_family="Stratix IV" effective_data_rate="3125 Mbps" enable_lc_tx_pll="false" equalizer_ctrl_a_setting=0 equalizer_ctrl_b_setting=0 equalizer_ctrl_c_setting=0 equalizer_ctrl_d_setting=0 equalizer_ctrl_v_setting=0 equalizer_dcgain_setting=0 gen_reconfig_pll="false" gx_channel_type="auto" gxb_analog_power="AUTO" gxb_powerdown_width=1 input_clock_frequency="156.25 MHz" intended_device_speed_grade="2" intended_device_variant="GX" loopback_mode="slb" number_of_channels=4 number_of_quads=1 operation_mode="duplex" pll_control_width=1 pll_pfd_fb_mode="internal" preemphasis_ctrl_1stposttap_setting=0 preemphasis_ctrl_2ndposttap_inv_setting="false" preemphasis_ctrl_2ndposttap_setting=0 preemphasis_ctrl_pretap_inv_setting="false" preemphasis_ctrl_pretap_setting=0 protocol="xaui" receiver_termination="OCT_100_OHMS" reconfig_calibration="true" reconfig_dprio_mode=0 reconfig_fromgxb_port_width=17 reconfig_togxb_port_width=4 rx_8b_10b_mode="normal" rx_align_pattern="0101111100" rx_align_pattern_length=10 rx_allow_align_polarity_inversion="true" rx_allow_pipe_polarity_inversion="false" rx_bitslip_enable="false" rx_byte_ordering_mode="none" rx_channel_bonding="x4" rx_channel_width=16 rx_common_mode="0.82v" rx_cru_bandwidth_type="auto" rx_cru_inclock0_period=6400 rx_cru_m_divider=10 rx_cru_n_divider=1 rx_cru_vco_post_scale_divider=2 rx_data_rate=3125 rx_data_rate_remainder=0 rx_datapath_protocol="xaui" rx_digitalreset_port_width=1 rx_dwidth_factor=2 rx_enable_bit_reversal="false" rx_enable_lock_to_data_sig="true" rx_enable_lock_to_refclk_sig="true" rx_enable_self_test_mode="false" rx_force_signal_detect="true" rx_ppmselect=32 rx_rate_match_fifo_mode="normal" rx_rate_match_pattern1="1101000011" rx_rate_match_pattern2="0010111100" rx_rate_match_pattern_size=10 rx_run_length=40 rx_run_length_enable="true" rx_signal_detect_loss_threshold=1 rx_signal_detect_threshold=2 rx_signal_detect_valid_threshold=1 rx_use_align_state_machine="true" rx_use_clkout="false" rx_use_coreclk="false" rx_use_cruclk="true" rx_use_deserializer_double_data_mode="false" rx_use_deskew_fifo="true" rx_use_double_data_mode="true" rx_use_external_termination="false" rx_use_rate_match_pattern1_only="false" rx_word_aligner_num_byte=1 starting_channel_number=0 transmitter_termination="OCT_100_OHMS" tx_8b_10b_mode="normal" tx_allow_polarity_inversion="true" tx_analog_power="AUTO" tx_channel_bonding="x4" tx_channel_width=16 tx_clkout_width=4 tx_common_mode="0.65v" tx_data_rate=3125 tx_data_rate_remainder=0 tx_digitalreset_port_width=1 tx_dwidth_factor=2 tx_enable_bit_reversal="false" tx_enable_self_test_mode="false" tx_pll_bandwidth_type="auto" tx_pll_clock_post_divider=1 tx_pll_inclk0_period=6400 tx_pll_m_divider=10 tx_pll_n_divider=1 tx_pll_type="CMU" tx_pll_vco_post_scale_divider=2 tx_slew_rate="low" tx_transmit_protocol="xaui" tx_use_coreclk="true" tx_use_double_data_mode="true" tx_use_external_termination="false" tx_use_serializer_double_data_mode="false" use_calibration_block="true" vod_ctrl_setting=4 cal_blk_clk cal_blk_powerdown coreclkout gxb_powerdown pll_inclk pll_locked pll_powerdown reconfig_clk reconfig_fromgxb reconfig_togxb rx_analogreset rx_channelaligned rx_cruclk rx_ctrldetect rx_datain rx_dataout rx_digitalreset rx_disperr rx_errdetect rx_freqlocked rx_invpolarity rx_locktodata rx_locktorefclk rx_patterndetect rx_phase_comp_fifo_error rx_pll_locked rx_rlv rx_rmfifodatadeleted rx_rmfifodatainserted rx_rmfifoempty rx_rmfifofull rx_runningdisp rx_seriallpbken rx_syncstatus tx_coreclk tx_ctrlenable tx_datain tx_dataout tx_digitalreset tx_invpolarity tx_phase_comp_fifo_error
//VERSION_BEGIN 9.1SP1 cbx_alt4gxb 2010:01:06:21:12:59:SJ cbx_mgl 2010:01:06:21:19:19:SJ cbx_tgx 2010:01:06:21:12:59:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463


//synthesis_resources = reg 6 stratixiv_hssi_calibration_block 1 stratixiv_hssi_clock_divider 1 stratixiv_hssi_cmu 1 stratixiv_hssi_pll 5 stratixiv_hssi_rx_pcs 4 stratixiv_hssi_rx_pma 4 stratixiv_hssi_tx_pcs 4 stratixiv_hssi_tx_pma 4 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  hxaui_alt4gxb_alt4gxb_dksa
	( 
	cal_blk_clk,
	cal_blk_powerdown,
	coreclkout,
	gxb_powerdown,
	pll_inclk,
	pll_locked,
	pll_powerdown,
	reconfig_clk,
	reconfig_fromgxb,
	reconfig_togxb,
	rx_analogreset,
	rx_channelaligned,
	rx_coreclk,
	rx_cruclk,
	rx_ctrldetect,
	rx_datain,
	rx_dataout,
	rx_digitalreset,
	rx_disperr,
	rx_errdetect,
	rx_freqlocked,
	rx_invpolarity,
	rx_locktodata,
	rx_locktorefclk,
	rx_patterndetect,
	rx_phase_comp_fifo_error,
	rx_pll_locked,
	rx_rlv,
	rx_rmfifodatadeleted,
	rx_rmfifodatainserted,
	rx_rmfifoempty,
	rx_rmfifofull,
	rx_runningdisp,
	rx_seriallpbken,
	rx_syncstatus,
        rx_recovered_clk,
	tx_coreclk,
	tx_ctrlenable,
	tx_datain,
	tx_dataout,
	tx_digitalreset,
	tx_invpolarity,
	tx_phase_comp_fifo_error) ;
	input   cal_blk_clk;
	input   cal_blk_powerdown;
	output   [0:0]  coreclkout;
	input   [0:0]  gxb_powerdown;
	input   pll_inclk;
	output   [0:0]  pll_locked;
	input   [0:0]  pll_powerdown;
	input   reconfig_clk;
	output   [16:0]  reconfig_fromgxb;
	input   [3:0]  reconfig_togxb;
	input   [0:0]  rx_analogreset;
	output   [0:0]  rx_channelaligned;
	input   [3:0]  rx_coreclk;
	input   [3:0]  rx_cruclk;
	output   [7:0]  rx_ctrldetect;
	input   [3:0]  rx_datain;
	output   [63:0]  rx_dataout;
	input   [0:0]  rx_digitalreset;
	output   [7:0]  rx_disperr;
	output   [7:0]  rx_errdetect;
	output   [3:0]  rx_freqlocked;
	input   [3:0]  rx_invpolarity;
	input   [3:0]  rx_locktodata;
	input   [3:0]  rx_locktorefclk;
	output   [7:0]  rx_patterndetect;
	output   [3:0]  rx_phase_comp_fifo_error;
	output   [3:0]  rx_pll_locked;
	output   [3:0]  rx_rlv;
	output   [7:0]  rx_rmfifodatadeleted;
	output   [7:0]  rx_rmfifodatainserted;
	output   [3:0]  rx_rmfifoempty;
	output   [3:0]  rx_rmfifofull;
	output   [7:0]  rx_runningdisp;
	input   [3:0]  rx_seriallpbken;
	output   [7:0]  rx_syncstatus;
	input   [3:0]  tx_coreclk;
	input   [7:0]  tx_ctrlenable;
	input   [63:0]  tx_datain;
	output   [3:0]  tx_dataout;
	input   [0:0]  tx_digitalreset;
	input   [3:0]  tx_invpolarity;
	output   [3:0]  tx_phase_comp_fifo_error;
	output   [3:0]  rx_recovered_clk;
	
	wire wire_receive_pcs0_clkout;
	wire wire_receive_pcs1_clkout;
	wire wire_receive_pcs2_clkout;
	wire wire_receive_pcs3_clkout;
	assign rx_recovered_clk = {wire_receive_pcs0_clkout,wire_receive_pcs1_clkout,wire_receive_pcs2_clkout,wire_receive_pcs3_clkout};
	
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   cal_blk_clk;
	tri0   cal_blk_powerdown;
	tri0   [0:0]  gxb_powerdown;
	tri0   pll_inclk;
	tri0   [0:0]  pll_powerdown;
	tri0   reconfig_clk;
	tri0   [0:0]  rx_analogreset;
	tri0   [3:0]  rx_coreclk;
	tri0   [3:0]  rx_cruclk;
	tri0   [0:0]  rx_digitalreset;
	tri0   [3:0]  rx_invpolarity;
	tri0   [3:0]  rx_locktodata;
	tri0   [3:0]  rx_locktorefclk;
	tri0   [3:0]  rx_seriallpbken;
	tri0   [3:0]  tx_coreclk;
	tri0   [7:0]  tx_ctrlenable;
	tri0   [63:0]  tx_datain;
	tri0   [0:0]  tx_digitalreset;
	tri0   [3:0]  tx_invpolarity;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif


	parameter	starting_channel_number = 0;
        parameter       transmitter_termination = "OCT 100 OHMS";//OCT_85_OHMS,OCT_100_OHMS,OCT_120_OHMS,OCT_150_OHMS
        parameter       receiver_termination = "OCT 100 OHMS"; //OCT_85_OHMS,OCT_100_OHMS,OCT_120_OHMS,OCT_150_OHMS
        parameter       rx_common_mode = "0.82v";

        parameter       preemphasis_ctrl_pretap_setting = 0;//0-7
        parameter       preemphasis_ctrl_pretap_inv_setting = "FALSE";//TRUE or FALSE.
        parameter       preemphasis_ctrl_1stposttap_setting = 5;//0-15
        parameter       preemphasis_ctrl_2ndposttap_setting = 0;//0-7
        parameter       preemphasis_ctrl_2ndposttap_inv_setting = "FALSE";//TRUE or FALSE.
        parameter       vod_ctrl_setting = 1;//0-7

        parameter       equalizer_dcgain_setting = 0; //0-4
        parameter       equalizer_ctrl_a_setting = 0; 
        parameter       equalizer_ctrl_b_setting = 0; 
        parameter       equalizer_ctrl_c_setting = 0; 
        parameter       equalizer_ctrl_d_setting = 0; 
        parameter       equalizer_ctrl_v_setting = 0; 


 	wire	[2:0]	wire_rx_digitalreset_reg0c_d;
	reg	[2:0]	rx_digitalreset_reg0c;
	wire	[2:0]	wire_rx_digitalreset_reg0c_clk;
	wire	[2:0]	wire_tx_digitalreset_reg0c_d;
	reg	[2:0]	tx_digitalreset_reg0c;
	wire	[2:0]	wire_tx_digitalreset_reg0c_clk;
	wire  wire_cal_blk0_nonusertocmu;
	wire  [1:0]   wire_central_clk_div0_analogfastrefclkout;
	wire  [1:0]   wire_central_clk_div0_analogrefclkout;
	wire  wire_central_clk_div0_analogrefclkpulse;
	wire  wire_central_clk_div0_coreclkout;
	wire  [99:0]   wire_central_clk_div0_dprioout;
	wire  wire_central_clk_div0_rateswitchdone;
	wire  wire_central_clk_div0_refclkout;
	wire  wire_cent_unit0_alignstatus;
	wire  [1:0]   wire_cent_unit0_clkdivpowerdn;
	wire  [599:0]   wire_cent_unit0_cmudividerdprioout;
	wire  [1799:0]   wire_cent_unit0_cmuplldprioout;
	wire  wire_cent_unit0_dpriodisableout;
	wire  wire_cent_unit0_dprioout;
	wire  wire_cent_unit0_enabledeskew;
	wire  wire_cent_unit0_fiforesetrd;
	wire  [1:0]   wire_cent_unit0_pllpowerdn;
	wire  [1:0]   wire_cent_unit0_pllresetout;
	wire  wire_cent_unit0_quadresetout;
	wire  [5:0]   wire_cent_unit0_rxanalogresetout;
	wire  [5:0]   wire_cent_unit0_rxcrupowerdown;
	wire  [5:0]   wire_cent_unit0_rxcruresetout;
	wire  [3:0]   wire_cent_unit0_rxctrlout;
	wire  [31:0]   wire_cent_unit0_rxdataout;
	wire  [3:0]   wire_cent_unit0_rxdigitalresetout;
	wire  [5:0]   wire_cent_unit0_rxibpowerdown;
	wire  [1599:0]   wire_cent_unit0_rxpcsdprioout;
	wire  wire_cent_unit0_rxphfifox4byteselout;
	wire  wire_cent_unit0_rxphfifox4rdenableout;
	wire  wire_cent_unit0_rxphfifox4wrclkout;
	wire  wire_cent_unit0_rxphfifox4wrenableout;
	wire  [1799:0]   wire_cent_unit0_rxpmadprioout;
	wire  [5:0]   wire_cent_unit0_txanalogresetout;
	wire  [3:0]   wire_cent_unit0_txctrlout;
	wire  [31:0]   wire_cent_unit0_txdataout;
	wire  [5:0]   wire_cent_unit0_txdetectrxpowerdown;
	wire  [3:0]   wire_cent_unit0_txdigitalresetout;
	wire  [5:0]   wire_cent_unit0_txobpowerdown;
	wire  [599:0]   wire_cent_unit0_txpcsdprioout;
	wire  wire_cent_unit0_txphfifox4byteselout;
	wire  wire_cent_unit0_txphfifox4rdclkout;
	wire  wire_cent_unit0_txphfifox4rdenableout;
	wire  wire_cent_unit0_txphfifox4wrenableout;
	wire  [1799:0]   wire_cent_unit0_txpmadprioout;
	wire  [3:0]   wire_rx_cdr_pll0_clk;
	wire  [1:0]   wire_rx_cdr_pll0_dataout;
	wire  [299:0]   wire_rx_cdr_pll0_dprioout;
	wire  wire_rx_cdr_pll0_freqlocked;
	wire  wire_rx_cdr_pll0_locked;
	wire  wire_rx_cdr_pll0_pfdrefclkout;
	wire  [3:0]   wire_rx_cdr_pll1_clk;
	wire  [1:0]   wire_rx_cdr_pll1_dataout;
	wire  [299:0]   wire_rx_cdr_pll1_dprioout;
	wire  wire_rx_cdr_pll1_freqlocked;
	wire  wire_rx_cdr_pll1_locked;
	wire  wire_rx_cdr_pll1_pfdrefclkout;
	wire  [3:0]   wire_rx_cdr_pll2_clk;
	wire  [1:0]   wire_rx_cdr_pll2_dataout;
	wire  [299:0]   wire_rx_cdr_pll2_dprioout;
	wire  wire_rx_cdr_pll2_freqlocked;
	wire  wire_rx_cdr_pll2_locked;
	wire  wire_rx_cdr_pll2_pfdrefclkout;
	wire  [3:0]   wire_rx_cdr_pll3_clk;
	wire  [1:0]   wire_rx_cdr_pll3_dataout;
	wire  [299:0]   wire_rx_cdr_pll3_dprioout;
	wire  wire_rx_cdr_pll3_freqlocked;
	wire  wire_rx_cdr_pll3_locked;
	wire  wire_rx_cdr_pll3_pfdrefclkout;
	wire  [3:0]   wire_tx_pll0_clk;
	wire  [299:0]   wire_tx_pll0_dprioout;
	wire  wire_tx_pll0_locked;
	wire  wire_receive_pcs0_adetectdeskew;
	wire  wire_receive_pcs0_alignstatussyncout;
	wire  wire_receive_pcs0_cdrctrllocktorefclkout;
	wire  wire_receive_pcs0_coreclkout;
	wire  [3:0]   wire_receive_pcs0_ctrldetect;
	wire  [39:0]   wire_receive_pcs0_dataout;
	wire  wire_receive_pcs0_disablefifordout;
	wire  wire_receive_pcs0_disablefifowrout;
	wire  [3:0]   wire_receive_pcs0_disperr;
	wire  [399:0]   wire_receive_pcs0_dprioout;
	wire  [3:0]   wire_receive_pcs0_errdetect;
	wire  wire_receive_pcs0_fifordout;
	wire  [3:0]   wire_receive_pcs0_patterndetect;
	wire  wire_receive_pcs0_phfifobyteserdisableout;
	wire  wire_receive_pcs0_phfifooverflow;
	wire  wire_receive_pcs0_phfifoptrsresetout;
	wire  wire_receive_pcs0_phfifordenableout;
	wire  wire_receive_pcs0_phfiforesetout;
	wire  wire_receive_pcs0_phfifounderflow;
	wire  wire_receive_pcs0_phfifowrdisableout;
	wire  wire_receive_pcs0_rateswitchout;
	wire  wire_receive_pcs0_rdalign;
	wire  wire_receive_pcs0_rlv;
	wire  [3:0]   wire_receive_pcs0_rmfifodatadeleted;
	wire  [3:0]   wire_receive_pcs0_rmfifodatainserted;
	wire  wire_receive_pcs0_rmfifoempty;
	wire  wire_receive_pcs0_rmfifofull;
	wire  [3:0]   wire_receive_pcs0_runningdisp;
	wire  [3:0]   wire_receive_pcs0_syncstatus;
	wire  wire_receive_pcs0_syncstatusdeskew;
	wire  wire_receive_pcs0_xgmctrldet;
	wire  [7:0]   wire_receive_pcs0_xgmdataout;
	wire  wire_receive_pcs0_xgmdatavalid;
	wire  wire_receive_pcs0_xgmrunningdisp;
	wire  wire_receive_pcs1_adetectdeskew;
	wire  wire_receive_pcs1_alignstatussyncout;
	wire  wire_receive_pcs1_cdrctrllocktorefclkout;
	wire  wire_receive_pcs1_coreclkout;
	wire  [3:0]   wire_receive_pcs1_ctrldetect;
	wire  [39:0]   wire_receive_pcs1_dataout;
	wire  wire_receive_pcs1_disablefifordout;
	wire  wire_receive_pcs1_disablefifowrout;
	wire  [3:0]   wire_receive_pcs1_disperr;
	wire  [399:0]   wire_receive_pcs1_dprioout;
	wire  [3:0]   wire_receive_pcs1_errdetect;
	wire  wire_receive_pcs1_fifordout;
	wire  [3:0]   wire_receive_pcs1_patterndetect;
	wire  wire_receive_pcs1_phfifobyteserdisableout;
	wire  wire_receive_pcs1_phfifooverflow;
	wire  wire_receive_pcs1_phfifoptrsresetout;
	wire  wire_receive_pcs1_phfifordenableout;
	wire  wire_receive_pcs1_phfiforesetout;
	wire  wire_receive_pcs1_phfifounderflow;
	wire  wire_receive_pcs1_phfifowrdisableout;
	wire  wire_receive_pcs1_rateswitchout;
	wire  wire_receive_pcs1_rdalign;
	wire  wire_receive_pcs1_rlv;
	wire  [3:0]   wire_receive_pcs1_rmfifodatadeleted;
	wire  [3:0]   wire_receive_pcs1_rmfifodatainserted;
	wire  wire_receive_pcs1_rmfifoempty;
	wire  wire_receive_pcs1_rmfifofull;
	wire  [3:0]   wire_receive_pcs1_runningdisp;
	wire  [3:0]   wire_receive_pcs1_syncstatus;
	wire  wire_receive_pcs1_syncstatusdeskew;
	wire  wire_receive_pcs1_xgmctrldet;
	wire  [7:0]   wire_receive_pcs1_xgmdataout;
	wire  wire_receive_pcs1_xgmdatavalid;
	wire  wire_receive_pcs1_xgmrunningdisp;
	wire  wire_receive_pcs2_adetectdeskew;
	wire  wire_receive_pcs2_alignstatussyncout;
	wire  wire_receive_pcs2_cdrctrllocktorefclkout;
	wire  wire_receive_pcs2_coreclkout;
	wire  [3:0]   wire_receive_pcs2_ctrldetect;
	wire  [39:0]   wire_receive_pcs2_dataout;
	wire  wire_receive_pcs2_disablefifordout;
	wire  wire_receive_pcs2_disablefifowrout;
	wire  [3:0]   wire_receive_pcs2_disperr;
	wire  [399:0]   wire_receive_pcs2_dprioout;
	wire  [3:0]   wire_receive_pcs2_errdetect;
	wire  wire_receive_pcs2_fifordout;
	wire  [3:0]   wire_receive_pcs2_patterndetect;
	wire  wire_receive_pcs2_phfifobyteserdisableout;
	wire  wire_receive_pcs2_phfifooverflow;
	wire  wire_receive_pcs2_phfifoptrsresetout;
	wire  wire_receive_pcs2_phfifordenableout;
	wire  wire_receive_pcs2_phfiforesetout;
	wire  wire_receive_pcs2_phfifounderflow;
	wire  wire_receive_pcs2_phfifowrdisableout;
	wire  wire_receive_pcs2_rateswitchout;
	wire  wire_receive_pcs2_rdalign;
	wire  wire_receive_pcs2_rlv;
	wire  [3:0]   wire_receive_pcs2_rmfifodatadeleted;
	wire  [3:0]   wire_receive_pcs2_rmfifodatainserted;
	wire  wire_receive_pcs2_rmfifoempty;
	wire  wire_receive_pcs2_rmfifofull;
	wire  [3:0]   wire_receive_pcs2_runningdisp;
	wire  [3:0]   wire_receive_pcs2_syncstatus;
	wire  wire_receive_pcs2_syncstatusdeskew;
	wire  wire_receive_pcs2_xgmctrldet;
	wire  [7:0]   wire_receive_pcs2_xgmdataout;
	wire  wire_receive_pcs2_xgmdatavalid;
	wire  wire_receive_pcs2_xgmrunningdisp;
	wire  wire_receive_pcs3_adetectdeskew;
	wire  wire_receive_pcs3_alignstatussyncout;
	wire  wire_receive_pcs3_cdrctrllocktorefclkout;
	wire  wire_receive_pcs3_coreclkout;
	wire  [3:0]   wire_receive_pcs3_ctrldetect;
	wire  [39:0]   wire_receive_pcs3_dataout;
	wire  wire_receive_pcs3_disablefifordout;
	wire  wire_receive_pcs3_disablefifowrout;
	wire  [3:0]   wire_receive_pcs3_disperr;
	wire  [399:0]   wire_receive_pcs3_dprioout;
	wire  [3:0]   wire_receive_pcs3_errdetect;
	wire  wire_receive_pcs3_fifordout;
	wire  [3:0]   wire_receive_pcs3_patterndetect;
	wire  wire_receive_pcs3_phfifobyteserdisableout;
	wire  wire_receive_pcs3_phfifooverflow;
	wire  wire_receive_pcs3_phfifoptrsresetout;
	wire  wire_receive_pcs3_phfifordenableout;
	wire  wire_receive_pcs3_phfiforesetout;
	wire  wire_receive_pcs3_phfifounderflow;
	wire  wire_receive_pcs3_phfifowrdisableout;
	wire  wire_receive_pcs3_rateswitchout;
	wire  wire_receive_pcs3_rdalign;
	wire  wire_receive_pcs3_rlv;
	wire  [3:0]   wire_receive_pcs3_rmfifodatadeleted;
	wire  [3:0]   wire_receive_pcs3_rmfifodatainserted;
	wire  wire_receive_pcs3_rmfifoempty;
	wire  wire_receive_pcs3_rmfifofull;
	wire  [3:0]   wire_receive_pcs3_runningdisp;
	wire  [3:0]   wire_receive_pcs3_syncstatus;
	wire  wire_receive_pcs3_syncstatusdeskew;
	wire  wire_receive_pcs3_xgmctrldet;
	wire  [7:0]   wire_receive_pcs3_xgmdataout;
	wire  wire_receive_pcs3_xgmdatavalid;
	wire  wire_receive_pcs3_xgmrunningdisp;
	wire  [7:0]   wire_receive_pma0_analogtestbus;
	wire  wire_receive_pma0_clockout;
	wire  wire_receive_pma0_dataout;
	wire  [299:0]   wire_receive_pma0_dprioout;
	wire  wire_receive_pma0_locktorefout;
	wire  [63:0]   wire_receive_pma0_recoverdataout;
	wire  wire_receive_pma0_signaldetect;
	wire  [7:0]   wire_receive_pma1_analogtestbus;
	wire  wire_receive_pma1_clockout;
	wire  wire_receive_pma1_dataout;
	wire  [299:0]   wire_receive_pma1_dprioout;
	wire  wire_receive_pma1_locktorefout;
	wire  [63:0]   wire_receive_pma1_recoverdataout;
	wire  wire_receive_pma1_signaldetect;
	wire  [7:0]   wire_receive_pma2_analogtestbus;
	wire  wire_receive_pma2_clockout;
	wire  wire_receive_pma2_dataout;
	wire  [299:0]   wire_receive_pma2_dprioout;
	wire  wire_receive_pma2_locktorefout;
	wire  [63:0]   wire_receive_pma2_recoverdataout;
	wire  wire_receive_pma2_signaldetect;
	wire  [7:0]   wire_receive_pma3_analogtestbus;
	wire  wire_receive_pma3_clockout;
	wire  wire_receive_pma3_dataout;
	wire  [299:0]   wire_receive_pma3_dprioout;
	wire  wire_receive_pma3_locktorefout;
	wire  [63:0]   wire_receive_pma3_recoverdataout;
	wire  wire_receive_pma3_signaldetect;
	wire  wire_transmit_pcs0_coreclkout;
	wire  [19:0]   wire_transmit_pcs0_dataout;
	wire  [149:0]   wire_transmit_pcs0_dprioout;
	wire  wire_transmit_pcs0_forceelecidleout;
	wire  wire_transmit_pcs0_phfifooverflow;
	wire  wire_transmit_pcs0_phfiforddisableout;
	wire  wire_transmit_pcs0_phfiforesetout;
	wire  wire_transmit_pcs0_phfifounderflow;
	wire  wire_transmit_pcs0_phfifowrenableout;
	wire  wire_transmit_pcs0_rdenablesync;
	wire  wire_transmit_pcs0_txdetectrx;
	wire  wire_transmit_pcs0_xgmctrlenable;
	wire  [7:0]   wire_transmit_pcs0_xgmdataout;
	wire  wire_transmit_pcs1_coreclkout;
	wire  [19:0]   wire_transmit_pcs1_dataout;
	wire  [149:0]   wire_transmit_pcs1_dprioout;
	wire  wire_transmit_pcs1_forceelecidleout;
	wire  wire_transmit_pcs1_phfifooverflow;
	wire  wire_transmit_pcs1_phfiforddisableout;
	wire  wire_transmit_pcs1_phfiforesetout;
	wire  wire_transmit_pcs1_phfifounderflow;
	wire  wire_transmit_pcs1_phfifowrenableout;
	wire  wire_transmit_pcs1_rdenablesync;
	wire  wire_transmit_pcs1_txdetectrx;
	wire  wire_transmit_pcs1_xgmctrlenable;
	wire  [7:0]   wire_transmit_pcs1_xgmdataout;
	wire  wire_transmit_pcs2_coreclkout;
	wire  [19:0]   wire_transmit_pcs2_dataout;
	wire  [149:0]   wire_transmit_pcs2_dprioout;
	wire  wire_transmit_pcs2_forceelecidleout;
	wire  wire_transmit_pcs2_phfifooverflow;
	wire  wire_transmit_pcs2_phfiforddisableout;
	wire  wire_transmit_pcs2_phfiforesetout;
	wire  wire_transmit_pcs2_phfifounderflow;
	wire  wire_transmit_pcs2_phfifowrenableout;
	wire  wire_transmit_pcs2_rdenablesync;
	wire  wire_transmit_pcs2_txdetectrx;
	wire  wire_transmit_pcs2_xgmctrlenable;
	wire  [7:0]   wire_transmit_pcs2_xgmdataout;
	wire  wire_transmit_pcs3_coreclkout;
	wire  [19:0]   wire_transmit_pcs3_dataout;
	wire  [149:0]   wire_transmit_pcs3_dprioout;
	wire  wire_transmit_pcs3_forceelecidleout;
	wire  wire_transmit_pcs3_phfifooverflow;
	wire  wire_transmit_pcs3_phfiforddisableout;
	wire  wire_transmit_pcs3_phfiforesetout;
	wire  wire_transmit_pcs3_phfifounderflow;
	wire  wire_transmit_pcs3_phfifowrenableout;
	wire  wire_transmit_pcs3_rdenablesync;
	wire  wire_transmit_pcs3_txdetectrx;
	wire  wire_transmit_pcs3_xgmctrlenable;
	wire  [7:0]   wire_transmit_pcs3_xgmdataout;
	wire  wire_transmit_pma0_clockout;
	wire  wire_transmit_pma0_dataout;
	wire  [299:0]   wire_transmit_pma0_dprioout;
	wire  wire_transmit_pma0_seriallpbkout;
	wire  wire_transmit_pma1_clockout;
	wire  wire_transmit_pma1_dataout;
	wire  [299:0]   wire_transmit_pma1_dprioout;
	wire  wire_transmit_pma1_seriallpbkout;
	wire  wire_transmit_pma2_clockout;
	wire  wire_transmit_pma2_dataout;
	wire  [299:0]   wire_transmit_pma2_dprioout;
	wire  wire_transmit_pma2_seriallpbkout;
	wire  wire_transmit_pma3_clockout;
	wire  wire_transmit_pma3_dataout;
	wire  [299:0]   wire_transmit_pma3_dprioout;
	wire  wire_transmit_pma3_seriallpbkout;
	wire  [0:0]  cent_unit_clkdivpowerdn;
	wire  [599:0]  cent_unit_cmudividerdprioout;
	wire  [1799:0]  cent_unit_cmuplldprioout;
	wire  [1:0]  cent_unit_pllpowerdn;
	wire  [1:0]  cent_unit_pllresetout;
	wire  [0:0]  cent_unit_quadresetout;
	wire  [0:0]  cent_unit_rdenablesync;
	wire  [3:0]  cent_unit_rx_ctrl;
	wire  [31:0]  cent_unit_rx_xgmdataout;
	wire  [5:0]  cent_unit_rxcrupowerdn;
	wire  [5:0]  cent_unit_rxibpowerdn;
	wire  [1599:0]  cent_unit_rxpcsdprioin;
	wire  [1599:0]  cent_unit_rxpcsdprioout;
	wire  [1799:0]  cent_unit_rxpmadprioin;
	wire  [1799:0]  cent_unit_rxpmadprioout;
	wire  [1199:0]  cent_unit_tx_dprioin;
	wire  [31:0]  cent_unit_tx_xgmdataout;
	wire  [3:0]  cent_unit_txctrlout;
	wire  [5:0]  cent_unit_txdetectrxpowerdn;
	wire  [599:0]  cent_unit_txdprioout;
	wire  [5:0]  cent_unit_txobpowerdn;
	wire  [1799:0]  cent_unit_txpmadprioin;
	wire  [1799:0]  cent_unit_txpmadprioout;
	wire  [3:0]  clk_div_clk0in;
	wire  [599:0]  clk_div_cmudividerdprioin;
	wire  [1:0]  cmu_analogfastrefclkout;
	wire  [1:0]  cmu_analogrefclkout;
	wire  [0:0]  cmu_analogrefclkpulse;
	wire  [0:0]  coreclkout_wire;
	wire  [0:0]  enabledeskew;
	wire  [5:0]  fixedclk_to_cmu;
	wire  [0:0]  int_hiprateswtichdone;
	wire  [3:0]  int_rx_coreclkout;
	wire  [0:0]  int_rx_digitalreset_reg;
	wire  [3:0]  int_rx_phfifobyteserdisable;
	wire  [3:0]  int_rx_phfifoptrsresetout;
	wire  [3:0]  int_rx_phfifordenableout;
	wire  [3:0]  int_rx_phfiforesetout;
	wire  [3:0]  int_rx_phfifowrdisableout;
	wire  [11:0]  int_rx_phfifoxnbytesel;
	wire  [11:0]  int_rx_phfifoxnrdenable;
	wire  [11:0]  int_rx_phfifoxnwrclk;
	wire  [11:0]  int_rx_phfifoxnwrenable;
	wire  [0:0]  int_rxcoreclk;
	wire  [0:0]  int_rxphfifordenable;
	wire  [0:0]  int_rxphfiforeset;
	wire  [0:0]  int_rxphfifox4byteselout;
	wire  [0:0]  int_rxphfifox4rdenableout;
	wire  [0:0]  int_rxphfifox4wrclkout;
	wire  [0:0]  int_rxphfifox4wrenableout;
	wire  [3:0]  int_tx_coreclkout;
	wire  [0:0]  int_tx_digitalreset_reg;
	wire  [3:0]  int_tx_phfiforddisableout;
	wire  [3:0]  int_tx_phfiforesetout;
	wire  [3:0]  int_tx_phfifowrenableout;
	wire  [11:0]  int_tx_phfifoxnbytesel;
	wire  [11:0]  int_tx_phfifoxnrdclk;
	wire  [11:0]  int_tx_phfifoxnrdenable;
	wire  [11:0]  int_tx_phfifoxnwrenable;
	wire  [0:0]  int_txcoreclk;
	wire  [0:0]  int_txphfiforddisable;
	wire  [0:0]  int_txphfiforeset;
	wire  [0:0]  int_txphfifowrenable;
	wire  [0:0]  int_txphfifox4byteselout;
	wire  [0:0]  int_txphfifox4rdclkout;
	wire  [0:0]  int_txphfifox4rdenableout;
	wire  [0:0]  int_txphfifox4wrenableout;
	wire  [0:0]  nonusertocmu_out;
	wire  [9:0]  pll0_clkin;
	wire  [299:0]  pll0_dprioin;
	wire  [299:0]  pll0_dprioout;
	wire  [3:0]  pll0_out;
	wire  [7:0]  pll_ch_dataout_wire;
	wire  [1199:0]  pll_ch_dprioout;
	wire  [1799:0]  pll_cmuplldprioout;
	wire  [0:0]  pll_inclk_wire;
	wire  [0:0]  pll_locked_out;
	wire  [1:0]  pllpowerdn_in;
	wire  [1:0]  pllreset_in;
	wire  [0:0]  reconfig_togxb_busy;
	wire  [0:0]  reconfig_togxb_disable;
	wire  [0:0]  reconfig_togxb_in;
	wire  [0:0]  reconfig_togxb_load;
	wire  [0:0]  refclk_pma;
	wire  [3:0]  rx_adetectdeskew;
	wire  [0:0]  rx_alignstatussync;
	wire  [3:0]  rx_alignstatussyncout;
	wire  [5:0]  rx_analogreset_in;
	wire  [5:0]  rx_analogreset_out;
	wire  [0:0]  rx_channelaligned_in;
	wire  [3:0]  rx_coreclk_in;
	wire  [39:0]  rx_cruclk_in;
	wire  [15:0]  rx_deserclock_in;
	wire  [3:0]  rx_digitalreset_in;
	wire  [3:0]  rx_digitalreset_out;
	wire  [0:0]  rx_disablefifordin_in;
	wire  [3:0]  rx_disablefifordout_wire;
	wire  [0:0]  rx_disablefifowrin_in;
	wire  [3:0]  rx_disablefifowrout_wire;
	wire [3:0]  rx_enapatternalign;
	wire  [0:0]  rx_fifordin_in;
	wire  [3:0]  rx_fifordout_wire;
	wire  [0:0]  rx_fiforesetrd;
	wire  [3:0]  rx_freqlocked_wire;
	wire  [3:0]  rx_locktodata_wire;
	wire  [3:0]  rx_locktorefclk_wire;
	wire  [0:0]  rx_masterclk;
	wire  [63:0]  rx_out_wire;
	wire  [1599:0]  rx_pcsdprioin_wire;
	wire  [1599:0]  rx_pcsdprioout;
	wire  [3:0]  rx_phfifooverflowout;
	wire [3:0]  rx_phfifordenable;
	wire [3:0]  rx_phfiforeset;
	wire  [3:0]  rx_phfifounderflowout;
	wire [3:0]  rx_phfifowrdisable;
	wire  [3:0]  rx_pldcruclk_in;
	wire  [15:0]  rx_pll_clkout;
	wire  [3:0]  rx_pll_pfdrefclkout_wire;
	wire  [3:0]  rx_plllocked_wire;
	wire  [67:0]  rx_pma_analogtestbus;
	wire  [3:0]  rx_pma_clockout;
	wire  [3:0]  rx_pma_dataout;
	wire  [3:0]  rx_pma_locktorefout;
	wire  [79:0]  rx_pma_recoverdataout_wire;
	wire  [1799:0]  rx_pmadprioin_wire;
	wire  [1799:0]  rx_pmadprioout;
	wire [3:0]  rx_powerdown;
	wire  [5:0]  rx_powerdown_in;
	wire [3:0]  rx_prbscidenable;
	wire  [3:0]  rx_rdalign;
	wire [3:0]  rx_rmfiforeset;
	wire  [5:0]  rx_rxcruresetout;
	wire  [3:0]  rx_syncstatusdeskew;
	wire  [3:0]  rx_xgmctrlin;
	wire  [31:0]  rx_xgmdataout;
	wire  [3:0]  rx_xgmdatavalid;
	wire  [3:0]  rx_xgmrunningdisp;
	wire  [0:0]  rxphfifowrdisable;
	wire  [1799:0]  rxpll_dprioin;
	wire  [5:0]  tx_analogreset_out;
	wire  [3:0]  tx_clkout_int_wire;
	wire  [3:0]  tx_coreclk_in;
	wire  [63:0]  tx_datain_wire;
	wire  [79:0]  tx_dataout_pcs_to_pma;
	wire  [3:0]  tx_digitalreset_in;
	wire  [3:0]  tx_digitalreset_out;
	wire  [1199:0]  tx_dprioin_wire;
	wire  [7:0]  tx_forcedisp_wire;
	wire  [3:0]  tx_localrefclk;
	wire  [3:0]  tx_phfifooverflowout;
	wire [3:0]  tx_phfiforeset;
	wire  [3:0]  tx_phfifounderflowout;
	wire  [1799:0]  tx_pmadprioin_wire;
	wire  [1799:0]  tx_pmadprioout;
	wire  [3:0]  tx_rdenablesync;
	wire  [3:0]  tx_serialloopbackout;
	wire  [599:0]  tx_txdprioout;
	wire  [3:0]  tx_xgmctrlenable;
	wire  [31:0]  tx_xgmdataout;
	wire  [3:0]  txdetectrxout;
	wire  [0:0]  w_cent_unit_dpriodisableout1w;

        // These are synchronized forms digital reset
        // async inputs go to *digitalreset_reg0c, synced with data path clock
	// synopsys translate_off
	initial
		rx_digitalreset_reg0c[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge wire_rx_digitalreset_reg0c_clk[0:0])
		  rx_digitalreset_reg0c[0:0] <= wire_rx_digitalreset_reg0c_d[0:0];
	// synopsys translate_off
	initial
		rx_digitalreset_reg0c[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge wire_rx_digitalreset_reg0c_clk[1:1])
		  rx_digitalreset_reg0c[1:1] <= wire_rx_digitalreset_reg0c_d[1:1];
	// synopsys translate_off
	initial
		rx_digitalreset_reg0c[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge wire_rx_digitalreset_reg0c_clk[2:2])
		  rx_digitalreset_reg0c[2:2] <= wire_rx_digitalreset_reg0c_d[2:2];
	assign
		wire_rx_digitalreset_reg0c_d = {rx_digitalreset_reg0c[1:0], rx_digitalreset[0]};
	assign
		wire_rx_digitalreset_reg0c_clk = {3{coreclkout_wire[0]}};
	// synopsys translate_off
	initial
		tx_digitalreset_reg0c[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge wire_tx_digitalreset_reg0c_clk[0:0])
		  tx_digitalreset_reg0c[0:0] <= wire_tx_digitalreset_reg0c_d[0:0];
	// synopsys translate_off
	initial
		tx_digitalreset_reg0c[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge wire_tx_digitalreset_reg0c_clk[1:1])
		  tx_digitalreset_reg0c[1:1] <= wire_tx_digitalreset_reg0c_d[1:1];
	// synopsys translate_off
	initial
		tx_digitalreset_reg0c[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge wire_tx_digitalreset_reg0c_clk[2:2])
		  tx_digitalreset_reg0c[2:2] <= wire_tx_digitalreset_reg0c_d[2:2];
	assign
		wire_tx_digitalreset_reg0c_d = {tx_digitalreset_reg0c[1:0], tx_digitalreset[0]};
	assign
		wire_tx_digitalreset_reg0c_clk = {3{coreclkout_wire[0]}};

        // Parameter strings for embedded timing constraints
        localparam  TX_DIGITALRESET_CONSTRAINT   = {"-name SDC_STATEMENT \"set_false_path -to {*xaui_phy*tx_digitalreset_reg0c[0]};\""};
        localparam  RX_DIGITALRESET_CONSTRAINT   = {"-name SDC_STATEMENT \"set_false_path -to {*xaui_phy*rx_digitalreset_reg0c[0]};\""};
        localparam  SDC_CONSTRAINTS = {TX_DIGITALRESET_CONSTRAINT,";",RX_DIGITALRESET_CONSTRAINT};
       (* altera_attribute = SDC_CONSTRAINTS *)  // Apply timing constraints (does not matter which node)

	stratixiv_hssi_calibration_block   cal_blk0
	( 
	.calibrationstatus(),
	.clk(cal_blk_clk),
	.enabletestbus(1'b1),
	.nonusertocmu(wire_cal_blk0_nonusertocmu),
	.powerdn(cal_blk_powerdown)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.testctrl(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	stratixiv_hssi_clock_divider   central_clk_div0
	( 
	.analogfastrefclkout(wire_central_clk_div0_analogfastrefclkout),
	.analogfastrefclkoutshifted(),
	.analogrefclkout(wire_central_clk_div0_analogrefclkout),
	.analogrefclkoutshifted(),
	.analogrefclkpulse(wire_central_clk_div0_analogrefclkpulse),
	.analogrefclkpulseshifted(),
	.clk0in(clk_div_clk0in[3:0]),
	.coreclkout(wire_central_clk_div0_coreclkout),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(cent_unit_cmudividerdprioout[499:400]),
	.dprioout(wire_central_clk_div0_dprioout),
	.powerdn(cent_unit_clkdivpowerdn[0]),
	.quadreset(cent_unit_quadresetout[0]),
	.rateswitchbaseclock(),
	.rateswitchdone(wire_central_clk_div0_rateswitchdone),
	.rateswitchout(),
	.refclkout(wire_central_clk_div0_refclkout)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk1in({4{1'b0}}),
	.rateswitch(1'b0),
	.rateswitchbaseclkin({2{1'b0}}),
	.rateswitchdonein({2{1'b0}}),
	.refclkdig(1'b0),
	.refclkin({2{1'b0}}),
	.vcobypassin(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		central_clk_div0.divide_by = 5,
		central_clk_div0.divider_type = "CENTRAL_ENHANCED",
		central_clk_div0.effective_data_rate = "3125 Mbps",
		central_clk_div0.enable_dynamic_divider = "false",
		central_clk_div0.enable_refclk_out = "true",
		central_clk_div0.inclk_select = 0,
		central_clk_div0.logical_channel_address = 0,
		central_clk_div0.pre_divide_by = 1,
		central_clk_div0.refclkin_select = 0,
		central_clk_div0.select_local_rate_switch_base_clock = "true",
		central_clk_div0.select_local_refclk = "true",
		central_clk_div0.sim_analogfastrefclkout_phase_shift = 0,
		central_clk_div0.sim_analogrefclkout_phase_shift = 0,
		central_clk_div0.sim_coreclkout_phase_shift = 0,
		central_clk_div0.sim_refclkout_phase_shift = 0,
		central_clk_div0.use_coreclk_out_post_divider = "true",
		central_clk_div0.use_refclk_post_divider = "false",
		central_clk_div0.use_vco_bypass = "false",
		central_clk_div0.lpm_type = "stratixiv_hssi_clock_divider";
	stratixiv_hssi_cmu   cent_unit0
	( 
	.adet(rx_adetectdeskew[3:0]),
	.alignstatus(wire_cent_unit0_alignstatus),
	.autospdx4configsel(),
	.autospdx4rateswitchout(),
	.autospdx4spdchg(),
	.clkdivpowerdn(wire_cent_unit0_clkdivpowerdn),
	.cmudividerdprioin({clk_div_cmudividerdprioin[599:0]}),
	.cmudividerdprioout(wire_cent_unit0_cmudividerdprioout),
	.cmuplldprioin(pll_cmuplldprioout[1799:0]),
	.cmuplldprioout(wire_cent_unit0_cmuplldprioout),
	.digitaltestout(),
	.dpclk(reconfig_clk),
	.dpriodisable(reconfig_togxb_disable),
	.dpriodisableout(wire_cent_unit0_dpriodisableout),
	.dprioin(reconfig_togxb_in),
	.dprioload(reconfig_togxb_load),
	.dpriooe(),
	.dprioout(wire_cent_unit0_dprioout),
	.enabledeskew(wire_cent_unit0_enabledeskew),
	.extra10gout(),
	.fiforesetrd(wire_cent_unit0_fiforesetrd),
	.fixedclk({{2{1'b0}}, fixedclk_to_cmu[3:0]}),
	.lccmutestbus(),
	.nonuserfromcal(nonusertocmu_out[0]),
	.phfifiox4ptrsreset(),
	.pllpowerdn(wire_cent_unit0_pllpowerdn),
	.pllresetout(wire_cent_unit0_pllresetout),
	.quadreset(gxb_powerdown[0]),
	.quadresetout(wire_cent_unit0_quadresetout),
	.rateswitchdonein(int_hiprateswtichdone[0]),
	.rdalign(rx_rdalign[3:0]),
	.rdenablesync(cent_unit_rdenablesync[0]),
	.recovclk(rx_masterclk[0]),
	.refclkdividerdprioin({2{1'b0}}),
	.refclkdividerdprioout(),
	.rxadcepowerdown(),
	.rxadceresetout(),
	.rxanalogreset({{2{1'b0}}, rx_analogreset_in[3:0]}),
	.rxanalogresetout(wire_cent_unit0_rxanalogresetout),
	.rxclk(refclk_pma[0]),
	.rxcoreclk(int_rxcoreclk[0]),
	.rxcrupowerdown(wire_cent_unit0_rxcrupowerdown),
	.rxcruresetout(wire_cent_unit0_rxcruresetout),
	.rxctrl(cent_unit_rx_ctrl[3:0]),
	.rxctrlout(wire_cent_unit0_rxctrlout),
	.rxdatain(rx_xgmdataout[31:0]),
	.rxdataout(wire_cent_unit0_rxdataout),
	.rxdatavalid(rx_xgmdatavalid[3:0]),
	.rxdigitalreset({rx_digitalreset_in[3:0]}),
	.rxdigitalresetout(wire_cent_unit0_rxdigitalresetout),
	.rxibpowerdown(wire_cent_unit0_rxibpowerdown),
	.rxpcsdprioin({cent_unit_rxpcsdprioin[1599:0]}),
	.rxpcsdprioout(wire_cent_unit0_rxpcsdprioout),
	.rxphfifordenable(int_rxphfifordenable[0]),
	.rxphfiforeset(int_rxphfiforeset[0]),
	.rxphfifowrdisable(rxphfifowrdisable[0]),
	.rxphfifox4byteselout(wire_cent_unit0_rxphfifox4byteselout),
	.rxphfifox4rdenableout(wire_cent_unit0_rxphfifox4rdenableout),
	.rxphfifox4wrclkout(wire_cent_unit0_rxphfifox4wrclkout),
	.rxphfifox4wrenableout(wire_cent_unit0_rxphfifox4wrenableout),
	.rxpmadprioin({cent_unit_rxpmadprioin[1799:0]}),
	.rxpmadprioout(wire_cent_unit0_rxpmadprioout),
	.rxpowerdown({{2{1'b0}}, rx_powerdown_in[3:0]}),
	.rxrunningdisp(rx_xgmrunningdisp[3:0]),
	.scanout(),
	.syncstatus(rx_syncstatusdeskew[3:0]),
	.testout(),
	.txanalogresetout(wire_cent_unit0_txanalogresetout),
	.txclk(refclk_pma[0]),
	.txcoreclk(int_txcoreclk[0]),
	.txctrl(tx_xgmctrlenable[3:0]),
	.txctrlout(wire_cent_unit0_txctrlout),
	.txdatain(tx_xgmdataout[31:0]),
	.txdataout(wire_cent_unit0_txdataout),
	.txdetectrxpowerdown(wire_cent_unit0_txdetectrxpowerdown),
	.txdigitalreset({tx_digitalreset_in[3:0]}),
	.txdigitalresetout(wire_cent_unit0_txdigitalresetout),
	.txdividerpowerdown(),
	.txobpowerdown(wire_cent_unit0_txobpowerdown),
	.txpcsdprioin({cent_unit_tx_dprioin[599:0]}),
	.txpcsdprioout(wire_cent_unit0_txpcsdprioout),
	.txphfiforddisable(int_txphfiforddisable[0]),
	.txphfiforeset(int_txphfiforeset[0]),
	.txphfifowrenable(int_txphfifowrenable[0]),
	.txphfifox4byteselout(wire_cent_unit0_txphfifox4byteselout),
	.txphfifox4rdclkout(wire_cent_unit0_txphfifox4rdclkout),
	.txphfifox4rdenableout(wire_cent_unit0_txphfifox4rdenableout),
	.txphfifox4wrenableout(wire_cent_unit0_txphfifox4wrenableout),
	.txpllreset({{1{1'b0}}, pll_powerdown[0]}),
	.txpmadprioin({cent_unit_txpmadprioin[1799:0]}),
	.txpmadprioout(wire_cent_unit0_txpmadprioout)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.extra10gin({7{1'b0}}),
	.lccmurtestbussel({3{1'b0}}),
	.pmacramtest(1'b0),
	.rateswitch(1'b0),
	.scanclk(1'b0),
	.scanin({23{1'b0}}),
	.scanmode(1'b0),
	.scanshift(1'b0),
	.testin({10000{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cent_unit0.auto_spd_deassert_ph_fifo_rst_count = 8,
		cent_unit0.auto_spd_phystatus_notify_count = 0,
		cent_unit0.bonded_quad_mode = "none",
		cent_unit0.devaddr = ((((starting_channel_number / 4) + 0) % 32) + 1),
		cent_unit0.in_xaui_mode = "true",
		cent_unit0.offset_all_errors_align = "false",
		cent_unit0.pipe_auto_speed_nego_enable = "false",
		cent_unit0.pipe_freq_scale_mode = "Frequency",
		cent_unit0.pma_done_count = 249950,
		cent_unit0.portaddr = (((starting_channel_number + 0) / 128) + 1),
		cent_unit0.rx0_auto_spd_self_switch_enable = "false",
		cent_unit0.rx0_channel_bonding = "x4",
		cent_unit0.rx0_clk1_mux_select = "master clock",
		cent_unit0.rx0_clk2_mux_select = "digital reference clock",
		cent_unit0.rx0_ph_fifo_reg_mode = "false",
		cent_unit0.rx0_rd_clk_mux_select = "core clock",
		cent_unit0.rx0_recovered_clk_mux_select = "recovered clock",
		cent_unit0.rx0_reset_clock_output_during_digital_reset = "false",
		cent_unit0.rx0_use_double_data_mode = "true",
		cent_unit0.tx0_auto_spd_self_switch_enable = "false",
		cent_unit0.tx0_channel_bonding = "x4",
		cent_unit0.tx0_ph_fifo_reg_mode = "false",
		cent_unit0.tx0_rd_clk_mux_select = "cmu_clock_divider",
		cent_unit0.tx0_use_double_data_mode = "true",
		cent_unit0.tx0_wr_clk_mux_select = "core_clk",
		cent_unit0.use_deskew_fifo = "true",
		cent_unit0.vcceh_voltage = "Auto",
		cent_unit0.lpm_type = "stratixiv_hssi_cmu";
	stratixiv_hssi_pll   rx_cdr_pll0
	( 
	.areset(rx_rxcruresetout[0]),
	.clk(wire_rx_cdr_pll0_clk),
	.datain(rx_pma_dataout[0]),
	.dataout(wire_rx_cdr_pll0_dataout),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(rxpll_dprioin[299:0]),
	.dprioout(wire_rx_cdr_pll0_dprioout),
	.freqlocked(wire_rx_cdr_pll0_freqlocked),
	.inclk({rx_cruclk_in[9:0]}),
	.locked(wire_rx_cdr_pll0_locked),
	.locktorefclk(rx_pma_locktorefout[0]),
	.pfdfbclkout(),
	.pfdrefclkout(wire_rx_cdr_pll0_pfdrefclkout),
	.powerdown(cent_unit_rxcrupowerdn[0]),
	.vcobypassout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.earlyeios(1'b0),
	.extra10gin({6{1'b0}}),
	.pfdfbclk(1'b0),
	.rateswitch(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		rx_cdr_pll0.bandwidth_type = "Auto",
		rx_cdr_pll0.channel_num = ((starting_channel_number + 0) % 4),
		rx_cdr_pll0.dprio_config_mode = 6'h00,
		rx_cdr_pll0.effective_data_rate = "3125 Mbps",
		rx_cdr_pll0.enable_dynamic_divider = "false",
		rx_cdr_pll0.fast_lock_control = "false",
		rx_cdr_pll0.inclk0_input_period = 6400,
		rx_cdr_pll0.input_clock_frequency = "156.25 MHz",
		rx_cdr_pll0.m = 10,
		rx_cdr_pll0.n = 1,
		rx_cdr_pll0.pfd_clk_select = 0,
		rx_cdr_pll0.pll_type = "RX CDR",
		rx_cdr_pll0.use_refclk_pin = "false",
		rx_cdr_pll0.vco_post_scale = 2,
		rx_cdr_pll0.lpm_type = "stratixiv_hssi_pll";
	stratixiv_hssi_pll   rx_cdr_pll1
	( 
	.areset(rx_rxcruresetout[1]),
	.clk(wire_rx_cdr_pll1_clk),
	.datain(rx_pma_dataout[1]),
	.dataout(wire_rx_cdr_pll1_dataout),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(rxpll_dprioin[599:300]),
	.dprioout(wire_rx_cdr_pll1_dprioout),
	.freqlocked(wire_rx_cdr_pll1_freqlocked),
	.inclk({rx_cruclk_in[19:10]}),
	.locked(wire_rx_cdr_pll1_locked),
	.locktorefclk(rx_pma_locktorefout[1]),
	.pfdfbclkout(),
	.pfdrefclkout(wire_rx_cdr_pll1_pfdrefclkout),
	.powerdown(cent_unit_rxcrupowerdn[1]),
	.vcobypassout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.earlyeios(1'b0),
	.extra10gin({6{1'b0}}),
	.pfdfbclk(1'b0),
	.rateswitch(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		rx_cdr_pll1.bandwidth_type = "Auto",
		rx_cdr_pll1.channel_num = ((starting_channel_number + 1) % 4),
		rx_cdr_pll1.dprio_config_mode = 6'h00,
		rx_cdr_pll1.effective_data_rate = "3125 Mbps",
		rx_cdr_pll1.enable_dynamic_divider = "false",
		rx_cdr_pll1.fast_lock_control = "false",
		rx_cdr_pll1.inclk0_input_period = 6400,
		rx_cdr_pll1.input_clock_frequency = "156.25 MHz",
		rx_cdr_pll1.m = 10,
		rx_cdr_pll1.n = 1,
		rx_cdr_pll1.pfd_clk_select = 0,
		rx_cdr_pll1.pll_type = "RX CDR",
		rx_cdr_pll1.use_refclk_pin = "false",
		rx_cdr_pll1.vco_post_scale = 2,
		rx_cdr_pll1.lpm_type = "stratixiv_hssi_pll";
	stratixiv_hssi_pll   rx_cdr_pll2
	( 
	.areset(rx_rxcruresetout[2]),
	.clk(wire_rx_cdr_pll2_clk),
	.datain(rx_pma_dataout[2]),
	.dataout(wire_rx_cdr_pll2_dataout),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(rxpll_dprioin[899:600]),
	.dprioout(wire_rx_cdr_pll2_dprioout),
	.freqlocked(wire_rx_cdr_pll2_freqlocked),
	.inclk({rx_cruclk_in[29:20]}),
	.locked(wire_rx_cdr_pll2_locked),
	.locktorefclk(rx_pma_locktorefout[2]),
	.pfdfbclkout(),
	.pfdrefclkout(wire_rx_cdr_pll2_pfdrefclkout),
	.powerdown(cent_unit_rxcrupowerdn[2]),
	.vcobypassout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.earlyeios(1'b0),
	.extra10gin({6{1'b0}}),
	.pfdfbclk(1'b0),
	.rateswitch(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		rx_cdr_pll2.bandwidth_type = "Auto",
		rx_cdr_pll2.channel_num = ((starting_channel_number + 2) % 4),
		rx_cdr_pll2.dprio_config_mode = 6'h00,
		rx_cdr_pll2.effective_data_rate = "3125 Mbps",
		rx_cdr_pll2.enable_dynamic_divider = "false",
		rx_cdr_pll2.fast_lock_control = "false",
		rx_cdr_pll2.inclk0_input_period = 6400,
		rx_cdr_pll2.input_clock_frequency = "156.25 MHz",
		rx_cdr_pll2.m = 10,
		rx_cdr_pll2.n = 1,
		rx_cdr_pll2.pfd_clk_select = 0,
		rx_cdr_pll2.pll_type = "RX CDR",
		rx_cdr_pll2.use_refclk_pin = "false",
		rx_cdr_pll2.vco_post_scale = 2,
		rx_cdr_pll2.lpm_type = "stratixiv_hssi_pll";
	stratixiv_hssi_pll   rx_cdr_pll3
	( 
	.areset(rx_rxcruresetout[3]),
	.clk(wire_rx_cdr_pll3_clk),
	.datain(rx_pma_dataout[3]),
	.dataout(wire_rx_cdr_pll3_dataout),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(rxpll_dprioin[1199:900]),
	.dprioout(wire_rx_cdr_pll3_dprioout),
	.freqlocked(wire_rx_cdr_pll3_freqlocked),
	.inclk({rx_cruclk_in[39:30]}),
	.locked(wire_rx_cdr_pll3_locked),
	.locktorefclk(rx_pma_locktorefout[3]),
	.pfdfbclkout(),
	.pfdrefclkout(wire_rx_cdr_pll3_pfdrefclkout),
	.powerdown(cent_unit_rxcrupowerdn[3]),
	.vcobypassout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.earlyeios(1'b0),
	.extra10gin({6{1'b0}}),
	.pfdfbclk(1'b0),
	.rateswitch(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		rx_cdr_pll3.bandwidth_type = "Auto",
		rx_cdr_pll3.channel_num = ((starting_channel_number + 3) % 4),
		rx_cdr_pll3.dprio_config_mode = 6'h00,
		rx_cdr_pll3.effective_data_rate = "3125 Mbps",
		rx_cdr_pll3.enable_dynamic_divider = "false",
		rx_cdr_pll3.fast_lock_control = "false",
		rx_cdr_pll3.inclk0_input_period = 6400,
		rx_cdr_pll3.input_clock_frequency = "156.25 MHz",
		rx_cdr_pll3.m = 10,
		rx_cdr_pll3.n = 1,
		rx_cdr_pll3.pfd_clk_select = 0,
		rx_cdr_pll3.pll_type = "RX CDR",
		rx_cdr_pll3.use_refclk_pin = "false",
		rx_cdr_pll3.vco_post_scale = 2,
		rx_cdr_pll3.lpm_type = "stratixiv_hssi_pll";
	stratixiv_hssi_pll   tx_pll0
	( 
	.areset(pllreset_in[0]),
	.clk(wire_tx_pll0_clk),
	.dataout(),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(pll0_dprioin[299:0]),
	.dprioout(wire_tx_pll0_dprioout),
	.freqlocked(),
	.inclk({pll0_clkin[9:0]}),
	.locked(wire_tx_pll0_locked),
	.pfdfbclkout(),
	.pfdrefclkout(),
	.powerdown(pllpowerdn_in[0]),
	.vcobypassout()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.datain(1'b0),
	.earlyeios(1'b0),
	.extra10gin({6{1'b0}}),
	.locktorefclk(1'b1),
	.pfdfbclk(1'b0),
	.rateswitch(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		tx_pll0.bandwidth_type = "Auto",
		tx_pll0.channel_num = 4,
		tx_pll0.dprio_config_mode = 6'h00,
		tx_pll0.inclk0_input_period = 6400,
		tx_pll0.input_clock_frequency = "156.25 MHz",
		tx_pll0.logical_tx_pll_number = 0,
		tx_pll0.m = 10,
		tx_pll0.n = 1,
		tx_pll0.pfd_clk_select = 0,
		tx_pll0.pfd_fb_select = "internal",
		tx_pll0.pll_type = "CMU",
		tx_pll0.use_refclk_pin = "false",
		tx_pll0.vco_post_scale = 2,
		tx_pll0.lpm_type = "stratixiv_hssi_pll";
	stratixiv_hssi_rx_pcs   receive_pcs0
	( 
	.a1a2size(1'b0),
	.a1a2sizeout(),
	.a1detect(),
	.a2detect(),
	.adetectdeskew(wire_receive_pcs0_adetectdeskew),
	.alignstatus(rx_channelaligned_in[0]),
	.alignstatussync(rx_alignstatussync[0]),
	.alignstatussyncout(wire_receive_pcs0_alignstatussyncout),
	.autospdrateswitchout(),
	.autospdspdchgout(),
	.bistdone(),
	.bisterr(),
	.bitslipboundaryselectout(),
	.byteorderalignstatus(),
	.cdrctrlearlyeios(),
	.cdrctrllocktorefcl((reconfig_togxb_busy | rx_locktorefclk[0])),
	.cdrctrllocktorefclkout(wire_receive_pcs0_cdrctrllocktorefclkout),
	.clkout(wire_receive_pcs0_clkout),
	.coreclk(rx_coreclk_in[0]),
	.coreclkout(wire_receive_pcs0_coreclkout),
	.ctrldetect(wire_receive_pcs0_ctrldetect),
	.datain(rx_pma_recoverdataout_wire[19:0]),
	.dataout(wire_receive_pcs0_dataout),
	.dataoutfull(),
	.digitalreset(rx_digitalreset_out[0]),
	.digitaltestout(),
	.disablefifordin(rx_disablefifordin_in[0]),
	.disablefifordout(wire_receive_pcs0_disablefifordout),
	.disablefifowrin(rx_disablefifowrin_in[0]),
	.disablefifowrout(wire_receive_pcs0_disablefifowrout),
	.disperr(wire_receive_pcs0_disperr),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(rx_pcsdprioin_wire[399:0]),
	.dprioout(wire_receive_pcs0_dprioout),
	.enabledeskew(enabledeskew[0]),
	.enabyteord(1'b0),
	.enapatternalign(rx_enapatternalign[0]),
	.errdetect(wire_receive_pcs0_errdetect),
	.fifordin(rx_fifordin_in[0]),
	.fifordout(wire_receive_pcs0_fifordout),
	.fiforesetrd(rx_fiforesetrd[0]),
	.hipdataout(),
	.hipdatavalid(),
	.hipelecidle(),
	.hipphydonestatus(),
	.hipstatus(),
	.invpol(rx_invpolarity[0]),
	.iqpphfifobyteselout(),
	.iqpphfifoptrsresetout(),
	.iqpphfifordenableout(),
	.iqpphfifowrclkout(),
	.iqpphfifowrenableout(),
	.k1detect(),
	.k2detect(),
	.localrefclk(1'b0),
	.masterclk(rx_masterclk[0]),
	.parallelfdbk({20{1'b0}}),
	.patterndetect(wire_receive_pcs0_patterndetect),
	.phfifobyteselout(),
	.phfifobyteserdisableout(wire_receive_pcs0_phfifobyteserdisableout),
	.phfifooverflow(wire_receive_pcs0_phfifooverflow),
	.phfifoptrsresetout(wire_receive_pcs0_phfifoptrsresetout),
	.phfifordenable(rx_phfifordenable[0]),
	.phfifordenableout(wire_receive_pcs0_phfifordenableout),
	.phfiforeset(rx_phfiforeset[0]),
	.phfiforesetout(wire_receive_pcs0_phfiforesetout),
	.phfifounderflow(wire_receive_pcs0_phfifounderflow),
	.phfifowrclkout(),
	.phfifowrdisable(rx_phfifowrdisable[0]),
	.phfifowrdisableout(wire_receive_pcs0_phfifowrdisableout),
	.phfifowrenableout(),
	.phfifoxnbytesel(int_rx_phfifoxnbytesel[2:0]),
	.phfifoxnrdenable(int_rx_phfifoxnrdenable[2:0]),
	.phfifoxnwrclk(int_rx_phfifoxnwrclk[2:0]),
	.phfifoxnwrenable(int_rx_phfifoxnwrenable[2:0]),
	.pipebufferstat(),
	.pipedatavalid(),
	.pipeelecidle(),
	.pipephydonestatus(),
	.pipepowerdown({2{1'b0}}),
	.pipepowerstate({4{1'b0}}),
	.pipestatetransdoneout(),
	.pipestatus(),
	.prbscidenable(rx_prbscidenable[0]),
	.quadreset(cent_unit_quadresetout[0]),
	.rateswitchout(wire_receive_pcs0_rateswitchout),
	.rateswitchxndone(int_hiprateswtichdone[0]),
	.rdalign(wire_receive_pcs0_rdalign),
	.recoveredclk(rx_pma_clockout[0]),
	.refclk(refclk_pma[0]),
	.revbitorderwa(1'b0),
	.revbyteorderwa(1'b0),
	.revparallelfdbkdata(),
	.rlv(wire_receive_pcs0_rlv),
	.rmfifoalmostempty(),
	.rmfifoalmostfull(),
	.rmfifodatadeleted(wire_receive_pcs0_rmfifodatadeleted),
	.rmfifodatainserted(wire_receive_pcs0_rmfifodatainserted),
	.rmfifoempty(wire_receive_pcs0_rmfifoempty),
	.rmfifofull(wire_receive_pcs0_rmfifofull),
	.rmfifordena(1'b0),
	.rmfiforeset(rx_rmfiforeset[0]),
	.rmfifowrena(1'b0),
	.runningdisp(wire_receive_pcs0_runningdisp),
	.rxdetectvalid(1'b0),
	.rxfound({2{1'b0}}),
	.signaldetect(),
	.syncstatus(wire_receive_pcs0_syncstatus),
	.syncstatusdeskew(wire_receive_pcs0_syncstatusdeskew),
	.xauidelcondmetout(),
	.xauififoovrout(),
	.xauiinsertincompleteout(),
	.xauilatencycompout(),
	.xgmctrldet(wire_receive_pcs0_xgmctrldet),
	.xgmctrlin(rx_xgmctrlin[0]),
	.xgmdatain(cent_unit_rx_xgmdataout[7:0]),
	.xgmdataout(wire_receive_pcs0_xgmdataout),
	.xgmdatavalid(wire_receive_pcs0_xgmdatavalid),
	.xgmrunningdisp(wire_receive_pcs0_xgmrunningdisp)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.autospdxnconfigsel({3{1'b0}}),
	.autospdxnspdchg({3{1'b0}}),
	.bitslip(1'b0),
	.elecidleinfersel({3{1'b0}}),
	.grayelecidleinferselfromtx({3{1'b0}}),
	.hip8b10binvpolarity(1'b0),
	.hipelecidleinfersel({3{1'b0}}),
	.hippowerdown({2{1'b0}}),
	.hiprateswitch(1'b0),
	.iqpautospdxnspgchg({2{1'b0}}),
	.iqpphfifoxnbytesel({2{1'b0}}),
	.iqpphfifoxnptrsreset({2{1'b0}}),
	.iqpphfifoxnrdenable({2{1'b0}}),
	.iqpphfifoxnwrclk({2{1'b0}}),
	.iqpphfifoxnwrenable({2{1'b0}}),
	.phfifox4bytesel(1'b0),
	.phfifox4rdenable(1'b0),
	.phfifox4wrclk(1'b0),
	.phfifox4wrenable(1'b0),
	.phfifox8bytesel(1'b0),
	.phfifox8rdenable(1'b0),
	.phfifox8wrclk(1'b0),
	.phfifox8wrenable(1'b0),
	.phfifoxnptrsreset({3{1'b0}}),
	.pipe8b10binvpolarity(1'b0),
	.pipeenrevparallellpbkfromtx(1'b0),
	.pmatestbusin({8{1'b0}}),
	.powerdn({2{1'b0}}),
	.ppmdetectdividedclk(1'b0),
	.ppmdetectrefclk(1'b0),
	.rateswitch(1'b0),
	.rateswitchisdone(1'b0),
	.rxelecidlerateswitch(1'b0),
	.signaldetected(1'b0),
	.wareset(1'b0),
	.xauidelcondmet(1'b0),
	.xauififoovr(1'b0),
	.xauiinsertincomplete(1'b0),
	.xauilatencycomp(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		receive_pcs0.align_pattern = "0101111100",
		receive_pcs0.align_pattern_length = 10,
		receive_pcs0.align_to_deskew_pattern_pos_disp_only = "false",
		receive_pcs0.allow_align_polarity_inversion = "true",
		receive_pcs0.allow_pipe_polarity_inversion = "false",
		receive_pcs0.auto_spd_deassert_ph_fifo_rst_count = 8,
		receive_pcs0.auto_spd_phystatus_notify_count = 0,
		receive_pcs0.auto_spd_self_switch_enable = "false",
		receive_pcs0.bit_slip_enable = "false",
		receive_pcs0.byte_order_double_data_mode_mask_enable = "false",
		receive_pcs0.byte_order_mode = "none",
		receive_pcs0.byte_order_pad_pattern = "0",
		receive_pcs0.byte_order_pattern = "0",
		receive_pcs0.byte_order_pld_ctrl_enable = "false",
		receive_pcs0.cdrctrl_bypass_ppm_detector_cycle = 1000,
		receive_pcs0.cdrctrl_enable = "false",
		receive_pcs0.cdrctrl_mask_cycle = 800,
		receive_pcs0.cdrctrl_min_lock_to_ref_cycle = 63,
		receive_pcs0.cdrctrl_rxvalid_mask = "false",
		receive_pcs0.channel_bonding = "x4",
		receive_pcs0.channel_number = ((starting_channel_number + 0) % 4),
		receive_pcs0.channel_width = 16,
		receive_pcs0.clk1_mux_select = "master clock",
		receive_pcs0.clk2_mux_select = "digital reference clock",
		receive_pcs0.core_clock_0ppm = "true",
		receive_pcs0.datapath_low_latency_mode = "false",
		receive_pcs0.datapath_protocol = "xaui",
		receive_pcs0.dec_8b_10b_compatibility_mode = "true",
		receive_pcs0.dec_8b_10b_mode = "normal",
		receive_pcs0.dec_8b_10b_polarity_inv_enable = "false",
		receive_pcs0.deskew_pattern = "0011000011",
		receive_pcs0.disable_auto_idle_insertion = "true",
		receive_pcs0.disable_running_disp_in_word_align = "false",
		receive_pcs0.disallow_kchar_after_pattern_ordered_set = "false",
		receive_pcs0.dprio_config_mode = 6'h01,
		receive_pcs0.elec_idle_infer_enable = "false",
		receive_pcs0.elec_idle_num_com_detect = 3,
		receive_pcs0.enable_bit_reversal = "false",
		receive_pcs0.enable_deep_align = "false",
		receive_pcs0.enable_deep_align_byte_swap = "false",
		receive_pcs0.enable_self_test_mode = "false",
		receive_pcs0.enable_true_complement_match_in_word_align = "false",
		receive_pcs0.force_signal_detect_dig = "true",
		receive_pcs0.hip_enable = "false",
		receive_pcs0.infiniband_invalid_code = 0,
		receive_pcs0.insert_pad_on_underflow = "false",
		receive_pcs0.logical_channel_address = (starting_channel_number + 0),
		receive_pcs0.num_align_code_groups_in_ordered_set = 0,
		receive_pcs0.num_align_cons_good_data = 4,
		receive_pcs0.num_align_cons_pat = 4,
		receive_pcs0.num_align_loss_sync_error = 4,
		receive_pcs0.ph_fifo_low_latency_enable = "true",
		receive_pcs0.ph_fifo_reg_mode = "false",
		receive_pcs0.ph_fifo_xn_mapping0 = "none",
		receive_pcs0.ph_fifo_xn_mapping1 = "none",
		receive_pcs0.ph_fifo_xn_mapping2 = "central",
		receive_pcs0.ph_fifo_xn_select = 2,
		receive_pcs0.pipe_auto_speed_nego_enable = "false",
		receive_pcs0.pipe_freq_scale_mode = "Frequency",
		receive_pcs0.pma_done_count = 249950,
		receive_pcs0.protocol_hint = "xaui",
		receive_pcs0.rate_match_almost_empty_threshold = 11,
		receive_pcs0.rate_match_almost_full_threshold = 13,
		receive_pcs0.rate_match_back_to_back = "true",
		receive_pcs0.rate_match_delete_threshold = 13,
		receive_pcs0.rate_match_empty_threshold = 5,
		receive_pcs0.rate_match_fifo_mode = "true",
		receive_pcs0.rate_match_full_threshold = 20,
		receive_pcs0.rate_match_insert_threshold = 11,
		receive_pcs0.rate_match_ordered_set_based = "false",
		receive_pcs0.rate_match_pattern1 = "1101000011",
		receive_pcs0.rate_match_pattern2 = "0010111100",
		receive_pcs0.rate_match_pattern_size = 10,
		receive_pcs0.rate_match_reset_enable = "false",
		receive_pcs0.rate_match_skip_set_based = "false",
		receive_pcs0.rate_match_start_threshold = 7,
		receive_pcs0.rd_clk_mux_select = "core clock",
		receive_pcs0.recovered_clk_mux_select = "recovered clock",
		receive_pcs0.run_length = 40,
		receive_pcs0.run_length_enable = "true",
		receive_pcs0.rx_detect_bypass = "false",
		receive_pcs0.rx_phfifo_wait_cnt = 15,
		receive_pcs0.rxstatus_error_report_mode = 0,
		receive_pcs0.self_test_mode = "incremental",
		receive_pcs0.use_alignment_state_machine = "true",
		receive_pcs0.use_deserializer_double_data_mode = "false",
		receive_pcs0.use_deskew_fifo = "true",
		receive_pcs0.use_double_data_mode = "true",
		receive_pcs0.use_parallel_loopback = "false",
		receive_pcs0.use_rising_edge_triggered_pattern_align = "false",
		receive_pcs0.lpm_type = "stratixiv_hssi_rx_pcs";
	stratixiv_hssi_rx_pcs   receive_pcs1
	( 
	.a1a2size(1'b0),
	.a1a2sizeout(),
	.a1detect(),
	.a2detect(),
	.adetectdeskew(wire_receive_pcs1_adetectdeskew),
	.alignstatus(rx_channelaligned_in[0]),
	.alignstatussync(rx_alignstatussync[0]),
	.alignstatussyncout(wire_receive_pcs1_alignstatussyncout),
	.autospdrateswitchout(),
	.autospdspdchgout(),
	.bistdone(),
	.bisterr(),
	.bitslipboundaryselectout(),
	.byteorderalignstatus(),
	.cdrctrlearlyeios(),
	.cdrctrllocktorefcl((reconfig_togxb_busy | rx_locktorefclk[1])),
	.cdrctrllocktorefclkout(wire_receive_pcs1_cdrctrllocktorefclkout),
	.clkout(wire_receive_pcs1_clkout),
	.coreclk(rx_coreclk_in[1]),
	.coreclkout(wire_receive_pcs1_coreclkout),
	.ctrldetect(wire_receive_pcs1_ctrldetect),
	.datain(rx_pma_recoverdataout_wire[39:20]),
	.dataout(wire_receive_pcs1_dataout),
	.dataoutfull(),
	.digitalreset(rx_digitalreset_out[1]),
	.digitaltestout(),
	.disablefifordin(rx_disablefifordin_in[0]),
	.disablefifordout(wire_receive_pcs1_disablefifordout),
	.disablefifowrin(rx_disablefifowrin_in[0]),
	.disablefifowrout(wire_receive_pcs1_disablefifowrout),
	.disperr(wire_receive_pcs1_disperr),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(rx_pcsdprioin_wire[799:400]),
	.dprioout(wire_receive_pcs1_dprioout),
	.enabledeskew(enabledeskew[0]),
	.enabyteord(1'b0),
	.enapatternalign(rx_enapatternalign[1]),
	.errdetect(wire_receive_pcs1_errdetect),
	.fifordin(rx_fifordin_in[0]),
	.fifordout(wire_receive_pcs1_fifordout),
	.fiforesetrd(rx_fiforesetrd[0]),
	.hipdataout(),
	.hipdatavalid(),
	.hipelecidle(),
	.hipphydonestatus(),
	.hipstatus(),
	.invpol(rx_invpolarity[1]),
	.iqpphfifobyteselout(),
	.iqpphfifoptrsresetout(),
	.iqpphfifordenableout(),
	.iqpphfifowrclkout(),
	.iqpphfifowrenableout(),
	.k1detect(),
	.k2detect(),
	.localrefclk(1'b0),
	.masterclk(rx_masterclk[0]),
	.parallelfdbk({20{1'b0}}),
	.patterndetect(wire_receive_pcs1_patterndetect),
	.phfifobyteselout(),
	.phfifobyteserdisableout(wire_receive_pcs1_phfifobyteserdisableout),
	.phfifooverflow(wire_receive_pcs1_phfifooverflow),
	.phfifoptrsresetout(wire_receive_pcs1_phfifoptrsresetout),
	.phfifordenable(rx_phfifordenable[1]),
	.phfifordenableout(wire_receive_pcs1_phfifordenableout),
	.phfiforeset(rx_phfiforeset[1]),
	.phfiforesetout(wire_receive_pcs1_phfiforesetout),
	.phfifounderflow(wire_receive_pcs1_phfifounderflow),
	.phfifowrclkout(),
	.phfifowrdisable(rx_phfifowrdisable[1]),
	.phfifowrdisableout(wire_receive_pcs1_phfifowrdisableout),
	.phfifowrenableout(),
	.phfifoxnbytesel(int_rx_phfifoxnbytesel[5:3]),
	.phfifoxnrdenable(int_rx_phfifoxnrdenable[5:3]),
	.phfifoxnwrclk(int_rx_phfifoxnwrclk[5:3]),
	.phfifoxnwrenable(int_rx_phfifoxnwrenable[5:3]),
	.pipebufferstat(),
	.pipedatavalid(),
	.pipeelecidle(),
	.pipephydonestatus(),
	.pipepowerdown({2{1'b0}}),
	.pipepowerstate({4{1'b0}}),
	.pipestatetransdoneout(),
	.pipestatus(),
	.prbscidenable(rx_prbscidenable[1]),
	.quadreset(cent_unit_quadresetout[0]),
	.rateswitchout(wire_receive_pcs1_rateswitchout),
	.rateswitchxndone(int_hiprateswtichdone[0]),
	.rdalign(wire_receive_pcs1_rdalign),
	.recoveredclk(rx_pma_clockout[1]),
	.refclk(refclk_pma[0]),
	.revbitorderwa(1'b0),
	.revbyteorderwa(1'b0),
	.revparallelfdbkdata(),
	.rlv(wire_receive_pcs1_rlv),
	.rmfifoalmostempty(),
	.rmfifoalmostfull(),
	.rmfifodatadeleted(wire_receive_pcs1_rmfifodatadeleted),
	.rmfifodatainserted(wire_receive_pcs1_rmfifodatainserted),
	.rmfifoempty(wire_receive_pcs1_rmfifoempty),
	.rmfifofull(wire_receive_pcs1_rmfifofull),
	.rmfifordena(1'b0),
	.rmfiforeset(rx_rmfiforeset[1]),
	.rmfifowrena(1'b0),
	.runningdisp(wire_receive_pcs1_runningdisp),
	.rxdetectvalid(1'b0),
	.rxfound({2{1'b0}}),
	.signaldetect(),
	.syncstatus(wire_receive_pcs1_syncstatus),
	.syncstatusdeskew(wire_receive_pcs1_syncstatusdeskew),
	.xauidelcondmetout(),
	.xauififoovrout(),
	.xauiinsertincompleteout(),
	.xauilatencycompout(),
	.xgmctrldet(wire_receive_pcs1_xgmctrldet),
	.xgmctrlin(rx_xgmctrlin[1]),
	.xgmdatain(cent_unit_rx_xgmdataout[15:8]),
	.xgmdataout(wire_receive_pcs1_xgmdataout),
	.xgmdatavalid(wire_receive_pcs1_xgmdatavalid),
	.xgmrunningdisp(wire_receive_pcs1_xgmrunningdisp)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.autospdxnconfigsel({3{1'b0}}),
	.autospdxnspdchg({3{1'b0}}),
	.bitslip(1'b0),
	.elecidleinfersel({3{1'b0}}),
	.grayelecidleinferselfromtx({3{1'b0}}),
	.hip8b10binvpolarity(1'b0),
	.hipelecidleinfersel({3{1'b0}}),
	.hippowerdown({2{1'b0}}),
	.hiprateswitch(1'b0),
	.iqpautospdxnspgchg({2{1'b0}}),
	.iqpphfifoxnbytesel({2{1'b0}}),
	.iqpphfifoxnptrsreset({2{1'b0}}),
	.iqpphfifoxnrdenable({2{1'b0}}),
	.iqpphfifoxnwrclk({2{1'b0}}),
	.iqpphfifoxnwrenable({2{1'b0}}),
	.phfifox4bytesel(1'b0),
	.phfifox4rdenable(1'b0),
	.phfifox4wrclk(1'b0),
	.phfifox4wrenable(1'b0),
	.phfifox8bytesel(1'b0),
	.phfifox8rdenable(1'b0),
	.phfifox8wrclk(1'b0),
	.phfifox8wrenable(1'b0),
	.phfifoxnptrsreset({3{1'b0}}),
	.pipe8b10binvpolarity(1'b0),
	.pipeenrevparallellpbkfromtx(1'b0),
	.pmatestbusin({8{1'b0}}),
	.powerdn({2{1'b0}}),
	.ppmdetectdividedclk(1'b0),
	.ppmdetectrefclk(1'b0),
	.rateswitch(1'b0),
	.rateswitchisdone(1'b0),
	.rxelecidlerateswitch(1'b0),
	.signaldetected(1'b0),
	.wareset(1'b0),
	.xauidelcondmet(1'b0),
	.xauififoovr(1'b0),
	.xauiinsertincomplete(1'b0),
	.xauilatencycomp(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		receive_pcs1.align_pattern = "0101111100",
		receive_pcs1.align_pattern_length = 10,
		receive_pcs1.align_to_deskew_pattern_pos_disp_only = "false",
		receive_pcs1.allow_align_polarity_inversion = "true",
		receive_pcs1.allow_pipe_polarity_inversion = "false",
		receive_pcs1.auto_spd_deassert_ph_fifo_rst_count = 8,
		receive_pcs1.auto_spd_phystatus_notify_count = 0,
		receive_pcs1.auto_spd_self_switch_enable = "false",
		receive_pcs1.bit_slip_enable = "false",
		receive_pcs1.byte_order_double_data_mode_mask_enable = "false",
		receive_pcs1.byte_order_mode = "none",
		receive_pcs1.byte_order_pad_pattern = "0",
		receive_pcs1.byte_order_pattern = "0",
		receive_pcs1.byte_order_pld_ctrl_enable = "false",
		receive_pcs1.cdrctrl_bypass_ppm_detector_cycle = 1000,
		receive_pcs1.cdrctrl_enable = "false",
		receive_pcs1.cdrctrl_mask_cycle = 800,
		receive_pcs1.cdrctrl_min_lock_to_ref_cycle = 63,
		receive_pcs1.cdrctrl_rxvalid_mask = "false",
		receive_pcs1.channel_bonding = "x4",
		receive_pcs1.channel_number = ((starting_channel_number + 1) % 4),
		receive_pcs1.channel_width = 16,
		receive_pcs1.clk1_mux_select = "master clock",
		receive_pcs1.clk2_mux_select = "digital reference clock",
		receive_pcs1.core_clock_0ppm = "true",
		receive_pcs1.datapath_low_latency_mode = "false",
		receive_pcs1.datapath_protocol = "xaui",
		receive_pcs1.dec_8b_10b_compatibility_mode = "true",
		receive_pcs1.dec_8b_10b_mode = "normal",
		receive_pcs1.dec_8b_10b_polarity_inv_enable = "false",
		receive_pcs1.deskew_pattern = "0011000011",
		receive_pcs1.disable_auto_idle_insertion = "true",
		receive_pcs1.disable_running_disp_in_word_align = "false",
		receive_pcs1.disallow_kchar_after_pattern_ordered_set = "false",
		receive_pcs1.dprio_config_mode = 6'h01,
		receive_pcs1.elec_idle_infer_enable = "false",
		receive_pcs1.elec_idle_num_com_detect = 3,
		receive_pcs1.enable_bit_reversal = "false",
		receive_pcs1.enable_deep_align = "false",
		receive_pcs1.enable_deep_align_byte_swap = "false",
		receive_pcs1.enable_self_test_mode = "false",
		receive_pcs1.enable_true_complement_match_in_word_align = "false",
		receive_pcs1.force_signal_detect_dig = "true",
		receive_pcs1.hip_enable = "false",
		receive_pcs1.infiniband_invalid_code = 0,
		receive_pcs1.insert_pad_on_underflow = "false",
		receive_pcs1.logical_channel_address = (starting_channel_number + 1),
		receive_pcs1.num_align_code_groups_in_ordered_set = 0,
		receive_pcs1.num_align_cons_good_data = 4,
		receive_pcs1.num_align_cons_pat = 4,
		receive_pcs1.num_align_loss_sync_error = 4,
		receive_pcs1.ph_fifo_low_latency_enable = "true",
		receive_pcs1.ph_fifo_reg_mode = "false",
		receive_pcs1.ph_fifo_xn_mapping0 = "none",
		receive_pcs1.ph_fifo_xn_mapping1 = "none",
		receive_pcs1.ph_fifo_xn_mapping2 = "central",
		receive_pcs1.ph_fifo_xn_select = 2,
		receive_pcs1.pipe_auto_speed_nego_enable = "false",
		receive_pcs1.pipe_freq_scale_mode = "Frequency",
		receive_pcs1.pma_done_count = 249950,
		receive_pcs1.protocol_hint = "xaui",
		receive_pcs1.rate_match_almost_empty_threshold = 11,
		receive_pcs1.rate_match_almost_full_threshold = 13,
		receive_pcs1.rate_match_back_to_back = "true",
		receive_pcs1.rate_match_delete_threshold = 13,
		receive_pcs1.rate_match_empty_threshold = 5,
		receive_pcs1.rate_match_fifo_mode = "true",
		receive_pcs1.rate_match_full_threshold = 20,
		receive_pcs1.rate_match_insert_threshold = 11,
		receive_pcs1.rate_match_ordered_set_based = "false",
		receive_pcs1.rate_match_pattern1 = "1101000011",
		receive_pcs1.rate_match_pattern2 = "0010111100",
		receive_pcs1.rate_match_pattern_size = 10,
		receive_pcs1.rate_match_reset_enable = "false",
		receive_pcs1.rate_match_skip_set_based = "false",
		receive_pcs1.rate_match_start_threshold = 7,
		receive_pcs1.rd_clk_mux_select = "core clock",
		receive_pcs1.recovered_clk_mux_select = "recovered clock",
		receive_pcs1.run_length = 40,
		receive_pcs1.run_length_enable = "true",
		receive_pcs1.rx_detect_bypass = "false",
		receive_pcs1.rx_phfifo_wait_cnt = 15,
		receive_pcs1.rxstatus_error_report_mode = 0,
		receive_pcs1.self_test_mode = "incremental",
		receive_pcs1.use_alignment_state_machine = "true",
		receive_pcs1.use_deserializer_double_data_mode = "false",
		receive_pcs1.use_deskew_fifo = "true",
		receive_pcs1.use_double_data_mode = "true",
		receive_pcs1.use_parallel_loopback = "false",
		receive_pcs1.use_rising_edge_triggered_pattern_align = "false",
		receive_pcs1.lpm_type = "stratixiv_hssi_rx_pcs";
	stratixiv_hssi_rx_pcs   receive_pcs2
	( 
	.a1a2size(1'b0),
	.a1a2sizeout(),
	.a1detect(),
	.a2detect(),
	.adetectdeskew(wire_receive_pcs2_adetectdeskew),
	.alignstatus(rx_channelaligned_in[0]),
	.alignstatussync(rx_alignstatussync[0]),
	.alignstatussyncout(wire_receive_pcs2_alignstatussyncout),
	.autospdrateswitchout(),
	.autospdspdchgout(),
	.bistdone(),
	.bisterr(),
	.bitslipboundaryselectout(),
	.byteorderalignstatus(),
	.cdrctrlearlyeios(),
	.cdrctrllocktorefcl((reconfig_togxb_busy | rx_locktorefclk[2])),
	.cdrctrllocktorefclkout(wire_receive_pcs2_cdrctrllocktorefclkout),
	.clkout(wire_receive_pcs2_clkout),
	.coreclk(rx_coreclk_in[2]),
	.coreclkout(wire_receive_pcs2_coreclkout),
	.ctrldetect(wire_receive_pcs2_ctrldetect),
	.datain(rx_pma_recoverdataout_wire[59:40]),
	.dataout(wire_receive_pcs2_dataout),
	.dataoutfull(),
	.digitalreset(rx_digitalreset_out[2]),
	.digitaltestout(),
	.disablefifordin(rx_disablefifordin_in[0]),
	.disablefifordout(wire_receive_pcs2_disablefifordout),
	.disablefifowrin(rx_disablefifowrin_in[0]),
	.disablefifowrout(wire_receive_pcs2_disablefifowrout),
	.disperr(wire_receive_pcs2_disperr),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(rx_pcsdprioin_wire[1199:800]),
	.dprioout(wire_receive_pcs2_dprioout),
	.enabledeskew(enabledeskew[0]),
	.enabyteord(1'b0),
	.enapatternalign(rx_enapatternalign[2]),
	.errdetect(wire_receive_pcs2_errdetect),
	.fifordin(rx_fifordin_in[0]),
	.fifordout(wire_receive_pcs2_fifordout),
	.fiforesetrd(rx_fiforesetrd[0]),
	.hipdataout(),
	.hipdatavalid(),
	.hipelecidle(),
	.hipphydonestatus(),
	.hipstatus(),
	.invpol(rx_invpolarity[2]),
	.iqpphfifobyteselout(),
	.iqpphfifoptrsresetout(),
	.iqpphfifordenableout(),
	.iqpphfifowrclkout(),
	.iqpphfifowrenableout(),
	.k1detect(),
	.k2detect(),
	.localrefclk(1'b0),
	.masterclk(rx_masterclk[0]),
	.parallelfdbk({20{1'b0}}),
	.patterndetect(wire_receive_pcs2_patterndetect),
	.phfifobyteselout(),
	.phfifobyteserdisableout(wire_receive_pcs2_phfifobyteserdisableout),
	.phfifooverflow(wire_receive_pcs2_phfifooverflow),
	.phfifoptrsresetout(wire_receive_pcs2_phfifoptrsresetout),
	.phfifordenable(rx_phfifordenable[2]),
	.phfifordenableout(wire_receive_pcs2_phfifordenableout),
	.phfiforeset(rx_phfiforeset[2]),
	.phfiforesetout(wire_receive_pcs2_phfiforesetout),
	.phfifounderflow(wire_receive_pcs2_phfifounderflow),
	.phfifowrclkout(),
	.phfifowrdisable(rx_phfifowrdisable[2]),
	.phfifowrdisableout(wire_receive_pcs2_phfifowrdisableout),
	.phfifowrenableout(),
	.phfifoxnbytesel(int_rx_phfifoxnbytesel[8:6]),
	.phfifoxnrdenable(int_rx_phfifoxnrdenable[8:6]),
	.phfifoxnwrclk(int_rx_phfifoxnwrclk[8:6]),
	.phfifoxnwrenable(int_rx_phfifoxnwrenable[8:6]),
	.pipebufferstat(),
	.pipedatavalid(),
	.pipeelecidle(),
	.pipephydonestatus(),
	.pipepowerdown({2{1'b0}}),
	.pipepowerstate({4{1'b0}}),
	.pipestatetransdoneout(),
	.pipestatus(),
	.prbscidenable(rx_prbscidenable[2]),
	.quadreset(cent_unit_quadresetout[0]),
	.rateswitchout(wire_receive_pcs2_rateswitchout),
	.rateswitchxndone(int_hiprateswtichdone[0]),
	.rdalign(wire_receive_pcs2_rdalign),
	.recoveredclk(rx_pma_clockout[2]),
	.refclk(refclk_pma[0]),
	.revbitorderwa(1'b0),
	.revbyteorderwa(1'b0),
	.revparallelfdbkdata(),
	.rlv(wire_receive_pcs2_rlv),
	.rmfifoalmostempty(),
	.rmfifoalmostfull(),
	.rmfifodatadeleted(wire_receive_pcs2_rmfifodatadeleted),
	.rmfifodatainserted(wire_receive_pcs2_rmfifodatainserted),
	.rmfifoempty(wire_receive_pcs2_rmfifoempty),
	.rmfifofull(wire_receive_pcs2_rmfifofull),
	.rmfifordena(1'b0),
	.rmfiforeset(rx_rmfiforeset[2]),
	.rmfifowrena(1'b0),
	.runningdisp(wire_receive_pcs2_runningdisp),
	.rxdetectvalid(1'b0),
	.rxfound({2{1'b0}}),
	.signaldetect(),
	.syncstatus(wire_receive_pcs2_syncstatus),
	.syncstatusdeskew(wire_receive_pcs2_syncstatusdeskew),
	.xauidelcondmetout(),
	.xauififoovrout(),
	.xauiinsertincompleteout(),
	.xauilatencycompout(),
	.xgmctrldet(wire_receive_pcs2_xgmctrldet),
	.xgmctrlin(rx_xgmctrlin[2]),
	.xgmdatain(cent_unit_rx_xgmdataout[23:16]),
	.xgmdataout(wire_receive_pcs2_xgmdataout),
	.xgmdatavalid(wire_receive_pcs2_xgmdatavalid),
	.xgmrunningdisp(wire_receive_pcs2_xgmrunningdisp)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.autospdxnconfigsel({3{1'b0}}),
	.autospdxnspdchg({3{1'b0}}),
	.bitslip(1'b0),
	.elecidleinfersel({3{1'b0}}),
	.grayelecidleinferselfromtx({3{1'b0}}),
	.hip8b10binvpolarity(1'b0),
	.hipelecidleinfersel({3{1'b0}}),
	.hippowerdown({2{1'b0}}),
	.hiprateswitch(1'b0),
	.iqpautospdxnspgchg({2{1'b0}}),
	.iqpphfifoxnbytesel({2{1'b0}}),
	.iqpphfifoxnptrsreset({2{1'b0}}),
	.iqpphfifoxnrdenable({2{1'b0}}),
	.iqpphfifoxnwrclk({2{1'b0}}),
	.iqpphfifoxnwrenable({2{1'b0}}),
	.phfifox4bytesel(1'b0),
	.phfifox4rdenable(1'b0),
	.phfifox4wrclk(1'b0),
	.phfifox4wrenable(1'b0),
	.phfifox8bytesel(1'b0),
	.phfifox8rdenable(1'b0),
	.phfifox8wrclk(1'b0),
	.phfifox8wrenable(1'b0),
	.phfifoxnptrsreset({3{1'b0}}),
	.pipe8b10binvpolarity(1'b0),
	.pipeenrevparallellpbkfromtx(1'b0),
	.pmatestbusin({8{1'b0}}),
	.powerdn({2{1'b0}}),
	.ppmdetectdividedclk(1'b0),
	.ppmdetectrefclk(1'b0),
	.rateswitch(1'b0),
	.rateswitchisdone(1'b0),
	.rxelecidlerateswitch(1'b0),
	.signaldetected(1'b0),
	.wareset(1'b0),
	.xauidelcondmet(1'b0),
	.xauififoovr(1'b0),
	.xauiinsertincomplete(1'b0),
	.xauilatencycomp(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		receive_pcs2.align_pattern = "0101111100",
		receive_pcs2.align_pattern_length = 10,
		receive_pcs2.align_to_deskew_pattern_pos_disp_only = "false",
		receive_pcs2.allow_align_polarity_inversion = "true",
		receive_pcs2.allow_pipe_polarity_inversion = "false",
		receive_pcs2.auto_spd_deassert_ph_fifo_rst_count = 8,
		receive_pcs2.auto_spd_phystatus_notify_count = 0,
		receive_pcs2.auto_spd_self_switch_enable = "false",
		receive_pcs2.bit_slip_enable = "false",
		receive_pcs2.byte_order_double_data_mode_mask_enable = "false",
		receive_pcs2.byte_order_mode = "none",
		receive_pcs2.byte_order_pad_pattern = "0",
		receive_pcs2.byte_order_pattern = "0",
		receive_pcs2.byte_order_pld_ctrl_enable = "false",
		receive_pcs2.cdrctrl_bypass_ppm_detector_cycle = 1000,
		receive_pcs2.cdrctrl_enable = "false",
		receive_pcs2.cdrctrl_mask_cycle = 800,
		receive_pcs2.cdrctrl_min_lock_to_ref_cycle = 63,
		receive_pcs2.cdrctrl_rxvalid_mask = "false",
		receive_pcs2.channel_bonding = "x4",
		receive_pcs2.channel_number = ((starting_channel_number + 2) % 4),
		receive_pcs2.channel_width = 16,
		receive_pcs2.clk1_mux_select = "master clock",
		receive_pcs2.clk2_mux_select = "digital reference clock",
		receive_pcs2.core_clock_0ppm = "true",
		receive_pcs2.datapath_low_latency_mode = "false",
		receive_pcs2.datapath_protocol = "xaui",
		receive_pcs2.dec_8b_10b_compatibility_mode = "true",
		receive_pcs2.dec_8b_10b_mode = "normal",
		receive_pcs2.dec_8b_10b_polarity_inv_enable = "false",
		receive_pcs2.deskew_pattern = "0011000011",
		receive_pcs2.disable_auto_idle_insertion = "true",
		receive_pcs2.disable_running_disp_in_word_align = "false",
		receive_pcs2.disallow_kchar_after_pattern_ordered_set = "false",
		receive_pcs2.dprio_config_mode = 6'h01,
		receive_pcs2.elec_idle_infer_enable = "false",
		receive_pcs2.elec_idle_num_com_detect = 3,
		receive_pcs2.enable_bit_reversal = "false",
		receive_pcs2.enable_deep_align = "false",
		receive_pcs2.enable_deep_align_byte_swap = "false",
		receive_pcs2.enable_self_test_mode = "false",
		receive_pcs2.enable_true_complement_match_in_word_align = "false",
		receive_pcs2.force_signal_detect_dig = "true",
		receive_pcs2.hip_enable = "false",
		receive_pcs2.infiniband_invalid_code = 0,
		receive_pcs2.insert_pad_on_underflow = "false",
		receive_pcs2.logical_channel_address = (starting_channel_number + 2),
		receive_pcs2.num_align_code_groups_in_ordered_set = 0,
		receive_pcs2.num_align_cons_good_data = 4,
		receive_pcs2.num_align_cons_pat = 4,
		receive_pcs2.num_align_loss_sync_error = 4,
		receive_pcs2.ph_fifo_low_latency_enable = "true",
		receive_pcs2.ph_fifo_reg_mode = "false",
		receive_pcs2.ph_fifo_xn_mapping0 = "none",
		receive_pcs2.ph_fifo_xn_mapping1 = "none",
		receive_pcs2.ph_fifo_xn_mapping2 = "central",
		receive_pcs2.ph_fifo_xn_select = 2,
		receive_pcs2.pipe_auto_speed_nego_enable = "false",
		receive_pcs2.pipe_freq_scale_mode = "Frequency",
		receive_pcs2.pma_done_count = 249950,
		receive_pcs2.protocol_hint = "xaui",
		receive_pcs2.rate_match_almost_empty_threshold = 11,
		receive_pcs2.rate_match_almost_full_threshold = 13,
		receive_pcs2.rate_match_back_to_back = "true",
		receive_pcs2.rate_match_delete_threshold = 13,
		receive_pcs2.rate_match_empty_threshold = 5,
		receive_pcs2.rate_match_fifo_mode = "true",
		receive_pcs2.rate_match_full_threshold = 20,
		receive_pcs2.rate_match_insert_threshold = 11,
		receive_pcs2.rate_match_ordered_set_based = "false",
		receive_pcs2.rate_match_pattern1 = "1101000011",
		receive_pcs2.rate_match_pattern2 = "0010111100",
		receive_pcs2.rate_match_pattern_size = 10,
		receive_pcs2.rate_match_reset_enable = "false",
		receive_pcs2.rate_match_skip_set_based = "false",
		receive_pcs2.rate_match_start_threshold = 7,
		receive_pcs2.rd_clk_mux_select = "core clock",
		receive_pcs2.recovered_clk_mux_select = "recovered clock",
		receive_pcs2.run_length = 40,
		receive_pcs2.run_length_enable = "true",
		receive_pcs2.rx_detect_bypass = "false",
		receive_pcs2.rx_phfifo_wait_cnt = 15,
		receive_pcs2.rxstatus_error_report_mode = 0,
		receive_pcs2.self_test_mode = "incremental",
		receive_pcs2.use_alignment_state_machine = "true",
		receive_pcs2.use_deserializer_double_data_mode = "false",
		receive_pcs2.use_deskew_fifo = "true",
		receive_pcs2.use_double_data_mode = "true",
		receive_pcs2.use_parallel_loopback = "false",
		receive_pcs2.use_rising_edge_triggered_pattern_align = "false",
		receive_pcs2.lpm_type = "stratixiv_hssi_rx_pcs";
	stratixiv_hssi_rx_pcs   receive_pcs3
	( 
	.a1a2size(1'b0),
	.a1a2sizeout(),
	.a1detect(),
	.a2detect(),
	.adetectdeskew(wire_receive_pcs3_adetectdeskew),
	.alignstatus(rx_channelaligned_in[0]),
	.alignstatussync(rx_alignstatussync[0]),
	.alignstatussyncout(wire_receive_pcs3_alignstatussyncout),
	.autospdrateswitchout(),
	.autospdspdchgout(),
	.bistdone(),
	.bisterr(),
	.bitslipboundaryselectout(),
	.byteorderalignstatus(),
	.cdrctrlearlyeios(),
	.cdrctrllocktorefcl((reconfig_togxb_busy | rx_locktorefclk[3])),
	.cdrctrllocktorefclkout(wire_receive_pcs3_cdrctrllocktorefclkout),
	.clkout(wire_receive_pcs3_clkout),
	.coreclk(rx_coreclk_in[3]),
	.coreclkout(wire_receive_pcs3_coreclkout),
	.ctrldetect(wire_receive_pcs3_ctrldetect),
	.datain(rx_pma_recoverdataout_wire[79:60]),
	.dataout(wire_receive_pcs3_dataout),
	.dataoutfull(),
	.digitalreset(rx_digitalreset_out[3]),
	.digitaltestout(),
	.disablefifordin(rx_disablefifordin_in[0]),
	.disablefifordout(wire_receive_pcs3_disablefifordout),
	.disablefifowrin(rx_disablefifowrin_in[0]),
	.disablefifowrout(wire_receive_pcs3_disablefifowrout),
	.disperr(wire_receive_pcs3_disperr),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(rx_pcsdprioin_wire[1599:1200]),
	.dprioout(wire_receive_pcs3_dprioout),
	.enabledeskew(enabledeskew[0]),
	.enabyteord(1'b0),
	.enapatternalign(rx_enapatternalign[3]),
	.errdetect(wire_receive_pcs3_errdetect),
	.fifordin(rx_fifordin_in[0]),
	.fifordout(wire_receive_pcs3_fifordout),
	.fiforesetrd(rx_fiforesetrd[0]),
	.hipdataout(),
	.hipdatavalid(),
	.hipelecidle(),
	.hipphydonestatus(),
	.hipstatus(),
	.invpol(rx_invpolarity[3]),
	.iqpphfifobyteselout(),
	.iqpphfifoptrsresetout(),
	.iqpphfifordenableout(),
	.iqpphfifowrclkout(),
	.iqpphfifowrenableout(),
	.k1detect(),
	.k2detect(),
	.localrefclk(1'b0),
	.masterclk(rx_masterclk[0]),
	.parallelfdbk({20{1'b0}}),
	.patterndetect(wire_receive_pcs3_patterndetect),
	.phfifobyteselout(),
	.phfifobyteserdisableout(wire_receive_pcs3_phfifobyteserdisableout),
	.phfifooverflow(wire_receive_pcs3_phfifooverflow),
	.phfifoptrsresetout(wire_receive_pcs3_phfifoptrsresetout),
	.phfifordenable(rx_phfifordenable[3]),
	.phfifordenableout(wire_receive_pcs3_phfifordenableout),
	.phfiforeset(rx_phfiforeset[3]),
	.phfiforesetout(wire_receive_pcs3_phfiforesetout),
	.phfifounderflow(wire_receive_pcs3_phfifounderflow),
	.phfifowrclkout(),
	.phfifowrdisable(rx_phfifowrdisable[3]),
	.phfifowrdisableout(wire_receive_pcs3_phfifowrdisableout),
	.phfifowrenableout(),
	.phfifoxnbytesel(int_rx_phfifoxnbytesel[11:9]),
	.phfifoxnrdenable(int_rx_phfifoxnrdenable[11:9]),
	.phfifoxnwrclk(int_rx_phfifoxnwrclk[11:9]),
	.phfifoxnwrenable(int_rx_phfifoxnwrenable[11:9]),
	.pipebufferstat(),
	.pipedatavalid(),
	.pipeelecidle(),
	.pipephydonestatus(),
	.pipepowerdown({2{1'b0}}),
	.pipepowerstate({4{1'b0}}),
	.pipestatetransdoneout(),
	.pipestatus(),
	.prbscidenable(rx_prbscidenable[3]),
	.quadreset(cent_unit_quadresetout[0]),
	.rateswitchout(wire_receive_pcs3_rateswitchout),
	.rateswitchxndone(int_hiprateswtichdone[0]),
	.rdalign(wire_receive_pcs3_rdalign),
	.recoveredclk(rx_pma_clockout[3]),
	.refclk(refclk_pma[0]),
	.revbitorderwa(1'b0),
	.revbyteorderwa(1'b0),
	.revparallelfdbkdata(),
	.rlv(wire_receive_pcs3_rlv),
	.rmfifoalmostempty(),
	.rmfifoalmostfull(),
	.rmfifodatadeleted(wire_receive_pcs3_rmfifodatadeleted),
	.rmfifodatainserted(wire_receive_pcs3_rmfifodatainserted),
	.rmfifoempty(wire_receive_pcs3_rmfifoempty),
	.rmfifofull(wire_receive_pcs3_rmfifofull),
	.rmfifordena(1'b0),
	.rmfiforeset(rx_rmfiforeset[3]),
	.rmfifowrena(1'b0),
	.runningdisp(wire_receive_pcs3_runningdisp),
	.rxdetectvalid(1'b0),
	.rxfound({2{1'b0}}),
	.signaldetect(),
	.syncstatus(wire_receive_pcs3_syncstatus),
	.syncstatusdeskew(wire_receive_pcs3_syncstatusdeskew),
	.xauidelcondmetout(),
	.xauififoovrout(),
	.xauiinsertincompleteout(),
	.xauilatencycompout(),
	.xgmctrldet(wire_receive_pcs3_xgmctrldet),
	.xgmctrlin(rx_xgmctrlin[3]),
	.xgmdatain(cent_unit_rx_xgmdataout[31:24]),
	.xgmdataout(wire_receive_pcs3_xgmdataout),
	.xgmdatavalid(wire_receive_pcs3_xgmdatavalid),
	.xgmrunningdisp(wire_receive_pcs3_xgmrunningdisp)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.autospdxnconfigsel({3{1'b0}}),
	.autospdxnspdchg({3{1'b0}}),
	.bitslip(1'b0),
	.elecidleinfersel({3{1'b0}}),
	.grayelecidleinferselfromtx({3{1'b0}}),
	.hip8b10binvpolarity(1'b0),
	.hipelecidleinfersel({3{1'b0}}),
	.hippowerdown({2{1'b0}}),
	.hiprateswitch(1'b0),
	.iqpautospdxnspgchg({2{1'b0}}),
	.iqpphfifoxnbytesel({2{1'b0}}),
	.iqpphfifoxnptrsreset({2{1'b0}}),
	.iqpphfifoxnrdenable({2{1'b0}}),
	.iqpphfifoxnwrclk({2{1'b0}}),
	.iqpphfifoxnwrenable({2{1'b0}}),
	.phfifox4bytesel(1'b0),
	.phfifox4rdenable(1'b0),
	.phfifox4wrclk(1'b0),
	.phfifox4wrenable(1'b0),
	.phfifox8bytesel(1'b0),
	.phfifox8rdenable(1'b0),
	.phfifox8wrclk(1'b0),
	.phfifox8wrenable(1'b0),
	.phfifoxnptrsreset({3{1'b0}}),
	.pipe8b10binvpolarity(1'b0),
	.pipeenrevparallellpbkfromtx(1'b0),
	.pmatestbusin({8{1'b0}}),
	.powerdn({2{1'b0}}),
	.ppmdetectdividedclk(1'b0),
	.ppmdetectrefclk(1'b0),
	.rateswitch(1'b0),
	.rateswitchisdone(1'b0),
	.rxelecidlerateswitch(1'b0),
	.signaldetected(1'b0),
	.wareset(1'b0),
	.xauidelcondmet(1'b0),
	.xauififoovr(1'b0),
	.xauiinsertincomplete(1'b0),
	.xauilatencycomp(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		receive_pcs3.align_pattern = "0101111100",
		receive_pcs3.align_pattern_length = 10,
		receive_pcs3.align_to_deskew_pattern_pos_disp_only = "false",
		receive_pcs3.allow_align_polarity_inversion = "true",
		receive_pcs3.allow_pipe_polarity_inversion = "false",
		receive_pcs3.auto_spd_deassert_ph_fifo_rst_count = 8,
		receive_pcs3.auto_spd_phystatus_notify_count = 0,
		receive_pcs3.auto_spd_self_switch_enable = "false",
		receive_pcs3.bit_slip_enable = "false",
		receive_pcs3.byte_order_double_data_mode_mask_enable = "false",
		receive_pcs3.byte_order_mode = "none",
		receive_pcs3.byte_order_pad_pattern = "0",
		receive_pcs3.byte_order_pattern = "0",
		receive_pcs3.byte_order_pld_ctrl_enable = "false",
		receive_pcs3.cdrctrl_bypass_ppm_detector_cycle = 1000,
		receive_pcs3.cdrctrl_enable = "false",
		receive_pcs3.cdrctrl_mask_cycle = 800,
		receive_pcs3.cdrctrl_min_lock_to_ref_cycle = 63,
		receive_pcs3.cdrctrl_rxvalid_mask = "false",
		receive_pcs3.channel_bonding = "x4",
		receive_pcs3.channel_number = ((starting_channel_number + 3) % 4),
		receive_pcs3.channel_width = 16,
		receive_pcs3.clk1_mux_select = "master clock",
		receive_pcs3.clk2_mux_select = "digital reference clock",
		receive_pcs3.core_clock_0ppm = "true",
		receive_pcs3.datapath_low_latency_mode = "false",
		receive_pcs3.datapath_protocol = "xaui",
		receive_pcs3.dec_8b_10b_compatibility_mode = "true",
		receive_pcs3.dec_8b_10b_mode = "normal",
		receive_pcs3.dec_8b_10b_polarity_inv_enable = "false",
		receive_pcs3.deskew_pattern = "0011000011",
		receive_pcs3.disable_auto_idle_insertion = "true",
		receive_pcs3.disable_running_disp_in_word_align = "false",
		receive_pcs3.disallow_kchar_after_pattern_ordered_set = "false",
		receive_pcs3.dprio_config_mode = 6'h01,
		receive_pcs3.elec_idle_infer_enable = "false",
		receive_pcs3.elec_idle_num_com_detect = 3,
		receive_pcs3.enable_bit_reversal = "false",
		receive_pcs3.enable_deep_align = "false",
		receive_pcs3.enable_deep_align_byte_swap = "false",
		receive_pcs3.enable_self_test_mode = "false",
		receive_pcs3.enable_true_complement_match_in_word_align = "false",
		receive_pcs3.force_signal_detect_dig = "true",
		receive_pcs3.hip_enable = "false",
		receive_pcs3.infiniband_invalid_code = 0,
		receive_pcs3.insert_pad_on_underflow = "false",
		receive_pcs3.logical_channel_address = (starting_channel_number + 3),
		receive_pcs3.num_align_code_groups_in_ordered_set = 0,
		receive_pcs3.num_align_cons_good_data = 4,
		receive_pcs3.num_align_cons_pat = 4,
		receive_pcs3.num_align_loss_sync_error = 4,
		receive_pcs3.ph_fifo_low_latency_enable = "true",
		receive_pcs3.ph_fifo_reg_mode = "false",
		receive_pcs3.ph_fifo_xn_mapping0 = "none",
		receive_pcs3.ph_fifo_xn_mapping1 = "none",
		receive_pcs3.ph_fifo_xn_mapping2 = "central",
		receive_pcs3.ph_fifo_xn_select = 2,
		receive_pcs3.pipe_auto_speed_nego_enable = "false",
		receive_pcs3.pipe_freq_scale_mode = "Frequency",
		receive_pcs3.pma_done_count = 249950,
		receive_pcs3.protocol_hint = "xaui",
		receive_pcs3.rate_match_almost_empty_threshold = 11,
		receive_pcs3.rate_match_almost_full_threshold = 13,
		receive_pcs3.rate_match_back_to_back = "true",
		receive_pcs3.rate_match_delete_threshold = 13,
		receive_pcs3.rate_match_empty_threshold = 5,
		receive_pcs3.rate_match_fifo_mode = "true",
		receive_pcs3.rate_match_full_threshold = 20,
		receive_pcs3.rate_match_insert_threshold = 11,
		receive_pcs3.rate_match_ordered_set_based = "false",
		receive_pcs3.rate_match_pattern1 = "1101000011",
		receive_pcs3.rate_match_pattern2 = "0010111100",
		receive_pcs3.rate_match_pattern_size = 10,
		receive_pcs3.rate_match_reset_enable = "false",
		receive_pcs3.rate_match_skip_set_based = "false",
		receive_pcs3.rate_match_start_threshold = 7,
		receive_pcs3.rd_clk_mux_select = "core clock",
		receive_pcs3.recovered_clk_mux_select = "recovered clock",
		receive_pcs3.run_length = 40,
		receive_pcs3.run_length_enable = "true",
		receive_pcs3.rx_detect_bypass = "false",
		receive_pcs3.rx_phfifo_wait_cnt = 15,
		receive_pcs3.rxstatus_error_report_mode = 0,
		receive_pcs3.self_test_mode = "incremental",
		receive_pcs3.use_alignment_state_machine = "true",
		receive_pcs3.use_deserializer_double_data_mode = "false",
		receive_pcs3.use_deskew_fifo = "true",
		receive_pcs3.use_double_data_mode = "true",
		receive_pcs3.use_parallel_loopback = "false",
		receive_pcs3.use_rising_edge_triggered_pattern_align = "false",
		receive_pcs3.lpm_type = "stratixiv_hssi_rx_pcs";
	stratixiv_hssi_rx_pma   receive_pma0
	( 
	.adaptdone(),
	.analogtestbus(wire_receive_pma0_analogtestbus),
	.clockout(wire_receive_pma0_clockout),
	.datain(rx_datain[0]),
	.dataout(wire_receive_pma0_dataout),
	.dataoutfull(),
	.deserclock(rx_deserclock_in[3:0]),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(rx_pmadprioin_wire[299:0]),
	.dprioout(wire_receive_pma0_dprioout),
	.freqlock(1'b0),
	.ignorephslck(1'b0),
	.locktodata(rx_locktodata_wire[0]),
	.locktoref(rx_locktorefclk_wire[0]),
	.locktorefout(wire_receive_pma0_locktorefout),
	.offsetcancellationen(1'b0),
	.plllocked(rx_plllocked_wire[0]),
	.powerdn(cent_unit_rxibpowerdn[0]),
	.ppmdetectclkrel(),
	.ppmdetectrefclk(rx_pll_pfdrefclkout_wire[0]),
	.recoverdatain(pll_ch_dataout_wire[1:0]),
	.recoverdataout(wire_receive_pma0_recoverdataout),
	.reverselpbkout(),
	.revserialfdbkout(),
	.rxpmareset(rx_analogreset_out[0]),
	.seriallpbken(rx_seriallpbken[0]),
	.seriallpbkin(tx_serialloopbackout[0]),
	.signaldetect(wire_receive_pma0_signaldetect),
	.testbussel(4'b0110)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.adaptcapture(1'b0),
	.adcepowerdn(1'b0),
	.adcereset(1'b0),
	.adcestandby(1'b0),
	.extra10gin({38{1'b0}}),
	.ppmdetectdividedclk(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		receive_pma0.adaptive_equalization_mode = "none",
		receive_pma0.allow_serial_loopback = "true",
		receive_pma0.channel_number = ((starting_channel_number + 0) % 4),
		receive_pma0.channel_type = "auto",
		receive_pma0.common_mode = rx_common_mode,
		receive_pma0.deserialization_factor = 10,
		receive_pma0.dprio_config_mode = 6'h01,
		receive_pma0.enable_ltd = "true",
		receive_pma0.enable_ltr = "true",
		receive_pma0.eq_dc_gain = equalizer_dcgain_setting,
		receive_pma0.eqa_ctrl = equalizer_ctrl_a_setting,
		receive_pma0.eqb_ctrl = equalizer_ctrl_b_setting,
		receive_pma0.eqc_ctrl = equalizer_ctrl_c_setting,
		receive_pma0.eqd_ctrl = equalizer_ctrl_d_setting,
		receive_pma0.eqv_ctrl = equalizer_ctrl_v_setting,
		receive_pma0.eyemon_bandwidth = 0,
		receive_pma0.force_signal_detect = "true",
		receive_pma0.logical_channel_address = (starting_channel_number + 0),
		receive_pma0.low_speed_test_select = 0,
		receive_pma0.offset_cancellation = 1,
		receive_pma0.ppmselect = 32,
		receive_pma0.protocol_hint = "xaui",
		receive_pma0.send_direct_reverse_serial_loopback = "None",
		receive_pma0.signal_detect_hysteresis = 2,
		receive_pma0.signal_detect_hysteresis_valid_threshold = 1,
		receive_pma0.signal_detect_loss_threshold = 1,
		receive_pma0.termination = receiver_termination,
		receive_pma0.use_deser_double_data_width = "false",
		receive_pma0.use_external_termination = "false",
		receive_pma0.use_pma_direct = "false",
		receive_pma0.lpm_type = "stratixiv_hssi_rx_pma";
	stratixiv_hssi_rx_pma   receive_pma1
	( 
	.adaptdone(),
	.analogtestbus(wire_receive_pma1_analogtestbus),
	.clockout(wire_receive_pma1_clockout),
	.datain(rx_datain[1]),
	.dataout(wire_receive_pma1_dataout),
	.dataoutfull(),
	.deserclock(rx_deserclock_in[7:4]),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(rx_pmadprioin_wire[599:300]),
	.dprioout(wire_receive_pma1_dprioout),
	.freqlock(1'b0),
	.ignorephslck(1'b0),
	.locktodata(rx_locktodata_wire[1]),
	.locktoref(rx_locktorefclk_wire[1]),
	.locktorefout(wire_receive_pma1_locktorefout),
	.offsetcancellationen(1'b0),
	.plllocked(rx_plllocked_wire[1]),
	.powerdn(cent_unit_rxibpowerdn[1]),
	.ppmdetectclkrel(),
	.ppmdetectrefclk(rx_pll_pfdrefclkout_wire[1]),
	.recoverdatain(pll_ch_dataout_wire[3:2]),
	.recoverdataout(wire_receive_pma1_recoverdataout),
	.reverselpbkout(),
	.revserialfdbkout(),
	.rxpmareset(rx_analogreset_out[1]),
	.seriallpbken(rx_seriallpbken[1]),
	.seriallpbkin(tx_serialloopbackout[1]),
	.signaldetect(wire_receive_pma1_signaldetect),
	.testbussel(4'b0110)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.adaptcapture(1'b0),
	.adcepowerdn(1'b0),
	.adcereset(1'b0),
	.adcestandby(1'b0),
	.extra10gin({38{1'b0}}),
	.ppmdetectdividedclk(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		receive_pma1.adaptive_equalization_mode = "none",
		receive_pma1.allow_serial_loopback = "true",
		receive_pma1.channel_number = ((starting_channel_number + 1) % 4),
		receive_pma1.channel_type = "auto",
		receive_pma1.common_mode = rx_common_mode,
		receive_pma1.deserialization_factor = 10,
		receive_pma1.dprio_config_mode = 6'h01,
		receive_pma1.enable_ltd = "true",
		receive_pma1.enable_ltr = "true",
		receive_pma1.eq_dc_gain = equalizer_dcgain_setting,
                receive_pma1.eqa_ctrl = equalizer_ctrl_a_setting,
                receive_pma1.eqb_ctrl = equalizer_ctrl_b_setting,
                receive_pma1.eqc_ctrl = equalizer_ctrl_c_setting,
                receive_pma1.eqd_ctrl = equalizer_ctrl_d_setting,
                receive_pma1.eqv_ctrl = equalizer_ctrl_v_setting,
		receive_pma1.eyemon_bandwidth = 0,
		receive_pma1.force_signal_detect = "true",
		receive_pma1.logical_channel_address = (starting_channel_number + 1),
		receive_pma1.low_speed_test_select = 0,
		receive_pma1.offset_cancellation = 1,
		receive_pma1.ppmselect = 32,
		receive_pma1.protocol_hint = "xaui",
		receive_pma1.send_direct_reverse_serial_loopback = "None",
		receive_pma1.signal_detect_hysteresis = 2,
		receive_pma1.signal_detect_hysteresis_valid_threshold = 1,
		receive_pma1.signal_detect_loss_threshold = 1,
		receive_pma1.termination = receiver_termination,
		receive_pma1.use_deser_double_data_width = "false",
		receive_pma1.use_external_termination = "false",
		receive_pma1.use_pma_direct = "false",
		receive_pma1.lpm_type = "stratixiv_hssi_rx_pma";
	stratixiv_hssi_rx_pma   receive_pma2
	( 
	.adaptdone(),
	.analogtestbus(wire_receive_pma2_analogtestbus),
	.clockout(wire_receive_pma2_clockout),
	.datain(rx_datain[2]),
	.dataout(wire_receive_pma2_dataout),
	.dataoutfull(),
	.deserclock(rx_deserclock_in[11:8]),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(rx_pmadprioin_wire[899:600]),
	.dprioout(wire_receive_pma2_dprioout),
	.freqlock(1'b0),
	.ignorephslck(1'b0),
	.locktodata(rx_locktodata_wire[2]),
	.locktoref(rx_locktorefclk_wire[2]),
	.locktorefout(wire_receive_pma2_locktorefout),
	.offsetcancellationen(1'b0),
	.plllocked(rx_plllocked_wire[2]),
	.powerdn(cent_unit_rxibpowerdn[2]),
	.ppmdetectclkrel(),
	.ppmdetectrefclk(rx_pll_pfdrefclkout_wire[2]),
	.recoverdatain(pll_ch_dataout_wire[5:4]),
	.recoverdataout(wire_receive_pma2_recoverdataout),
	.reverselpbkout(),
	.revserialfdbkout(),
	.rxpmareset(rx_analogreset_out[2]),
	.seriallpbken(rx_seriallpbken[2]),
	.seriallpbkin(tx_serialloopbackout[2]),
	.signaldetect(wire_receive_pma2_signaldetect),
	.testbussel(4'b0110)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.adaptcapture(1'b0),
	.adcepowerdn(1'b0),
	.adcereset(1'b0),
	.adcestandby(1'b0),
	.extra10gin({38{1'b0}}),
	.ppmdetectdividedclk(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		receive_pma2.adaptive_equalization_mode = "none",
		receive_pma2.allow_serial_loopback = "true",
		receive_pma2.channel_number = ((starting_channel_number + 2) % 4),
		receive_pma2.channel_type = "auto",
		receive_pma2.common_mode = rx_common_mode,
		receive_pma2.deserialization_factor = 10,
		receive_pma2.dprio_config_mode = 6'h01,
		receive_pma2.enable_ltd = "true",
		receive_pma2.enable_ltr = "true",
		receive_pma2.eq_dc_gain = equalizer_dcgain_setting,
                receive_pma2.eqa_ctrl = equalizer_ctrl_a_setting,
                receive_pma2.eqb_ctrl = equalizer_ctrl_b_setting,
                receive_pma2.eqc_ctrl = equalizer_ctrl_c_setting,
                receive_pma2.eqd_ctrl = equalizer_ctrl_d_setting,
                receive_pma2.eqv_ctrl = equalizer_ctrl_v_setting,
		receive_pma2.eyemon_bandwidth = 0,
		receive_pma2.force_signal_detect = "true",
		receive_pma2.logical_channel_address = (starting_channel_number + 2),
		receive_pma2.low_speed_test_select = 0,
		receive_pma2.offset_cancellation = 1,
		receive_pma2.ppmselect = 32,
		receive_pma2.protocol_hint = "xaui",
		receive_pma2.send_direct_reverse_serial_loopback = "None",
		receive_pma2.signal_detect_hysteresis = 2,
		receive_pma2.signal_detect_hysteresis_valid_threshold = 1,
		receive_pma2.signal_detect_loss_threshold = 1,
		receive_pma2.termination = receiver_termination,
		receive_pma2.use_deser_double_data_width = "false",
		receive_pma2.use_external_termination = "false",
		receive_pma2.use_pma_direct = "false",
		receive_pma2.lpm_type = "stratixiv_hssi_rx_pma";
	stratixiv_hssi_rx_pma   receive_pma3
	( 
	.adaptdone(),
	.analogtestbus(wire_receive_pma3_analogtestbus),
	.clockout(wire_receive_pma3_clockout),
	.datain(rx_datain[3]),
	.dataout(wire_receive_pma3_dataout),
	.dataoutfull(),
	.deserclock(rx_deserclock_in[15:12]),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(rx_pmadprioin_wire[1199:900]),
	.dprioout(wire_receive_pma3_dprioout),
	.freqlock(1'b0),
	.ignorephslck(1'b0),
	.locktodata(rx_locktodata_wire[3]),
	.locktoref(rx_locktorefclk_wire[3]),
	.locktorefout(wire_receive_pma3_locktorefout),
	.offsetcancellationen(1'b0),
	.plllocked(rx_plllocked_wire[3]),
	.powerdn(cent_unit_rxibpowerdn[3]),
	.ppmdetectclkrel(),
	.ppmdetectrefclk(rx_pll_pfdrefclkout_wire[3]),
	.recoverdatain(pll_ch_dataout_wire[7:6]),
	.recoverdataout(wire_receive_pma3_recoverdataout),
	.reverselpbkout(),
	.revserialfdbkout(),
	.rxpmareset(rx_analogreset_out[3]),
	.seriallpbken(rx_seriallpbken[3]),
	.seriallpbkin(tx_serialloopbackout[3]),
	.signaldetect(wire_receive_pma3_signaldetect),
	.testbussel(4'b0110)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.adaptcapture(1'b0),
	.adcepowerdn(1'b0),
	.adcereset(1'b0),
	.adcestandby(1'b0),
	.extra10gin({38{1'b0}}),
	.ppmdetectdividedclk(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		receive_pma3.adaptive_equalization_mode = "none",
		receive_pma3.allow_serial_loopback = "true",
		receive_pma3.channel_number = ((starting_channel_number + 3) % 4),
		receive_pma3.channel_type = "auto",
		receive_pma3.common_mode = rx_common_mode,
		receive_pma3.deserialization_factor = 10,
		receive_pma3.dprio_config_mode = 6'h01,
		receive_pma3.enable_ltd = "true",
		receive_pma3.enable_ltr = "true",
		receive_pma3.eq_dc_gain = equalizer_dcgain_setting,
                receive_pma3.eqa_ctrl = equalizer_ctrl_a_setting,
                receive_pma3.eqb_ctrl = equalizer_ctrl_b_setting,
                receive_pma3.eqc_ctrl = equalizer_ctrl_c_setting,
                receive_pma3.eqd_ctrl = equalizer_ctrl_d_setting,
                receive_pma3.eqv_ctrl = equalizer_ctrl_v_setting,
		receive_pma3.eyemon_bandwidth = 0,
		receive_pma3.force_signal_detect = "true",
		receive_pma3.logical_channel_address = (starting_channel_number + 3),
		receive_pma3.low_speed_test_select = 0,
		receive_pma3.offset_cancellation = 1,
		receive_pma3.ppmselect = 32,
		receive_pma3.protocol_hint = "xaui",
		receive_pma3.send_direct_reverse_serial_loopback = "None",
		receive_pma3.signal_detect_hysteresis = 2,
		receive_pma3.signal_detect_hysteresis_valid_threshold = 1,
		receive_pma3.signal_detect_loss_threshold = 1,
		receive_pma3.termination = receiver_termination,
		receive_pma3.use_deser_double_data_width = "false",
		receive_pma3.use_external_termination = "false",
		receive_pma3.use_pma_direct = "false",
		receive_pma3.lpm_type = "stratixiv_hssi_rx_pma";
	stratixiv_hssi_tx_pcs   transmit_pcs0
	( 
	.clkout(),
	.coreclk(tx_coreclk_in[0]),
	.coreclkout(wire_transmit_pcs0_coreclkout),
	.ctrlenable({{2{1'b0}}, tx_ctrlenable[1:0]}),
	.datain({{24{1'b0}}, tx_datain_wire[15:0]}),
	.datainfull({44{1'b0}}),
	.dataout(wire_transmit_pcs0_dataout),
	.detectrxloop(1'b0),
	.digitalreset(tx_digitalreset_out[0]),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(tx_dprioin_wire[149:0]),
	.dprioout(wire_transmit_pcs0_dprioout),
	.enrevparallellpbk(1'b0),
	.forcedisp({{2{1'b0}}, tx_forcedisp_wire[1:0]}),
	.forcedispcompliance(1'b0),
	.forceelecidleout(wire_transmit_pcs0_forceelecidleout),
	.grayelecidleinferselout(),
	.hiptxclkout(),
	.invpol(tx_invpolarity[0]),
	.iqpphfifobyteselout(),
	.iqpphfifordclkout(),
	.iqpphfifordenableout(),
	.iqpphfifowrenableout(),
	.localrefclk(tx_localrefclk[0]),
	.parallelfdbkout(),
	.phfifobyteselout(),
	.phfifobyteserdisable(int_rx_phfifobyteserdisable[0]),
	.phfifooverflow(wire_transmit_pcs0_phfifooverflow),
	.phfifoptrsreset(int_rx_phfifoptrsresetout[0]),
	.phfifordclkout(),
	.phfiforddisable(1'b0),
	.phfiforddisableout(wire_transmit_pcs0_phfiforddisableout),
	.phfifordenableout(),
	.phfiforeset(tx_phfiforeset[0]),
	.phfiforesetout(wire_transmit_pcs0_phfiforesetout),
	.phfifounderflow(wire_transmit_pcs0_phfifounderflow),
	.phfifowrenable(1'b1),
	.phfifowrenableout(wire_transmit_pcs0_phfifowrenableout),
	.phfifoxnbytesel(int_tx_phfifoxnbytesel[2:0]),
	.phfifoxnrdclk(int_tx_phfifoxnrdclk[2:0]),
	.phfifoxnrdenable(int_tx_phfifoxnrdenable[2:0]),
	.phfifoxnwrenable(int_tx_phfifoxnwrenable[2:0]),
	.pipeenrevparallellpbkout(),
	.pipepowerdownout(),
	.pipepowerstateout(),
	.pipestatetransdone(1'b0),
	.powerdn({2{1'b0}}),
	.quadreset(cent_unit_quadresetout[0]),
	.rateswitchout(),
	.rdenablesync(wire_transmit_pcs0_rdenablesync),
	.refclk(refclk_pma[0]),
	.revparallelfdbk({20{1'b0}}),
	.txdetectrx(wire_transmit_pcs0_txdetectrx),
	.xgmctrl(cent_unit_txctrlout[0]),
	.xgmctrlenable(wire_transmit_pcs0_xgmctrlenable),
	.xgmdatain(cent_unit_tx_xgmdataout[7:0]),
	.xgmdataout(wire_transmit_pcs0_xgmdataout)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.bitslipboundaryselect({5{1'b0}}),
	.dispval({4{1'b0}}),
	.elecidleinfersel({3{1'b0}}),
	.forceelecidle(1'b0),
	.freezptr(1'b0),
	.hipdatain({10{1'b0}}),
	.hipdetectrxloop(1'b0),
	.hipelecidleinfersel({3{1'b0}}),
	.hipforceelecidle(1'b0),
	.hippowerdn({2{1'b0}}),
	.hiptxdeemph(1'b0),
	.hiptxmargin({3{1'b0}}),
	.iqpphfifoxnbytesel({2{1'b0}}),
	.iqpphfifoxnrdclk({2{1'b0}}),
	.iqpphfifoxnrdenable({2{1'b0}}),
	.iqpphfifoxnwrenable({2{1'b0}}),
	.phfifox4bytesel(1'b0),
	.phfifox4rdclk(1'b0),
	.phfifox4rdenable(1'b0),
	.phfifox4wrenable(1'b0),
	.phfifoxnbottombytesel(1'b0),
	.phfifoxnbottomrdclk(1'b0),
	.phfifoxnbottomrdenable(1'b0),
	.phfifoxnbottomwrenable(1'b0),
	.phfifoxnptrsreset({3{1'b0}}),
	.phfifoxntopbytesel(1'b0),
	.phfifoxntoprdclk(1'b0),
	.phfifoxntoprdenable(1'b0),
	.phfifoxntopwrenable(1'b0),
	.pipetxdeemph(1'b0),
	.pipetxmargin({3{1'b0}}),
	.pipetxswing(1'b0),
	.prbscidenable(1'b0),
	.rateswitch(1'b0),
	.rateswitchisdone(1'b0),
	.rateswitchxndone(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		transmit_pcs0.allow_polarity_inversion = "true",
		transmit_pcs0.auto_spd_self_switch_enable = "false",
		transmit_pcs0.bitslip_enable = "false",
		transmit_pcs0.channel_bonding = "x4",
		transmit_pcs0.channel_number = ((starting_channel_number + 0) % 4),
		transmit_pcs0.channel_width = 16,
		transmit_pcs0.core_clock_0ppm = "true",
		transmit_pcs0.datapath_low_latency_mode = "false",
		transmit_pcs0.datapath_protocol = "xaui",
		transmit_pcs0.disable_ph_low_latency_mode = "false",
		transmit_pcs0.disparity_mode = "none",
		transmit_pcs0.dprio_config_mode = 6'h01,
		transmit_pcs0.elec_idle_delay = 6,
		transmit_pcs0.enable_bit_reversal = "false",
		transmit_pcs0.enable_idle_selection = "false",
		transmit_pcs0.enable_reverse_parallel_loopback = "false",
		transmit_pcs0.enable_self_test_mode = "false",
		transmit_pcs0.enable_symbol_swap = "false",
		transmit_pcs0.enc_8b_10b_compatibility_mode = "true",
		transmit_pcs0.enc_8b_10b_mode = "normal",
		transmit_pcs0.force_echar = "false",
		transmit_pcs0.force_kchar = "false",
		transmit_pcs0.hip_enable = "false",
		transmit_pcs0.logical_channel_address = (starting_channel_number + 0),
		transmit_pcs0.ph_fifo_reg_mode = "false",
		transmit_pcs0.ph_fifo_xn_mapping0 = "none",
		transmit_pcs0.ph_fifo_xn_mapping1 = "none",
		transmit_pcs0.ph_fifo_xn_mapping2 = "central",
		transmit_pcs0.ph_fifo_xn_select = 2,
		transmit_pcs0.pipe_auto_speed_nego_enable = "false",
		transmit_pcs0.pipe_freq_scale_mode = "Frequency",
		transmit_pcs0.prbs_cid_pattern = "false",
		transmit_pcs0.protocol_hint = "xaui",
		transmit_pcs0.refclk_select = "cmu_clock_divider",
		transmit_pcs0.self_test_mode = "incremental",
		transmit_pcs0.use_double_data_mode = "true",
		transmit_pcs0.use_serializer_double_data_mode = "false",
		transmit_pcs0.wr_clk_mux_select = "core_clk",
		transmit_pcs0.lpm_type = "stratixiv_hssi_tx_pcs";
	stratixiv_hssi_tx_pcs   transmit_pcs1
	( 
	.clkout(),
	.coreclk(tx_coreclk_in[1]),
	.coreclkout(wire_transmit_pcs1_coreclkout),
	.ctrlenable({{2{1'b0}}, tx_ctrlenable[3:2]}),
	.datain({{24{1'b0}}, tx_datain_wire[31:16]}),
	.datainfull({44{1'b0}}),
	.dataout(wire_transmit_pcs1_dataout),
	.detectrxloop(1'b0),
	.digitalreset(tx_digitalreset_out[1]),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(tx_dprioin_wire[299:150]),
	.dprioout(wire_transmit_pcs1_dprioout),
	.enrevparallellpbk(1'b0),
	.forcedisp({{2{1'b0}}, tx_forcedisp_wire[3:2]}),
	.forcedispcompliance(1'b0),
	.forceelecidleout(wire_transmit_pcs1_forceelecidleout),
	.grayelecidleinferselout(),
	.hiptxclkout(),
	.invpol(tx_invpolarity[1]),
	.iqpphfifobyteselout(),
	.iqpphfifordclkout(),
	.iqpphfifordenableout(),
	.iqpphfifowrenableout(),
	.localrefclk(tx_localrefclk[1]),
	.parallelfdbkout(),
	.phfifobyteselout(),
	.phfifobyteserdisable(int_rx_phfifobyteserdisable[1]),
	.phfifooverflow(wire_transmit_pcs1_phfifooverflow),
	.phfifoptrsreset(int_rx_phfifoptrsresetout[1]),
	.phfifordclkout(),
	.phfiforddisable(1'b0),
	.phfiforddisableout(wire_transmit_pcs1_phfiforddisableout),
	.phfifordenableout(),
	.phfiforeset(tx_phfiforeset[1]),
	.phfiforesetout(wire_transmit_pcs1_phfiforesetout),
	.phfifounderflow(wire_transmit_pcs1_phfifounderflow),
	.phfifowrenable(1'b1),
	.phfifowrenableout(wire_transmit_pcs1_phfifowrenableout),
	.phfifoxnbytesel(int_tx_phfifoxnbytesel[5:3]),
	.phfifoxnrdclk(int_tx_phfifoxnrdclk[5:3]),
	.phfifoxnrdenable(int_tx_phfifoxnrdenable[5:3]),
	.phfifoxnwrenable(int_tx_phfifoxnwrenable[5:3]),
	.pipeenrevparallellpbkout(),
	.pipepowerdownout(),
	.pipepowerstateout(),
	.pipestatetransdone(1'b0),
	.powerdn({2{1'b0}}),
	.quadreset(cent_unit_quadresetout[0]),
	.rateswitchout(),
	.rdenablesync(wire_transmit_pcs1_rdenablesync),
	.refclk(refclk_pma[0]),
	.revparallelfdbk({20{1'b0}}),
	.txdetectrx(wire_transmit_pcs1_txdetectrx),
	.xgmctrl(cent_unit_txctrlout[1]),
	.xgmctrlenable(wire_transmit_pcs1_xgmctrlenable),
	.xgmdatain(cent_unit_tx_xgmdataout[15:8]),
	.xgmdataout(wire_transmit_pcs1_xgmdataout)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.bitslipboundaryselect({5{1'b0}}),
	.dispval({4{1'b0}}),
	.elecidleinfersel({3{1'b0}}),
	.forceelecidle(1'b0),
	.freezptr(1'b0),
	.hipdatain({10{1'b0}}),
	.hipdetectrxloop(1'b0),
	.hipelecidleinfersel({3{1'b0}}),
	.hipforceelecidle(1'b0),
	.hippowerdn({2{1'b0}}),
	.hiptxdeemph(1'b0),
	.hiptxmargin({3{1'b0}}),
	.iqpphfifoxnbytesel({2{1'b0}}),
	.iqpphfifoxnrdclk({2{1'b0}}),
	.iqpphfifoxnrdenable({2{1'b0}}),
	.iqpphfifoxnwrenable({2{1'b0}}),
	.phfifox4bytesel(1'b0),
	.phfifox4rdclk(1'b0),
	.phfifox4rdenable(1'b0),
	.phfifox4wrenable(1'b0),
	.phfifoxnbottombytesel(1'b0),
	.phfifoxnbottomrdclk(1'b0),
	.phfifoxnbottomrdenable(1'b0),
	.phfifoxnbottomwrenable(1'b0),
	.phfifoxnptrsreset({3{1'b0}}),
	.phfifoxntopbytesel(1'b0),
	.phfifoxntoprdclk(1'b0),
	.phfifoxntoprdenable(1'b0),
	.phfifoxntopwrenable(1'b0),
	.pipetxdeemph(1'b0),
	.pipetxmargin({3{1'b0}}),
	.pipetxswing(1'b0),
	.prbscidenable(1'b0),
	.rateswitch(1'b0),
	.rateswitchisdone(1'b0),
	.rateswitchxndone(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		transmit_pcs1.allow_polarity_inversion = "true",
		transmit_pcs1.auto_spd_self_switch_enable = "false",
		transmit_pcs1.bitslip_enable = "false",
		transmit_pcs1.channel_bonding = "x4",
		transmit_pcs1.channel_number = ((starting_channel_number + 1) % 4),
		transmit_pcs1.channel_width = 16,
		transmit_pcs1.core_clock_0ppm = "true",
		transmit_pcs1.datapath_low_latency_mode = "false",
		transmit_pcs1.datapath_protocol = "xaui",
		transmit_pcs1.disable_ph_low_latency_mode = "false",
		transmit_pcs1.disparity_mode = "none",
		transmit_pcs1.dprio_config_mode = 6'h01,
		transmit_pcs1.elec_idle_delay = 6,
		transmit_pcs1.enable_bit_reversal = "false",
		transmit_pcs1.enable_idle_selection = "false",
		transmit_pcs1.enable_reverse_parallel_loopback = "false",
		transmit_pcs1.enable_self_test_mode = "false",
		transmit_pcs1.enable_symbol_swap = "false",
		transmit_pcs1.enc_8b_10b_compatibility_mode = "true",
		transmit_pcs1.enc_8b_10b_mode = "normal",
		transmit_pcs1.force_echar = "false",
		transmit_pcs1.force_kchar = "false",
		transmit_pcs1.hip_enable = "false",
		transmit_pcs1.logical_channel_address = (starting_channel_number + 1),
		transmit_pcs1.ph_fifo_reg_mode = "false",
		transmit_pcs1.ph_fifo_xn_mapping0 = "none",
		transmit_pcs1.ph_fifo_xn_mapping1 = "none",
		transmit_pcs1.ph_fifo_xn_mapping2 = "central",
		transmit_pcs1.ph_fifo_xn_select = 2,
		transmit_pcs1.pipe_auto_speed_nego_enable = "false",
		transmit_pcs1.pipe_freq_scale_mode = "Frequency",
		transmit_pcs1.prbs_cid_pattern = "false",
		transmit_pcs1.protocol_hint = "xaui",
		transmit_pcs1.refclk_select = "cmu_clock_divider",
		transmit_pcs1.self_test_mode = "incremental",
		transmit_pcs1.use_double_data_mode = "true",
		transmit_pcs1.use_serializer_double_data_mode = "false",
		transmit_pcs1.wr_clk_mux_select = "core_clk",
		transmit_pcs1.lpm_type = "stratixiv_hssi_tx_pcs";
	stratixiv_hssi_tx_pcs   transmit_pcs2
	( 
	.clkout(),
	.coreclk(tx_coreclk_in[2]),
	.coreclkout(wire_transmit_pcs2_coreclkout),
	.ctrlenable({{2{1'b0}}, tx_ctrlenable[5:4]}),
	.datain({{24{1'b0}}, tx_datain_wire[47:32]}),
	.datainfull({44{1'b0}}),
	.dataout(wire_transmit_pcs2_dataout),
	.detectrxloop(1'b0),
	.digitalreset(tx_digitalreset_out[2]),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(tx_dprioin_wire[449:300]),
	.dprioout(wire_transmit_pcs2_dprioout),
	.enrevparallellpbk(1'b0),
	.forcedisp({{2{1'b0}}, tx_forcedisp_wire[5:4]}),
	.forcedispcompliance(1'b0),
	.forceelecidleout(wire_transmit_pcs2_forceelecidleout),
	.grayelecidleinferselout(),
	.hiptxclkout(),
	.invpol(tx_invpolarity[2]),
	.iqpphfifobyteselout(),
	.iqpphfifordclkout(),
	.iqpphfifordenableout(),
	.iqpphfifowrenableout(),
	.localrefclk(tx_localrefclk[2]),
	.parallelfdbkout(),
	.phfifobyteselout(),
	.phfifobyteserdisable(int_rx_phfifobyteserdisable[2]),
	.phfifooverflow(wire_transmit_pcs2_phfifooverflow),
	.phfifoptrsreset(int_rx_phfifoptrsresetout[2]),
	.phfifordclkout(),
	.phfiforddisable(1'b0),
	.phfiforddisableout(wire_transmit_pcs2_phfiforddisableout),
	.phfifordenableout(),
	.phfiforeset(tx_phfiforeset[2]),
	.phfiforesetout(wire_transmit_pcs2_phfiforesetout),
	.phfifounderflow(wire_transmit_pcs2_phfifounderflow),
	.phfifowrenable(1'b1),
	.phfifowrenableout(wire_transmit_pcs2_phfifowrenableout),
	.phfifoxnbytesel(int_tx_phfifoxnbytesel[8:6]),
	.phfifoxnrdclk(int_tx_phfifoxnrdclk[8:6]),
	.phfifoxnrdenable(int_tx_phfifoxnrdenable[8:6]),
	.phfifoxnwrenable(int_tx_phfifoxnwrenable[8:6]),
	.pipeenrevparallellpbkout(),
	.pipepowerdownout(),
	.pipepowerstateout(),
	.pipestatetransdone(1'b0),
	.powerdn({2{1'b0}}),
	.quadreset(cent_unit_quadresetout[0]),
	.rateswitchout(),
	.rdenablesync(wire_transmit_pcs2_rdenablesync),
	.refclk(refclk_pma[0]),
	.revparallelfdbk({20{1'b0}}),
	.txdetectrx(wire_transmit_pcs2_txdetectrx),
	.xgmctrl(cent_unit_txctrlout[2]),
	.xgmctrlenable(wire_transmit_pcs2_xgmctrlenable),
	.xgmdatain(cent_unit_tx_xgmdataout[23:16]),
	.xgmdataout(wire_transmit_pcs2_xgmdataout)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.bitslipboundaryselect({5{1'b0}}),
	.dispval({4{1'b0}}),
	.elecidleinfersel({3{1'b0}}),
	.forceelecidle(1'b0),
	.freezptr(1'b0),
	.hipdatain({10{1'b0}}),
	.hipdetectrxloop(1'b0),
	.hipelecidleinfersel({3{1'b0}}),
	.hipforceelecidle(1'b0),
	.hippowerdn({2{1'b0}}),
	.hiptxdeemph(1'b0),
	.hiptxmargin({3{1'b0}}),
	.iqpphfifoxnbytesel({2{1'b0}}),
	.iqpphfifoxnrdclk({2{1'b0}}),
	.iqpphfifoxnrdenable({2{1'b0}}),
	.iqpphfifoxnwrenable({2{1'b0}}),
	.phfifox4bytesel(1'b0),
	.phfifox4rdclk(1'b0),
	.phfifox4rdenable(1'b0),
	.phfifox4wrenable(1'b0),
	.phfifoxnbottombytesel(1'b0),
	.phfifoxnbottomrdclk(1'b0),
	.phfifoxnbottomrdenable(1'b0),
	.phfifoxnbottomwrenable(1'b0),
	.phfifoxnptrsreset({3{1'b0}}),
	.phfifoxntopbytesel(1'b0),
	.phfifoxntoprdclk(1'b0),
	.phfifoxntoprdenable(1'b0),
	.phfifoxntopwrenable(1'b0),
	.pipetxdeemph(1'b0),
	.pipetxmargin({3{1'b0}}),
	.pipetxswing(1'b0),
	.prbscidenable(1'b0),
	.rateswitch(1'b0),
	.rateswitchisdone(1'b0),
	.rateswitchxndone(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		transmit_pcs2.allow_polarity_inversion = "true",
		transmit_pcs2.auto_spd_self_switch_enable = "false",
		transmit_pcs2.bitslip_enable = "false",
		transmit_pcs2.channel_bonding = "x4",
		transmit_pcs2.channel_number = ((starting_channel_number + 2) % 4),
		transmit_pcs2.channel_width = 16,
		transmit_pcs2.core_clock_0ppm = "true",
		transmit_pcs2.datapath_low_latency_mode = "false",
		transmit_pcs2.datapath_protocol = "xaui",
		transmit_pcs2.disable_ph_low_latency_mode = "false",
		transmit_pcs2.disparity_mode = "none",
		transmit_pcs2.dprio_config_mode = 6'h01,
		transmit_pcs2.elec_idle_delay = 6,
		transmit_pcs2.enable_bit_reversal = "false",
		transmit_pcs2.enable_idle_selection = "false",
		transmit_pcs2.enable_reverse_parallel_loopback = "false",
		transmit_pcs2.enable_self_test_mode = "false",
		transmit_pcs2.enable_symbol_swap = "false",
		transmit_pcs2.enc_8b_10b_compatibility_mode = "true",
		transmit_pcs2.enc_8b_10b_mode = "normal",
		transmit_pcs2.force_echar = "false",
		transmit_pcs2.force_kchar = "false",
		transmit_pcs2.hip_enable = "false",
		transmit_pcs2.logical_channel_address = (starting_channel_number + 2),
		transmit_pcs2.ph_fifo_reg_mode = "false",
		transmit_pcs2.ph_fifo_xn_mapping0 = "none",
		transmit_pcs2.ph_fifo_xn_mapping1 = "none",
		transmit_pcs2.ph_fifo_xn_mapping2 = "central",
		transmit_pcs2.ph_fifo_xn_select = 2,
		transmit_pcs2.pipe_auto_speed_nego_enable = "false",
		transmit_pcs2.pipe_freq_scale_mode = "Frequency",
		transmit_pcs2.prbs_cid_pattern = "false",
		transmit_pcs2.protocol_hint = "xaui",
		transmit_pcs2.refclk_select = "cmu_clock_divider",
		transmit_pcs2.self_test_mode = "incremental",
		transmit_pcs2.use_double_data_mode = "true",
		transmit_pcs2.use_serializer_double_data_mode = "false",
		transmit_pcs2.wr_clk_mux_select = "core_clk",
		transmit_pcs2.lpm_type = "stratixiv_hssi_tx_pcs";
	stratixiv_hssi_tx_pcs   transmit_pcs3
	( 
	.clkout(),
	.coreclk(tx_coreclk_in[3]),
	.coreclkout(wire_transmit_pcs3_coreclkout),
	.ctrlenable({{2{1'b0}}, tx_ctrlenable[7:6]}),
	.datain({{24{1'b0}}, tx_datain_wire[63:48]}),
	.datainfull({44{1'b0}}),
	.dataout(wire_transmit_pcs3_dataout),
	.detectrxloop(1'b0),
	.digitalreset(tx_digitalreset_out[3]),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(tx_dprioin_wire[599:450]),
	.dprioout(wire_transmit_pcs3_dprioout),
	.enrevparallellpbk(1'b0),
	.forcedisp({{2{1'b0}}, tx_forcedisp_wire[7:6]}),
	.forcedispcompliance(1'b0),
	.forceelecidleout(wire_transmit_pcs3_forceelecidleout),
	.grayelecidleinferselout(),
	.hiptxclkout(),
	.invpol(tx_invpolarity[3]),
	.iqpphfifobyteselout(),
	.iqpphfifordclkout(),
	.iqpphfifordenableout(),
	.iqpphfifowrenableout(),
	.localrefclk(tx_localrefclk[3]),
	.parallelfdbkout(),
	.phfifobyteselout(),
	.phfifobyteserdisable(int_rx_phfifobyteserdisable[3]),
	.phfifooverflow(wire_transmit_pcs3_phfifooverflow),
	.phfifoptrsreset(int_rx_phfifoptrsresetout[3]),
	.phfifordclkout(),
	.phfiforddisable(1'b0),
	.phfiforddisableout(wire_transmit_pcs3_phfiforddisableout),
	.phfifordenableout(),
	.phfiforeset(tx_phfiforeset[3]),
	.phfiforesetout(wire_transmit_pcs3_phfiforesetout),
	.phfifounderflow(wire_transmit_pcs3_phfifounderflow),
	.phfifowrenable(1'b1),
	.phfifowrenableout(wire_transmit_pcs3_phfifowrenableout),
	.phfifoxnbytesel(int_tx_phfifoxnbytesel[11:9]),
	.phfifoxnrdclk(int_tx_phfifoxnrdclk[11:9]),
	.phfifoxnrdenable(int_tx_phfifoxnrdenable[11:9]),
	.phfifoxnwrenable(int_tx_phfifoxnwrenable[11:9]),
	.pipeenrevparallellpbkout(),
	.pipepowerdownout(),
	.pipepowerstateout(),
	.pipestatetransdone(1'b0),
	.powerdn({2{1'b0}}),
	.quadreset(cent_unit_quadresetout[0]),
	.rateswitchout(),
	.rdenablesync(wire_transmit_pcs3_rdenablesync),
	.refclk(refclk_pma[0]),
	.revparallelfdbk({20{1'b0}}),
	.txdetectrx(wire_transmit_pcs3_txdetectrx),
	.xgmctrl(cent_unit_txctrlout[3]),
	.xgmctrlenable(wire_transmit_pcs3_xgmctrlenable),
	.xgmdatain(cent_unit_tx_xgmdataout[31:24]),
	.xgmdataout(wire_transmit_pcs3_xgmdataout)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.bitslipboundaryselect({5{1'b0}}),
	.dispval({4{1'b0}}),
	.elecidleinfersel({3{1'b0}}),
	.forceelecidle(1'b0),
	.freezptr(1'b0),
	.hipdatain({10{1'b0}}),
	.hipdetectrxloop(1'b0),
	.hipelecidleinfersel({3{1'b0}}),
	.hipforceelecidle(1'b0),
	.hippowerdn({2{1'b0}}),
	.hiptxdeemph(1'b0),
	.hiptxmargin({3{1'b0}}),
	.iqpphfifoxnbytesel({2{1'b0}}),
	.iqpphfifoxnrdclk({2{1'b0}}),
	.iqpphfifoxnrdenable({2{1'b0}}),
	.iqpphfifoxnwrenable({2{1'b0}}),
	.phfifox4bytesel(1'b0),
	.phfifox4rdclk(1'b0),
	.phfifox4rdenable(1'b0),
	.phfifox4wrenable(1'b0),
	.phfifoxnbottombytesel(1'b0),
	.phfifoxnbottomrdclk(1'b0),
	.phfifoxnbottomrdenable(1'b0),
	.phfifoxnbottomwrenable(1'b0),
	.phfifoxnptrsreset({3{1'b0}}),
	.phfifoxntopbytesel(1'b0),
	.phfifoxntoprdclk(1'b0),
	.phfifoxntoprdenable(1'b0),
	.phfifoxntopwrenable(1'b0),
	.pipetxdeemph(1'b0),
	.pipetxmargin({3{1'b0}}),
	.pipetxswing(1'b0),
	.prbscidenable(1'b0),
	.rateswitch(1'b0),
	.rateswitchisdone(1'b0),
	.rateswitchxndone(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		transmit_pcs3.allow_polarity_inversion = "true",
		transmit_pcs3.auto_spd_self_switch_enable = "false",
		transmit_pcs3.bitslip_enable = "false",
		transmit_pcs3.channel_bonding = "x4",
		transmit_pcs3.channel_number = ((starting_channel_number + 3) % 4),
		transmit_pcs3.channel_width = 16,
		transmit_pcs3.core_clock_0ppm = "true",
		transmit_pcs3.datapath_low_latency_mode = "false",
		transmit_pcs3.datapath_protocol = "xaui",
		transmit_pcs3.disable_ph_low_latency_mode = "false",
		transmit_pcs3.disparity_mode = "none",
		transmit_pcs3.dprio_config_mode = 6'h01,
		transmit_pcs3.elec_idle_delay = 6,
		transmit_pcs3.enable_bit_reversal = "false",
		transmit_pcs3.enable_idle_selection = "false",
		transmit_pcs3.enable_reverse_parallel_loopback = "false",
		transmit_pcs3.enable_self_test_mode = "false",
		transmit_pcs3.enable_symbol_swap = "false",
		transmit_pcs3.enc_8b_10b_compatibility_mode = "true",
		transmit_pcs3.enc_8b_10b_mode = "normal",
		transmit_pcs3.force_echar = "false",
		transmit_pcs3.force_kchar = "false",
		transmit_pcs3.hip_enable = "false",
		transmit_pcs3.logical_channel_address = (starting_channel_number + 3),
		transmit_pcs3.ph_fifo_reg_mode = "false",
		transmit_pcs3.ph_fifo_xn_mapping0 = "none",
		transmit_pcs3.ph_fifo_xn_mapping1 = "none",
		transmit_pcs3.ph_fifo_xn_mapping2 = "central",
		transmit_pcs3.ph_fifo_xn_select = 2,
		transmit_pcs3.pipe_auto_speed_nego_enable = "false",
		transmit_pcs3.pipe_freq_scale_mode = "Frequency",
		transmit_pcs3.prbs_cid_pattern = "false",
		transmit_pcs3.protocol_hint = "xaui",
		transmit_pcs3.refclk_select = "cmu_clock_divider",
		transmit_pcs3.self_test_mode = "incremental",
		transmit_pcs3.use_double_data_mode = "true",
		transmit_pcs3.use_serializer_double_data_mode = "false",
		transmit_pcs3.wr_clk_mux_select = "core_clk",
		transmit_pcs3.lpm_type = "stratixiv_hssi_tx_pcs";
	stratixiv_hssi_tx_pma   transmit_pma0
	( 
	.clockout(wire_transmit_pma0_clockout),
	.datain({{44{1'b0}}, tx_dataout_pcs_to_pma[19:0]}),
	.dataout(wire_transmit_pma0_dataout),
	.detectrxpowerdown(cent_unit_txdetectrxpowerdn[0]),
	.dftout(),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(tx_pmadprioin_wire[299:0]),
	.dprioout(wire_transmit_pma0_dprioout),
	.fastrefclk0in({2{1'b0}}),
	.fastrefclk1in(cmu_analogfastrefclkout[1:0]),
	.fastrefclk2in({2{1'b0}}),
	.fastrefclk4in({2{1'b0}}),
	.forceelecidle(1'b0),
	.powerdn(cent_unit_txobpowerdn[0]),
	.refclk0in({2{1'b0}}),
	.refclk0inpulse(1'b0),
	.refclk1in(cmu_analogrefclkout[1:0]),
	.refclk1inpulse(cmu_analogrefclkpulse[0]),
	.refclk2in({2{1'b0}}),
	.refclk2inpulse(1'b0),
	.refclk4in({2{1'b0}}),
	.refclk4inpulse(1'b0),
	.revserialfdbk(1'b0),
	.rxdetecten(txdetectrxout[0]),
	.rxdetectvalidout(),
	.rxfoundout(),
	.seriallpbkout(wire_transmit_pma0_seriallpbkout),
	.txpmareset(tx_analogreset_out[0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.datainfull({20{1'b0}}),
	.extra10gin({11{1'b0}}),
	.fastrefclk3in({2{1'b0}}),
	.pclk({5{1'b0}}),
	.refclk3in({2{1'b0}}),
	.refclk3inpulse(1'b0),
	.rxdetectclk(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		transmit_pma0.analog_power = "auto",
		transmit_pma0.channel_number = ((starting_channel_number + 0) % 4),
		transmit_pma0.channel_type = "auto",
		transmit_pma0.clkin_select = 1,
		transmit_pma0.clkmux_delay = "false",
		transmit_pma0.common_mode = "0.65V",
		transmit_pma0.dprio_config_mode = 6'h01,
		transmit_pma0.enable_reverse_serial_loopback = "false",
		transmit_pma0.logical_channel_address = (starting_channel_number + 0),
		transmit_pma0.logical_protocol_hint_0 = "xaui",
		transmit_pma0.low_speed_test_select = 0,
		transmit_pma0.physical_clkin1_mapping = "x4",
		transmit_pma0.preemp_pretap = preemphasis_ctrl_pretap_setting,
		transmit_pma0.preemp_pretap_inv = preemphasis_ctrl_pretap_inv_setting,
		transmit_pma0.preemp_tap_1 = preemphasis_ctrl_1stposttap_setting,
		transmit_pma0.preemp_tap_2 = preemphasis_ctrl_2ndposttap_setting,
		transmit_pma0.preemp_tap_2_inv = preemphasis_ctrl_2ndposttap_inv_setting,
		transmit_pma0.protocol_hint = "xaui",
		transmit_pma0.rx_detect = 0,
		transmit_pma0.serialization_factor = 10,
		transmit_pma0.slew_rate = "low",
		transmit_pma0.termination = transmitter_termination,
		transmit_pma0.use_external_termination = "false",
		transmit_pma0.use_pma_direct = "false",
		transmit_pma0.use_ser_double_data_mode = "false",
		transmit_pma0.vod_selection = vod_ctrl_setting,
		transmit_pma0.lpm_type = "stratixiv_hssi_tx_pma";
	stratixiv_hssi_tx_pma   transmit_pma1
	( 
	.clockout(wire_transmit_pma1_clockout),
	.datain({{44{1'b0}}, tx_dataout_pcs_to_pma[39:20]}),
	.dataout(wire_transmit_pma1_dataout),
	.detectrxpowerdown(cent_unit_txdetectrxpowerdn[1]),
	.dftout(),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(tx_pmadprioin_wire[599:300]),
	.dprioout(wire_transmit_pma1_dprioout),
	.fastrefclk0in({2{1'b0}}),
	.fastrefclk1in(cmu_analogfastrefclkout[1:0]),
	.fastrefclk2in({2{1'b0}}),
	.fastrefclk4in({2{1'b0}}),
	.forceelecidle(1'b0),
	.powerdn(cent_unit_txobpowerdn[1]),
	.refclk0in({2{1'b0}}),
	.refclk0inpulse(1'b0),
	.refclk1in(cmu_analogrefclkout[1:0]),
	.refclk1inpulse(cmu_analogrefclkpulse[0]),
	.refclk2in({2{1'b0}}),
	.refclk2inpulse(1'b0),
	.refclk4in({2{1'b0}}),
	.refclk4inpulse(1'b0),
	.revserialfdbk(1'b0),
	.rxdetecten(txdetectrxout[1]),
	.rxdetectvalidout(),
	.rxfoundout(),
	.seriallpbkout(wire_transmit_pma1_seriallpbkout),
	.txpmareset(tx_analogreset_out[1])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.datainfull({20{1'b0}}),
	.extra10gin({11{1'b0}}),
	.fastrefclk3in({2{1'b0}}),
	.pclk({5{1'b0}}),
	.refclk3in({2{1'b0}}),
	.refclk3inpulse(1'b0),
	.rxdetectclk(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		transmit_pma1.analog_power = "auto",
		transmit_pma1.channel_number = ((starting_channel_number + 1) % 4),
		transmit_pma1.channel_type = "auto",
		transmit_pma1.clkin_select = 1,
		transmit_pma1.clkmux_delay = "false",
		transmit_pma1.common_mode = "0.65V",
		transmit_pma1.dprio_config_mode = 6'h01,
		transmit_pma1.enable_reverse_serial_loopback = "false",
		transmit_pma1.logical_channel_address = (starting_channel_number + 1),
		transmit_pma1.logical_protocol_hint_0 = "xaui",
		transmit_pma1.low_speed_test_select = 0,
		transmit_pma1.physical_clkin1_mapping = "x4",
		transmit_pma1.preemp_pretap = preemphasis_ctrl_pretap_setting,
		transmit_pma1.preemp_pretap_inv = preemphasis_ctrl_pretap_inv_setting,
		transmit_pma1.preemp_tap_1 = preemphasis_ctrl_1stposttap_setting,
		transmit_pma1.preemp_tap_2 = preemphasis_ctrl_2ndposttap_setting,
		transmit_pma1.preemp_tap_2_inv = preemphasis_ctrl_2ndposttap_inv_setting,
		transmit_pma1.protocol_hint = "xaui",
		transmit_pma1.rx_detect = 0,
		transmit_pma1.serialization_factor = 10,
		transmit_pma1.slew_rate = "low",
		transmit_pma1.termination = transmitter_termination,
		transmit_pma1.use_external_termination = "false",
		transmit_pma1.use_pma_direct = "false",
		transmit_pma1.use_ser_double_data_mode = "false",
		transmit_pma1.vod_selection = vod_ctrl_setting, 
		transmit_pma1.lpm_type = "stratixiv_hssi_tx_pma";
	stratixiv_hssi_tx_pma   transmit_pma2
	( 
	.clockout(wire_transmit_pma2_clockout),
	.datain({{44{1'b0}}, tx_dataout_pcs_to_pma[59:40]}),
	.dataout(wire_transmit_pma2_dataout),
	.detectrxpowerdown(cent_unit_txdetectrxpowerdn[2]),
	.dftout(),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(tx_pmadprioin_wire[899:600]),
	.dprioout(wire_transmit_pma2_dprioout),
	.fastrefclk0in({2{1'b0}}),
	.fastrefclk1in(cmu_analogfastrefclkout[1:0]),
	.fastrefclk2in({2{1'b0}}),
	.fastrefclk4in({2{1'b0}}),
	.forceelecidle(1'b0),
	.powerdn(cent_unit_txobpowerdn[2]),
	.refclk0in({2{1'b0}}),
	.refclk0inpulse(1'b0),
	.refclk1in(cmu_analogrefclkout[1:0]),
	.refclk1inpulse(cmu_analogrefclkpulse[0]),
	.refclk2in({2{1'b0}}),
	.refclk2inpulse(1'b0),
	.refclk4in({2{1'b0}}),
	.refclk4inpulse(1'b0),
	.revserialfdbk(1'b0),
	.rxdetecten(txdetectrxout[2]),
	.rxdetectvalidout(),
	.rxfoundout(),
	.seriallpbkout(wire_transmit_pma2_seriallpbkout),
	.txpmareset(tx_analogreset_out[2])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.datainfull({20{1'b0}}),
	.extra10gin({11{1'b0}}),
	.fastrefclk3in({2{1'b0}}),
	.pclk({5{1'b0}}),
	.refclk3in({2{1'b0}}),
	.refclk3inpulse(1'b0),
	.rxdetectclk(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		transmit_pma2.analog_power = "auto",
		transmit_pma2.channel_number = ((starting_channel_number + 2) % 4),
		transmit_pma2.channel_type = "auto",
		transmit_pma2.clkin_select = 1,
		transmit_pma2.clkmux_delay = "false",
		transmit_pma2.common_mode = "0.65V",
		transmit_pma2.dprio_config_mode = 6'h01,
		transmit_pma2.enable_reverse_serial_loopback = "false",
		transmit_pma2.logical_channel_address = (starting_channel_number + 2),
		transmit_pma2.logical_protocol_hint_0 = "xaui",
		transmit_pma2.low_speed_test_select = 0,
		transmit_pma2.physical_clkin1_mapping = "x4",
		transmit_pma2.preemp_pretap = preemphasis_ctrl_pretap_setting,
		transmit_pma2.preemp_pretap_inv = preemphasis_ctrl_pretap_inv_setting,
		transmit_pma2.preemp_tap_1 = preemphasis_ctrl_1stposttap_setting,
		transmit_pma2.preemp_tap_2 = preemphasis_ctrl_2ndposttap_setting,
		transmit_pma2.preemp_tap_2_inv = preemphasis_ctrl_2ndposttap_inv_setting,
		transmit_pma2.protocol_hint = "xaui",
		transmit_pma2.rx_detect = 0,
		transmit_pma2.serialization_factor = 10,
		transmit_pma2.slew_rate = "low",
		transmit_pma2.termination = transmitter_termination,
		transmit_pma2.use_external_termination = "false",
		transmit_pma2.use_pma_direct = "false",
		transmit_pma2.use_ser_double_data_mode = "false",
		transmit_pma2.vod_selection = vod_ctrl_setting,
		transmit_pma2.lpm_type = "stratixiv_hssi_tx_pma";
	stratixiv_hssi_tx_pma   transmit_pma3
	( 
	.clockout(wire_transmit_pma3_clockout),
	.datain({{44{1'b0}}, tx_dataout_pcs_to_pma[79:60]}),
	.dataout(wire_transmit_pma3_dataout),
	.detectrxpowerdown(cent_unit_txdetectrxpowerdn[3]),
	.dftout(),
	.dpriodisable(w_cent_unit_dpriodisableout1w[0]),
	.dprioin(tx_pmadprioin_wire[1199:900]),
	.dprioout(wire_transmit_pma3_dprioout),
	.fastrefclk0in({2{1'b0}}),
	.fastrefclk1in(cmu_analogfastrefclkout[1:0]),
	.fastrefclk2in({2{1'b0}}),
	.fastrefclk4in({2{1'b0}}),
	.forceelecidle(1'b0),
	.powerdn(cent_unit_txobpowerdn[3]),
	.refclk0in({2{1'b0}}),
	.refclk0inpulse(1'b0),
	.refclk1in(cmu_analogrefclkout[1:0]),
	.refclk1inpulse(cmu_analogrefclkpulse[0]),
	.refclk2in({2{1'b0}}),
	.refclk2inpulse(1'b0),
	.refclk4in({2{1'b0}}),
	.refclk4inpulse(1'b0),
	.revserialfdbk(1'b0),
	.rxdetecten(txdetectrxout[3]),
	.rxdetectvalidout(),
	.rxfoundout(),
	.seriallpbkout(wire_transmit_pma3_seriallpbkout),
	.txpmareset(tx_analogreset_out[3])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.datainfull({20{1'b0}}),
	.extra10gin({11{1'b0}}),
	.fastrefclk3in({2{1'b0}}),
	.pclk({5{1'b0}}),
	.refclk3in({2{1'b0}}),
	.refclk3inpulse(1'b0),
	.rxdetectclk(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		transmit_pma3.analog_power = "auto",
		transmit_pma3.channel_number = ((starting_channel_number + 3) % 4),
		transmit_pma3.channel_type = "auto",
		transmit_pma3.clkin_select = 1,
		transmit_pma3.clkmux_delay = "false",
		transmit_pma3.common_mode = "0.65V",
		transmit_pma3.dprio_config_mode = 6'h01,
		transmit_pma3.enable_reverse_serial_loopback = "false",
		transmit_pma3.logical_channel_address = (starting_channel_number + 3),
		transmit_pma3.logical_protocol_hint_0 = "xaui",
		transmit_pma3.low_speed_test_select = 0,
		transmit_pma3.physical_clkin1_mapping = "x4",
		transmit_pma3.preemp_pretap = preemphasis_ctrl_pretap_setting,
		transmit_pma3.preemp_pretap_inv = preemphasis_ctrl_pretap_inv_setting,
		transmit_pma3.preemp_tap_1 = preemphasis_ctrl_1stposttap_setting,
		transmit_pma3.preemp_tap_2 = preemphasis_ctrl_2ndposttap_setting,
		transmit_pma3.preemp_tap_2_inv = preemphasis_ctrl_2ndposttap_inv_setting,
		transmit_pma3.protocol_hint = "xaui",
		transmit_pma3.rx_detect = 0,
		transmit_pma3.serialization_factor = 10,
		transmit_pma3.slew_rate = "low",
		transmit_pma3.termination = transmitter_termination,
		transmit_pma3.use_external_termination = "false",
		transmit_pma3.use_pma_direct = "false",
		transmit_pma3.use_ser_double_data_mode = "false",
		transmit_pma3.vod_selection = vod_ctrl_setting,
		transmit_pma3.lpm_type = "stratixiv_hssi_tx_pma";
	assign
		cent_unit_clkdivpowerdn = {wire_cent_unit0_clkdivpowerdn[0]},
		cent_unit_cmudividerdprioout = {wire_cent_unit0_cmudividerdprioout},
		cent_unit_cmuplldprioout = {wire_cent_unit0_cmuplldprioout},
		cent_unit_pllpowerdn = {wire_cent_unit0_pllpowerdn[1:0]},
		cent_unit_pllresetout = {wire_cent_unit0_pllresetout[1:0]},
		cent_unit_quadresetout = {wire_cent_unit0_quadresetout},
		cent_unit_rdenablesync = {tx_rdenablesync[0]},
		cent_unit_rx_ctrl = {wire_receive_pcs3_xgmctrldet, wire_receive_pcs2_xgmctrldet, wire_receive_pcs1_xgmctrldet, wire_receive_pcs0_xgmctrldet},
		cent_unit_rx_xgmdataout = {wire_cent_unit0_rxdataout},
		cent_unit_rxcrupowerdn = {wire_cent_unit0_rxcrupowerdown[5:0]},
		cent_unit_rxibpowerdn = {wire_cent_unit0_rxibpowerdown[5:0]},
		cent_unit_rxpcsdprioin = {rx_pcsdprioout[1599:0]},
		cent_unit_rxpcsdprioout = {wire_cent_unit0_rxpcsdprioout[1599:0]},
		cent_unit_rxpmadprioin = {{2{{300{1'b0}}}}, rx_pmadprioout[1199:0]},
		cent_unit_rxpmadprioout = {wire_cent_unit0_rxpmadprioout[1799:0]},
		cent_unit_tx_dprioin = {{600{1'b0}}, tx_txdprioout[599:0]},
		cent_unit_tx_xgmdataout = {wire_cent_unit0_txdataout[31:0]},
		cent_unit_txctrlout = {wire_cent_unit0_txctrlout},
		cent_unit_txdetectrxpowerdn = {wire_cent_unit0_txdetectrxpowerdown[5:0]},
		cent_unit_txdprioout = {wire_cent_unit0_txpcsdprioout[599:0]},
		cent_unit_txobpowerdn = {wire_cent_unit0_txobpowerdown[5:0]},
		cent_unit_txpmadprioin = {{2{{300{1'b0}}}}, tx_pmadprioout[1199:0]},
		cent_unit_txpmadprioout = {wire_cent_unit0_txpmadprioout[1799:0]},
		clk_div_clk0in = {pll0_out[3:0]},
		clk_div_cmudividerdprioin = {{100{1'b0}}, wire_central_clk_div0_dprioout, {400{1'b0}}},
		cmu_analogfastrefclkout = {wire_central_clk_div0_analogfastrefclkout},
		cmu_analogrefclkout = {wire_central_clk_div0_analogrefclkout},
		cmu_analogrefclkpulse = {wire_central_clk_div0_analogrefclkpulse},
		coreclkout = {coreclkout_wire[0]},
		coreclkout_wire = {wire_central_clk_div0_coreclkout},
		enabledeskew = {wire_cent_unit0_enabledeskew},
		fixedclk_to_cmu = {6{reconfig_clk}},
		int_hiprateswtichdone = {wire_central_clk_div0_rateswitchdone},
		int_rx_coreclkout = {wire_receive_pcs3_coreclkout, wire_receive_pcs2_coreclkout, wire_receive_pcs1_coreclkout, wire_receive_pcs0_coreclkout},
		int_rx_digitalreset_reg = {rx_digitalreset_reg0c[2]},
		int_rx_phfifobyteserdisable = {wire_receive_pcs3_phfifobyteserdisableout, wire_receive_pcs2_phfifobyteserdisableout, wire_receive_pcs1_phfifobyteserdisableout, wire_receive_pcs0_phfifobyteserdisableout},
		int_rx_phfifoptrsresetout = {wire_receive_pcs3_phfifoptrsresetout, wire_receive_pcs2_phfifoptrsresetout, wire_receive_pcs1_phfifoptrsresetout, wire_receive_pcs0_phfifoptrsresetout},
		int_rx_phfifordenableout = {wire_receive_pcs3_phfifordenableout, wire_receive_pcs2_phfifordenableout, wire_receive_pcs1_phfifordenableout, wire_receive_pcs0_phfifordenableout},
		int_rx_phfiforesetout = {wire_receive_pcs3_phfiforesetout, wire_receive_pcs2_phfiforesetout, wire_receive_pcs1_phfiforesetout, wire_receive_pcs0_phfiforesetout},
		int_rx_phfifowrdisableout = {wire_receive_pcs3_phfifowrdisableout, wire_receive_pcs2_phfifowrdisableout, wire_receive_pcs1_phfifowrdisableout, wire_receive_pcs0_phfifowrdisableout},
		int_rx_phfifoxnbytesel = {int_rxphfifox4byteselout[0], {2{1'b0}}, int_rxphfifox4byteselout[0], {2{1'b0}}, int_rxphfifox4byteselout[0], {2{1'b0}}, int_rxphfifox4byteselout[0], {2{1'b0}}},
		int_rx_phfifoxnrdenable = {int_rxphfifox4rdenableout[0], {2{1'b0}}, int_rxphfifox4rdenableout[0], {2{1'b0}}, int_rxphfifox4rdenableout[0], {2{1'b0}}, int_rxphfifox4rdenableout[0], {2{1'b0}}},
		int_rx_phfifoxnwrclk = {int_rxphfifox4wrclkout[0], {2{1'b0}}, int_rxphfifox4wrclkout[0], {2{1'b0}}, int_rxphfifox4wrclkout[0], {2{1'b0}}, int_rxphfifox4wrclkout[0], {2{1'b0}}},
		int_rx_phfifoxnwrenable = {int_rxphfifox4wrenableout[0], {2{1'b0}}, int_rxphfifox4wrenableout[0], {2{1'b0}}, int_rxphfifox4wrenableout[0], {2{1'b0}}, int_rxphfifox4wrenableout[0], {2{1'b0}}},
		int_rxcoreclk = {int_rx_coreclkout[0]},
		int_rxphfifordenable = {int_rx_phfifordenableout[0]},
		int_rxphfiforeset = {int_rx_phfiforesetout[0]},
		int_rxphfifox4byteselout = {wire_cent_unit0_rxphfifox4byteselout},
		int_rxphfifox4rdenableout = {wire_cent_unit0_rxphfifox4rdenableout},
		int_rxphfifox4wrclkout = {wire_cent_unit0_rxphfifox4wrclkout},
		int_rxphfifox4wrenableout = {wire_cent_unit0_rxphfifox4wrenableout},
		int_tx_coreclkout = {wire_transmit_pcs3_coreclkout, wire_transmit_pcs2_coreclkout, wire_transmit_pcs1_coreclkout, wire_transmit_pcs0_coreclkout},
		int_tx_digitalreset_reg = {tx_digitalreset_reg0c[2]},
		int_tx_phfiforddisableout = {wire_transmit_pcs3_phfiforddisableout, wire_transmit_pcs2_phfiforddisableout, wire_transmit_pcs1_phfiforddisableout, wire_transmit_pcs0_phfiforddisableout},
		int_tx_phfiforesetout = {wire_transmit_pcs3_phfiforesetout, wire_transmit_pcs2_phfiforesetout, wire_transmit_pcs1_phfiforesetout, wire_transmit_pcs0_phfiforesetout},
		int_tx_phfifowrenableout = {wire_transmit_pcs3_phfifowrenableout, wire_transmit_pcs2_phfifowrenableout, wire_transmit_pcs1_phfifowrenableout, wire_transmit_pcs0_phfifowrenableout},
		int_tx_phfifoxnbytesel = {int_txphfifox4byteselout[0], {2{1'b0}}, int_txphfifox4byteselout[0], {2{1'b0}}, int_txphfifox4byteselout[0], {2{1'b0}}, int_txphfifox4byteselout[0], {2{1'b0}}},
		int_tx_phfifoxnrdclk = {int_txphfifox4rdclkout[0], {2{1'b0}}, int_txphfifox4rdclkout[0], {2{1'b0}}, int_txphfifox4rdclkout[0], {2{1'b0}}, int_txphfifox4rdclkout[0], {2{1'b0}}},
		int_tx_phfifoxnrdenable = {int_txphfifox4rdenableout[0], {2{1'b0}}, int_txphfifox4rdenableout[0], {2{1'b0}}, int_txphfifox4rdenableout[0], {2{1'b0}}, int_txphfifox4rdenableout[0], {2{1'b0}}},
		int_tx_phfifoxnwrenable = {int_txphfifox4wrenableout[0], {2{1'b0}}, int_txphfifox4wrenableout[0], {2{1'b0}}, int_txphfifox4wrenableout[0], {2{1'b0}}, int_txphfifox4wrenableout[0], {2{1'b0}}},
		int_txcoreclk = {int_tx_coreclkout[0]},
		int_txphfiforddisable = {int_tx_phfiforddisableout[0]},
		int_txphfiforeset = {int_tx_phfiforesetout[0]},
		int_txphfifowrenable = {int_tx_phfifowrenableout[0]},
		int_txphfifox4byteselout = {wire_cent_unit0_txphfifox4byteselout},
		int_txphfifox4rdclkout = {wire_cent_unit0_txphfifox4rdclkout},
		int_txphfifox4rdenableout = {wire_cent_unit0_txphfifox4rdenableout},
		int_txphfifox4wrenableout = {wire_cent_unit0_txphfifox4wrenableout},
		nonusertocmu_out = {wire_cal_blk0_nonusertocmu},
		pll0_clkin = {{9{1'b0}}, pll_inclk_wire[0]},
		pll0_dprioin = {cent_unit_cmuplldprioout[1499:1200]},
		pll0_dprioout = {wire_tx_pll0_dprioout},
		pll0_out = {wire_tx_pll0_clk[3:0]},
		pll_ch_dataout_wire = {wire_rx_cdr_pll3_dataout, wire_rx_cdr_pll2_dataout, wire_rx_cdr_pll1_dataout, wire_rx_cdr_pll0_dataout},
		pll_ch_dprioout = {wire_rx_cdr_pll3_dprioout, wire_rx_cdr_pll2_dprioout, wire_rx_cdr_pll1_dprioout, wire_rx_cdr_pll0_dprioout},
		pll_cmuplldprioout = {{300{1'b0}}, pll0_dprioout[299:0], pll_ch_dprioout[1199:0]},
		pll_inclk_wire = {pll_inclk},
		pll_locked = {pll_locked_out[0]},
		pll_locked_out = {wire_tx_pll0_locked},
		pllpowerdn_in = {1'b0, cent_unit_pllpowerdn[0]},
		pllreset_in = {1'b0, cent_unit_pllresetout[0]},
		reconfig_fromgxb = {rx_pma_analogtestbus[16:1], wire_cent_unit0_dprioout},
		reconfig_togxb_busy = reconfig_togxb[3],
		reconfig_togxb_disable = reconfig_togxb[1],
		reconfig_togxb_in = reconfig_togxb[0],
		reconfig_togxb_load = reconfig_togxb[2],
		refclk_pma = {wire_central_clk_div0_refclkout},
		rx_adetectdeskew = {wire_receive_pcs3_adetectdeskew, wire_receive_pcs2_adetectdeskew, wire_receive_pcs1_adetectdeskew, wire_receive_pcs0_adetectdeskew},
		rx_alignstatussync = {rx_alignstatussyncout[0]},
		rx_alignstatussyncout = {wire_receive_pcs3_alignstatussyncout, wire_receive_pcs2_alignstatussyncout, wire_receive_pcs1_alignstatussyncout, wire_receive_pcs0_alignstatussyncout},
		rx_analogreset_in = {{2{1'b0}}, {4{((~ reconfig_togxb_busy) & rx_analogreset[0])}}},
		rx_analogreset_out = {wire_cent_unit0_rxanalogresetout[5:0]},
		rx_channelaligned = {rx_channelaligned_in[0]},
		rx_channelaligned_in = {wire_cent_unit0_alignstatus},
		rx_coreclk_in = {rx_coreclk[3:0]},
		rx_cruclk_in = {{9{1'b0}}, rx_pldcruclk_in[3], {9{1'b0}}, rx_pldcruclk_in[2], {9{1'b0}}, rx_pldcruclk_in[1], {9{1'b0}}, rx_pldcruclk_in[0]},
		rx_ctrldetect = {wire_receive_pcs3_ctrldetect[1:0], wire_receive_pcs2_ctrldetect[1:0], wire_receive_pcs1_ctrldetect[1:0], wire_receive_pcs0_ctrldetect[1:0]},
		rx_dataout = {rx_out_wire[63:0]},
		rx_deserclock_in = {rx_pll_clkout[15:0]},
		rx_digitalreset_in = {4{int_rx_digitalreset_reg[0]}},
		rx_digitalreset_out = {wire_cent_unit0_rxdigitalresetout[3:0]},
		rx_disablefifordin_in = {rx_disablefifordout_wire[0]},
		rx_disablefifordout_wire = {wire_receive_pcs3_disablefifordout, wire_receive_pcs2_disablefifordout, wire_receive_pcs1_disablefifordout, wire_receive_pcs0_disablefifordout},
		rx_disablefifowrin_in = {rx_disablefifowrout_wire[0]},
		rx_disablefifowrout_wire = {wire_receive_pcs3_disablefifowrout, wire_receive_pcs2_disablefifowrout, wire_receive_pcs1_disablefifowrout, wire_receive_pcs0_disablefifowrout},
		rx_disperr = {wire_receive_pcs3_disperr[1:0], wire_receive_pcs2_disperr[1:0], wire_receive_pcs1_disperr[1:0], wire_receive_pcs0_disperr[1:0]},
		rx_enapatternalign = {4{1'b0}},
		rx_errdetect = {wire_receive_pcs3_errdetect[1:0], wire_receive_pcs2_errdetect[1:0], wire_receive_pcs1_errdetect[1:0], wire_receive_pcs0_errdetect[1:0]},
		rx_fifordin_in = {rx_fifordout_wire[0]},
		rx_fifordout_wire = {wire_receive_pcs3_fifordout, wire_receive_pcs2_fifordout, wire_receive_pcs1_fifordout, wire_receive_pcs0_fifordout},
		rx_fiforesetrd = {wire_cent_unit0_fiforesetrd},
		rx_freqlocked = {(rx_freqlocked_wire[3] & (~ rx_analogreset[0])), (rx_freqlocked_wire[2] & (~ rx_analogreset[0])), (rx_freqlocked_wire[1] & (~ rx_analogreset[0])), (rx_freqlocked_wire[0] & (~ rx_analogreset[0]))},
		rx_freqlocked_wire = {wire_rx_cdr_pll3_freqlocked, wire_rx_cdr_pll2_freqlocked, wire_rx_cdr_pll1_freqlocked, wire_rx_cdr_pll0_freqlocked},
		rx_locktodata_wire = {((~ reconfig_togxb_busy) & rx_locktodata[3]), ((~ reconfig_togxb_busy) & rx_locktodata[2]), ((~ reconfig_togxb_busy) & rx_locktodata[1]), ((~ reconfig_togxb_busy) & rx_locktodata[0])},
		rx_locktorefclk_wire = {wire_receive_pcs3_cdrctrllocktorefclkout, wire_receive_pcs2_cdrctrllocktorefclkout, wire_receive_pcs1_cdrctrllocktorefclkout, wire_receive_pcs0_cdrctrllocktorefclkout},
		rx_masterclk = {rx_pma_clockout[0]},
		rx_out_wire = {wire_receive_pcs3_dataout[15:0], wire_receive_pcs2_dataout[15:0], wire_receive_pcs1_dataout[15:0], wire_receive_pcs0_dataout[15:0]},
		rx_patterndetect = {wire_receive_pcs3_patterndetect[1:0], wire_receive_pcs2_patterndetect[1:0], wire_receive_pcs1_patterndetect[1:0], wire_receive_pcs0_patterndetect[1:0]},
		rx_pcsdprioin_wire = {cent_unit_rxpcsdprioout[1599:0]},
		rx_pcsdprioout = {wire_receive_pcs3_dprioout, wire_receive_pcs2_dprioout, wire_receive_pcs1_dprioout, wire_receive_pcs0_dprioout},
		rx_phase_comp_fifo_error = {(rx_phfifooverflowout[3] | rx_phfifounderflowout[3]), (rx_phfifooverflowout[2] | rx_phfifounderflowout[2]), (rx_phfifooverflowout[1] | rx_phfifounderflowout[1]), (rx_phfifooverflowout[0] | rx_phfifounderflowout[0])},
		rx_phfifooverflowout = {wire_receive_pcs3_phfifooverflow, wire_receive_pcs2_phfifooverflow, wire_receive_pcs1_phfifooverflow, wire_receive_pcs0_phfifooverflow},
		rx_phfifordenable = {4{1'b1}},
		rx_phfiforeset = {4{1'b0}},
		rx_phfifounderflowout = {wire_receive_pcs3_phfifounderflow, wire_receive_pcs2_phfifounderflow, wire_receive_pcs1_phfifounderflow, wire_receive_pcs0_phfifounderflow},
		rx_phfifowrdisable = {4{1'b0}},
		rx_pldcruclk_in = {rx_cruclk[3:0]},
		rx_pll_clkout = {wire_rx_cdr_pll3_clk, wire_rx_cdr_pll2_clk, wire_rx_cdr_pll1_clk, wire_rx_cdr_pll0_clk},
		rx_pll_locked = {(rx_plllocked_wire[3] & (~ rx_analogreset[0])), (rx_plllocked_wire[2] & (~ rx_analogreset[0])), (rx_plllocked_wire[1] & (~ rx_analogreset[0])), (rx_plllocked_wire[0] & (~ rx_analogreset[0]))},
		rx_pll_pfdrefclkout_wire = {wire_rx_cdr_pll3_pfdrefclkout, wire_rx_cdr_pll2_pfdrefclkout, wire_rx_cdr_pll1_pfdrefclkout, wire_rx_cdr_pll0_pfdrefclkout},
		rx_plllocked_wire = {wire_rx_cdr_pll3_locked, wire_rx_cdr_pll2_locked, wire_rx_cdr_pll1_locked, wire_rx_cdr_pll0_locked},
		rx_pma_analogtestbus = {{51{1'b0}}, wire_receive_pma3_analogtestbus[5:2], wire_receive_pma2_analogtestbus[5:2], wire_receive_pma1_analogtestbus[5:2], wire_receive_pma0_analogtestbus[5:2], 1'b0},
		rx_pma_clockout = {wire_receive_pma3_clockout, wire_receive_pma2_clockout, wire_receive_pma1_clockout, wire_receive_pma0_clockout},
		rx_pma_dataout = {wire_receive_pma3_dataout, wire_receive_pma2_dataout, wire_receive_pma1_dataout, wire_receive_pma0_dataout},
		rx_pma_locktorefout = {wire_receive_pma3_locktorefout, wire_receive_pma2_locktorefout, wire_receive_pma1_locktorefout, wire_receive_pma0_locktorefout},
		rx_pma_recoverdataout_wire = {wire_receive_pma3_recoverdataout[19:0], wire_receive_pma2_recoverdataout[19:0], wire_receive_pma1_recoverdataout[19:0], wire_receive_pma0_recoverdataout[19:0]},
		rx_pmadprioin_wire = {{2{{300{1'b0}}}}, cent_unit_rxpmadprioout[1199:0]},
		rx_pmadprioout = {{2{{300{1'b0}}}}, wire_receive_pma3_dprioout, wire_receive_pma2_dprioout, wire_receive_pma1_dprioout, wire_receive_pma0_dprioout},
		rx_powerdown = {4{1'b0}},
		rx_powerdown_in = {{2{1'b0}}, rx_powerdown[3:0]},
		rx_prbscidenable = {4{1'b0}},
		rx_rdalign = {wire_receive_pcs3_rdalign, wire_receive_pcs2_rdalign, wire_receive_pcs1_rdalign, wire_receive_pcs0_rdalign},
		rx_rlv = {wire_receive_pcs3_rlv, wire_receive_pcs2_rlv, wire_receive_pcs1_rlv, wire_receive_pcs0_rlv},
		rx_rmfifodatadeleted = {wire_receive_pcs3_rmfifodatadeleted[1:0], wire_receive_pcs2_rmfifodatadeleted[1:0], wire_receive_pcs1_rmfifodatadeleted[1:0], wire_receive_pcs0_rmfifodatadeleted[1:0]},
		rx_rmfifodatainserted = {wire_receive_pcs3_rmfifodatainserted[1:0], wire_receive_pcs2_rmfifodatainserted[1:0], wire_receive_pcs1_rmfifodatainserted[1:0], wire_receive_pcs0_rmfifodatainserted[1:0]},
		rx_rmfifoempty = {wire_receive_pcs3_rmfifoempty, wire_receive_pcs2_rmfifoempty, wire_receive_pcs1_rmfifoempty, wire_receive_pcs0_rmfifoempty},
		rx_rmfifofull = {wire_receive_pcs3_rmfifofull, wire_receive_pcs2_rmfifofull, wire_receive_pcs1_rmfifofull, wire_receive_pcs0_rmfifofull},
		rx_rmfiforeset = {4{1'b0}},
		rx_runningdisp = {wire_receive_pcs3_runningdisp[1:0], wire_receive_pcs2_runningdisp[1:0], wire_receive_pcs1_runningdisp[1:0], wire_receive_pcs0_runningdisp[1:0]},
		rx_rxcruresetout = {wire_cent_unit0_rxcruresetout[5:0]},
		rx_syncstatus = {wire_receive_pcs3_syncstatus[1:0], wire_receive_pcs2_syncstatus[1:0], wire_receive_pcs1_syncstatus[1:0], wire_receive_pcs0_syncstatus[1:0]},
		rx_syncstatusdeskew = {wire_receive_pcs3_syncstatusdeskew, wire_receive_pcs2_syncstatusdeskew, wire_receive_pcs1_syncstatusdeskew, wire_receive_pcs0_syncstatusdeskew},
		rx_xgmctrlin = {wire_cent_unit0_rxctrlout},
		rx_xgmdataout = {wire_receive_pcs3_xgmdataout, wire_receive_pcs2_xgmdataout, wire_receive_pcs1_xgmdataout, wire_receive_pcs0_xgmdataout},
		rx_xgmdatavalid = {wire_receive_pcs3_xgmdatavalid, wire_receive_pcs2_xgmdatavalid, wire_receive_pcs1_xgmdatavalid, wire_receive_pcs0_xgmdatavalid},
		rx_xgmrunningdisp = {wire_receive_pcs3_xgmrunningdisp, wire_receive_pcs2_xgmrunningdisp, wire_receive_pcs1_xgmrunningdisp, wire_receive_pcs0_xgmrunningdisp},
		rxphfifowrdisable = {int_rx_phfifowrdisableout[0]},
		rxpll_dprioin = {{2{{300{1'b0}}}}, cent_unit_cmuplldprioout[1199:0]},
		tx_analogreset_out = {wire_cent_unit0_txanalogresetout[5:0]},
		tx_coreclk_in = {tx_coreclk[3:0]},
		tx_datain_wire = {tx_datain[63:0]},
		tx_dataout = {wire_transmit_pma3_dataout, wire_transmit_pma2_dataout, wire_transmit_pma1_dataout, wire_transmit_pma0_dataout},
		tx_dataout_pcs_to_pma = {wire_transmit_pcs3_dataout, wire_transmit_pcs2_dataout, wire_transmit_pcs1_dataout, wire_transmit_pcs0_dataout},
		tx_digitalreset_in = {4{int_tx_digitalreset_reg[0]}},
		tx_digitalreset_out = {wire_cent_unit0_txdigitalresetout[3:0]},
		tx_dprioin_wire = {{600{1'b0}}, cent_unit_txdprioout[599:0]},
		tx_forcedisp_wire = {4{{2{1'b0}}}},
		tx_localrefclk = {wire_transmit_pma3_clockout, wire_transmit_pma2_clockout, wire_transmit_pma1_clockout, wire_transmit_pma0_clockout},
		tx_phase_comp_fifo_error = {(tx_phfifooverflowout[3] | tx_phfifounderflowout[3]), (tx_phfifooverflowout[2] | tx_phfifounderflowout[2]), (tx_phfifooverflowout[1] | tx_phfifounderflowout[1]), (tx_phfifooverflowout[0] | tx_phfifounderflowout[0])},
		tx_phfifooverflowout = {wire_transmit_pcs3_phfifooverflow, wire_transmit_pcs2_phfifooverflow, wire_transmit_pcs1_phfifooverflow, wire_transmit_pcs0_phfifooverflow},
		tx_phfiforeset = {4{1'b0}},
		tx_phfifounderflowout = {wire_transmit_pcs3_phfifounderflow, wire_transmit_pcs2_phfifounderflow, wire_transmit_pcs1_phfifounderflow, wire_transmit_pcs0_phfifounderflow},
		tx_pmadprioin_wire = {{2{{300{1'b0}}}}, cent_unit_txpmadprioout[1199:0]},
		tx_pmadprioout = {{2{{300{1'b0}}}}, wire_transmit_pma3_dprioout, wire_transmit_pma2_dprioout, wire_transmit_pma1_dprioout, wire_transmit_pma0_dprioout},
		tx_rdenablesync = {wire_transmit_pcs3_rdenablesync, wire_transmit_pcs2_rdenablesync, wire_transmit_pcs1_rdenablesync, wire_transmit_pcs0_rdenablesync},
		tx_serialloopbackout = {wire_transmit_pma3_seriallpbkout, wire_transmit_pma2_seriallpbkout, wire_transmit_pma1_seriallpbkout, wire_transmit_pma0_seriallpbkout},
		tx_txdprioout = {wire_transmit_pcs3_dprioout, wire_transmit_pcs2_dprioout, wire_transmit_pcs1_dprioout, wire_transmit_pcs0_dprioout},
		tx_xgmctrlenable = {wire_transmit_pcs3_xgmctrlenable, wire_transmit_pcs2_xgmctrlenable, wire_transmit_pcs1_xgmctrlenable, wire_transmit_pcs0_xgmctrlenable},
		tx_xgmdataout = {wire_transmit_pcs3_xgmdataout, wire_transmit_pcs2_xgmdataout, wire_transmit_pcs1_xgmdataout, wire_transmit_pcs0_xgmdataout},
		txdetectrxout = {wire_transmit_pcs3_txdetectrx, wire_transmit_pcs2_txdetectrx, wire_transmit_pcs1_txdetectrx, wire_transmit_pcs0_txdetectrx},
		w_cent_unit_dpriodisableout1w = {wire_cent_unit0_dpriodisableout};
endmodule //hxaui_alt4gxb_alt4gxb_dksa
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
//(* ALTERA_ATTRIBUTE = {"-name SDC_STATEMENT \"set_false_path -from [get_registers *hxaui_0*hxaui_alt4gxb*hxaui_alt4gxb_alt4gxb_dksa_component*fifo*flow] -to [get_registers *xaui_phy*hxaui_csr*tx_phase_comp_fifo_error_c[*]]\" ;-name SDC_STATEMENT \"set_false_path -from [get_registers *hxaui_0*hxaui_alt4gxb*hxaui_alt4gxb_alt4gxb_dksa_component*] -to [get_registers *xaui_phy*hxaui_csr*rx*_c[*]]\" ;-name SDC_STATEMENT \"set_false_path -from [get_registers {*siv_xcvr_xaui*hxaui_csr*hxaui_csr_reset0q[*]}] -to  [get_registers {*xaui_phy*hxaui_0*hxaui_alt4gxb*hxaui_alt4gxb_alt4gxb_dksa_component|*digitalreset*}]\" ;-name SDC_STATEMENT \"set_false_path -from [get_registers {*siv_xcvr_xaui*alt_pma_ch_controller_0*rc*}] -to  [get_registers {*xaui_phy*hxaui_0*hxaui_alt4gxb*hxaui_alt4gxb_alt4gxb_dksa_component|*digitalreset*}]\""} *)
module hxaui_alt4gxb (
	cal_blk_clk,
	cal_blk_powerdown,
	gxb_powerdown,
	pll_inclk,
	pll_powerdown,
	reconfig_clk,
	reconfig_togxb,
	rx_analogreset,
	rx_cruclk,
	rx_datain,
	rx_digitalreset,
	rx_invpolarity,
	rx_locktodata,
	rx_locktorefclk,
	rx_seriallpbken,
	tx_coreclk,
	tx_ctrlenable,
	tx_datain,
	tx_digitalreset,
	tx_invpolarity,
	coreclkout,
	pll_locked,
	reconfig_fromgxb,
	rx_channelaligned,
	rx_ctrldetect,
	rx_dataout,
	rx_disperr,
	rx_errdetect,
	rx_freqlocked,
	rx_patterndetect,
	rx_phase_comp_fifo_error,
	rx_pll_locked,
	rx_rlv,
	rx_rmfifodatadeleted,
	rx_rmfifodatainserted,
	rx_rmfifoempty,
	rx_rmfifofull,
	rx_runningdisp,
	rx_syncstatus,
	rx_recovered_clk,
	tx_dataout,
	tx_phase_comp_fifo_error);

	input	  cal_blk_clk;
	input	  cal_blk_powerdown;
	input	[0:0]  gxb_powerdown;
	input	  pll_inclk;
	input	[0:0]  pll_powerdown;
	input	  reconfig_clk;
	input	[3:0]  reconfig_togxb;
	input	[0:0]  rx_analogreset;
	wire	[3:0]  rx_coreclk;
	input	[3:0]  rx_cruclk;
	input	[3:0]  rx_datain;
	input	[0:0]  rx_digitalreset;
	input	[3:0]  rx_invpolarity;
	input	[3:0]  rx_locktodata;
	input	[3:0]  rx_locktorefclk;
	input	[3:0]  rx_seriallpbken;
	input	[3:0]  tx_coreclk;
	input	[7:0]  tx_ctrlenable;
	input	[63:0]  tx_datain;
	input	[0:0]  tx_digitalreset;
	input	[3:0]  tx_invpolarity;
	output	[0:0]  coreclkout;
	output	[0:0]  pll_locked;
	output	[16:0]  reconfig_fromgxb;
	output	[0:0]  rx_channelaligned;
	output	[7:0]  rx_ctrldetect;
	output	[63:0]  rx_dataout;
	output	[7:0]  rx_disperr;
	output	[7:0]  rx_errdetect;
	output	[3:0]  rx_freqlocked;
	output	[3:0]  rx_recovered_clk;
	output	[7:0]  rx_patterndetect;
	output	[3:0]  rx_phase_comp_fifo_error;
	output	[3:0]  rx_pll_locked;
	output	[3:0]  rx_rlv;
	output	[7:0]  rx_rmfifodatadeleted;
	output	[7:0]  rx_rmfifodatainserted;
	output	[3:0]  rx_rmfifoempty;
	output	[3:0]  rx_rmfifofull;
	output	[7:0]  rx_runningdisp;
	output	[7:0]  rx_syncstatus;
	output	[3:0]  tx_dataout;
	output	[3:0]  tx_phase_comp_fifo_error;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0	[3:0]  rx_cruclk;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	parameter		starting_channel_number = 0;
        parameter               transmitter_termination = "OCT 100 OHMS";//OCT_85_OHMS,OCT_100_OHMS,OCT_120_OHMS,OCT_150_OHMS
        parameter               receiver_termination = "OCT 100 OHMS"; //OCT_85_OHMS,OCT_100_OHMS,OCT_120_OHMS,OCT_150_OHMS
        parameter               rx_common_mode = "0.82v";
        
        parameter               preemphasis_ctrl_pretap_setting = 0;//0-7
        parameter               preemphasis_ctrl_pretap_inv_setting = "FALSE";//TRUE or FALSE.
        parameter               preemphasis_ctrl_1stposttap_setting = 5;//0-15
        parameter               preemphasis_ctrl_2ndposttap_setting = 0;//0-7
        parameter               preemphasis_ctrl_2ndposttap_inv_setting = "FALSE";//TRUE or FALSE.
        parameter               vod_ctrl_setting = 1;//0-7
        
        parameter               equalizer_dcgain_setting = 0; //0-4
        parameter               equalizer_ctrl_a_setting = 0;
        parameter               equalizer_ctrl_b_setting = 0;
        parameter               equalizer_ctrl_c_setting = 0;
        parameter               equalizer_ctrl_d_setting = 0;
        parameter               equalizer_ctrl_v_setting = 0;


	wire [7:0] sub_wire0;
	wire [3:0] sub_wire1;
	wire [3:0] sub_wire2;
	wire [7:0] sub_wire3;
	wire [0:0] sub_wire4;
	wire [7:0] sub_wire5;
	wire [7:0] sub_wire6;
	wire [7:0] sub_wire7;
	wire [3:0] sub_wire8;
	wire [3:0] sub_wire9;
	wire [7:0] sub_wire10;
	wire [3:0] sub_wire11;
	wire [3:0] sub_wire12;
	wire [7:0] sub_wire13;
	wire [3:0] sub_wire14;
	wire [0:0] sub_wire15;
	wire [3:0] sub_wire16;
	wire [7:0] sub_wire17;
	wire [16:0] sub_wire18;
	wire [0:0] sub_wire19;
	wire [63:0] sub_wire20;
	wire [7:0] rx_disperr = sub_wire0[7:0];
	wire [3:0] rx_rmfifoempty = sub_wire1[3:0];
	wire [3:0] rx_rlv = sub_wire2[3:0];
	wire [7:0] rx_patterndetect = sub_wire3[7:0];
	wire [0:0] coreclkout = sub_wire4[0:0];
	wire [7:0] rx_ctrldetect = sub_wire5[7:0];
	wire [7:0] rx_errdetect = sub_wire6[7:0];
	wire [7:0] rx_rmfifodatadeleted = sub_wire7[7:0];
	wire [3:0] rx_pll_locked = sub_wire8[3:0];
	wire [3:0] rx_freqlocked = sub_wire9[3:0];
	wire [7:0] rx_runningdisp = sub_wire10[7:0];
	wire [3:0] tx_phase_comp_fifo_error = sub_wire11[3:0];
	wire [3:0] tx_dataout = sub_wire12[3:0];
	wire [7:0] rx_rmfifodatainserted = sub_wire13[7:0];
	wire [3:0] rx_phase_comp_fifo_error = sub_wire14[3:0];
	wire [0:0] rx_channelaligned = sub_wire15[0:0];
	wire [3:0] rx_rmfifofull = sub_wire16[3:0];
	wire [7:0] rx_syncstatus = sub_wire17[7:0];
	wire [16:0] reconfig_fromgxb = sub_wire18[16:0];
	wire [0:0] pll_locked = sub_wire19[0:0];
	wire [63:0] rx_dataout = sub_wire20[63:0];
    wire 	   coreclkout_global;
    // Start - Manually instantiate the clock control block without requiring the MegaWizard generated file
    	stratixiv_clkena   sd1
	( 
	.ena(1'b1),
	.enaout(),
	.inclk(sub_wire4),
	.outclk(coreclkout_global)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		//sd1.clock_type = "Global Clock",
		sd1.ena_register_mode = "falling edge",
		sd1.lpm_type = "stratixiv_clkena";
    // End 
    assign rx_coreclk = {4{coreclkout_global}};
            
	hxaui_alt4gxb_alt4gxb_dksa	hxaui_alt4gxb_alt4gxb_dksa_component (
				.rx_locktorefclk (rx_locktorefclk),
				.rx_invpolarity (rx_invpolarity),
				.pll_inclk (pll_inclk),
				.tx_invpolarity (tx_invpolarity),
				.gxb_powerdown (gxb_powerdown),
				.tx_datain (tx_datain),
				.rx_cruclk (rx_cruclk),
				.cal_blk_clk (cal_blk_clk),
				.pll_powerdown (pll_powerdown),
				.reconfig_clk (reconfig_clk),
				.rx_seriallpbken (rx_seriallpbken),
				.rx_locktodata (rx_locktodata),
				.rx_datain (rx_datain),
				.cal_blk_powerdown (cal_blk_powerdown),
				.reconfig_togxb (reconfig_togxb),
				.tx_coreclk (tx_coreclk),
				.tx_ctrlenable (tx_ctrlenable),
				.rx_analogreset (rx_analogreset),
				.rx_digitalreset (rx_digitalreset),
				.tx_digitalreset (tx_digitalreset),
				.rx_disperr (sub_wire0),
				.rx_rmfifoempty (sub_wire1),
				.rx_rlv (sub_wire2),
				.rx_patterndetect (sub_wire3),
				.coreclkout (sub_wire4),
				.rx_ctrldetect (sub_wire5),
				.rx_errdetect (sub_wire6),
				.rx_rmfifodatadeleted (sub_wire7),
				.rx_pll_locked (sub_wire8),
				.rx_freqlocked (sub_wire9),
				.rx_runningdisp (sub_wire10),
				.tx_phase_comp_fifo_error (sub_wire11),
				.tx_dataout (sub_wire12),
				.rx_rmfifodatainserted (sub_wire13),
				.rx_phase_comp_fifo_error (sub_wire14),
				.rx_channelaligned (sub_wire15),
				.rx_rmfifofull (sub_wire16),
				.rx_coreclk (rx_coreclk),
				.rx_syncstatus (sub_wire17),
				.rx_recovered_clk(rx_recovered_clk),          // o
				.reconfig_fromgxb (sub_wire18),
				.pll_locked (sub_wire19),
				.rx_dataout (sub_wire20));
	defparam
		hxaui_alt4gxb_alt4gxb_dksa_component.starting_channel_number = starting_channel_number,
		hxaui_alt4gxb_alt4gxb_dksa_component.receiver_termination = receiver_termination, 
		hxaui_alt4gxb_alt4gxb_dksa_component.transmitter_termination = transmitter_termination, 
		hxaui_alt4gxb_alt4gxb_dksa_component.preemphasis_ctrl_pretap_setting = preemphasis_ctrl_pretap_setting, 
		hxaui_alt4gxb_alt4gxb_dksa_component.preemphasis_ctrl_pretap_inv_setting = preemphasis_ctrl_pretap_inv_setting, 
		hxaui_alt4gxb_alt4gxb_dksa_component.preemphasis_ctrl_1stposttap_setting = preemphasis_ctrl_1stposttap_setting, 
		hxaui_alt4gxb_alt4gxb_dksa_component.preemphasis_ctrl_2ndposttap_setting = preemphasis_ctrl_2ndposttap_setting, 
		hxaui_alt4gxb_alt4gxb_dksa_component.preemphasis_ctrl_2ndposttap_inv_setting = preemphasis_ctrl_2ndposttap_inv_setting, 
		hxaui_alt4gxb_alt4gxb_dksa_component.vod_ctrl_setting = vod_ctrl_setting, 
		hxaui_alt4gxb_alt4gxb_dksa_component.rx_common_mode = rx_common_mode, 
		hxaui_alt4gxb_alt4gxb_dksa_component.equalizer_ctrl_a_setting = equalizer_ctrl_a_setting, 
		hxaui_alt4gxb_alt4gxb_dksa_component.equalizer_ctrl_b_setting = equalizer_ctrl_b_setting, 
		hxaui_alt4gxb_alt4gxb_dksa_component.equalizer_ctrl_c_setting = equalizer_ctrl_c_setting, 
		hxaui_alt4gxb_alt4gxb_dksa_component.equalizer_ctrl_d_setting = equalizer_ctrl_d_setting, 
		hxaui_alt4gxb_alt4gxb_dksa_component.equalizer_ctrl_v_setting = equalizer_ctrl_v_setting,
		hxaui_alt4gxb_alt4gxb_dksa_component.equalizer_dcgain_setting = equalizer_dcgain_setting;



endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Stratix IV"
// Retrieval info: PRIVATE: NUM_KEYS NUMERIC "0"
// Retrieval info: PRIVATE: RECONFIG_PROTOCOL STRING "BASIC"
// Retrieval info: PRIVATE: RECONFIG_SUBPROTOCOL STRING "none"
// Retrieval info: PRIVATE: RX_ENABLE_DC_COUPLING STRING "false"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "0"
// Retrieval info: PRIVATE: WIZ_BASE_DATA_RATE STRING "3125.0"
// Retrieval info: PRIVATE: WIZ_BASE_DATA_RATE_ENABLE STRING "0"
// Retrieval info: PRIVATE: WIZ_DATA_RATE STRING "3125"
// Retrieval info: PRIVATE: WIZ_DPRIO_INCLK_FREQ_ARRAY STRING "50.0            "
// Retrieval info: PRIVATE: WIZ_DPRIO_INPUT_A STRING "2000"
// Retrieval info: PRIVATE: WIZ_DPRIO_INPUT_A_UNIT STRING "Mbps"
// Retrieval info: PRIVATE: WIZ_DPRIO_INPUT_B STRING "50.0"
// Retrieval info: PRIVATE: WIZ_DPRIO_INPUT_B_UNIT STRING "MHz"
// Retrieval info: PRIVATE: WIZ_DPRIO_INPUT_SELECTION NUMERIC "0"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK0_FREQ STRING "250.0"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK0_PROTOCOL STRING "XAUI"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK1_FREQ STRING "250"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK1_PROTOCOL STRING "Basic"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK2_FREQ STRING "250"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK2_PROTOCOL STRING "Basic"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK3_FREQ STRING "250"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK3_PROTOCOL STRING "Basic"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK4_FREQ STRING "250"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK4_PROTOCOL STRING "Basic"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK5_FREQ STRING "250"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK5_PROTOCOL STRING "Basic"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK6_FREQ STRING "250"
// Retrieval info: PRIVATE: WIZ_DPRIO_REF_CLK6_PROTOCOL STRING "Basic"
// Retrieval info: PRIVATE: WIZ_ENABLE_EQUALIZER_CTRL NUMERIC "0"
// Retrieval info: PRIVATE: WIZ_EQUALIZER_CTRL_SETTING NUMERIC "0"
// Retrieval info: PRIVATE: WIZ_FORCE_DEFAULT_SETTINGS NUMERIC "1"
// Retrieval info: PRIVATE: WIZ_INCLK_FREQ STRING "156.25"
// Retrieval info: PRIVATE: WIZ_INCLK_FREQ_ARRAY STRING "156.25"
// Retrieval info: PRIVATE: WIZ_INPUT_A STRING "3125"
// Retrieval info: PRIVATE: WIZ_INPUT_A_UNIT STRING "Mbps"
// Retrieval info: PRIVATE: WIZ_INPUT_B STRING "156.25"
// Retrieval info: PRIVATE: WIZ_INPUT_B_UNIT STRING "MHz"
// Retrieval info: PRIVATE: WIZ_INPUT_SELECTION NUMERIC "0"
// Retrieval info: PRIVATE: WIZ_PROTOCOL STRING "XAUI"
// Retrieval info: PRIVATE: WIZ_SUBPROTOCOL STRING "None"
// Retrieval info: PRIVATE: WIZ_WORD_ALIGN_FLIP_PATTERN STRING "0"
// Retrieval info: PARAMETER: STARTING_CHANNEL_NUMBER NUMERIC "0"
// Retrieval info: CONSTANT: EFFECTIVE_DATA_RATE STRING "3125 Mbps"
// Retrieval info: CONSTANT: ENABLE_LC_TX_PLL STRING "false"
// Retrieval info: CONSTANT: EQUALIZER_CTRL_A_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: EQUALIZER_CTRL_B_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: EQUALIZER_CTRL_C_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: EQUALIZER_CTRL_D_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: EQUALIZER_CTRL_V_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: EQUALIZER_DCGAIN_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: GEN_RECONFIG_PLL STRING "false"
// Retrieval info: CONSTANT: GXB_ANALOG_POWER STRING "AUTO"
// Retrieval info: CONSTANT: GX_CHANNEL_TYPE STRING "AUTO"
// Retrieval info: CONSTANT: INPUT_CLOCK_FREQUENCY STRING "156.25 MHz"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Stratix IV"
// Retrieval info: CONSTANT: INTENDED_DEVICE_SPEED_GRADE STRING "2"
// Retrieval info: CONSTANT: INTENDED_DEVICE_VARIANT STRING "GX"
// Retrieval info: CONSTANT: LOOPBACK_MODE STRING "slb"
// Retrieval info: CONSTANT: LPM_TYPE STRING "alt4gxb"
// Retrieval info: CONSTANT: NUMBER_OF_CHANNELS NUMERIC "4"
// Retrieval info: CONSTANT: OPERATION_MODE STRING "duplex"
// Retrieval info: CONSTANT: PLL_CONTROL_WIDTH NUMERIC "1"
// Retrieval info: CONSTANT: PLL_PFD_FB_MODE STRING "internal"
// Retrieval info: CONSTANT: PREEMPHASIS_CTRL_1STPOSTTAP_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: PREEMPHASIS_CTRL_2NDPOSTTAP_INV_SETTING STRING "false"
// Retrieval info: CONSTANT: PREEMPHASIS_CTRL_2NDPOSTTAP_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: PREEMPHASIS_CTRL_PRETAP_INV_SETTING STRING "false"
// Retrieval info: CONSTANT: PREEMPHASIS_CTRL_PRETAP_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: PROTOCOL STRING "xaui"
// Retrieval info: CONSTANT: RECEIVER_TERMINATION STRING "oct_100_ohms"
// Retrieval info: CONSTANT: RECONFIG_DPRIO_MODE NUMERIC "0"
// Retrieval info: CONSTANT: RX_8B_10B_MODE STRING "normal"
// Retrieval info: CONSTANT: RX_ALIGN_PATTERN STRING "0101111100"
// Retrieval info: CONSTANT: RX_ALIGN_PATTERN_LENGTH NUMERIC "10"
// Retrieval info: CONSTANT: RX_ALLOW_ALIGN_POLARITY_INVERSION STRING "true"
// Retrieval info: CONSTANT: RX_ALLOW_PIPE_POLARITY_INVERSION STRING "false"
// Retrieval info: CONSTANT: RX_BITSLIP_ENABLE STRING "false"
// Retrieval info: CONSTANT: RX_BYTE_ORDERING_MODE STRING "NONE"
// Retrieval info: CONSTANT: RX_CHANNEL_BONDING STRING "x4"
// Retrieval info: CONSTANT: RX_CHANNEL_WIDTH NUMERIC "16"
// Retrieval info: CONSTANT: RX_COMMON_MODE STRING "0.82v"
// Retrieval info: CONSTANT: RX_CRU_BANDWIDTH_TYPE STRING "Auto"
// Retrieval info: CONSTANT: RX_CRU_INCLOCK0_PERIOD NUMERIC "6400"
// Retrieval info: CONSTANT: RX_DATAPATH_PROTOCOL STRING "xaui"
// Retrieval info: CONSTANT: RX_DATA_RATE NUMERIC "3125"
// Retrieval info: CONSTANT: RX_DATA_RATE_REMAINDER NUMERIC "0"
// Retrieval info: CONSTANT: RX_DIGITALRESET_PORT_WIDTH NUMERIC "1"
// Retrieval info: CONSTANT: RX_ENABLE_BIT_REVERSAL STRING "false"
// Retrieval info: CONSTANT: RX_ENABLE_LOCK_TO_DATA_SIG STRING "true"
// Retrieval info: CONSTANT: RX_ENABLE_LOCK_TO_REFCLK_SIG STRING "true"
// Retrieval info: CONSTANT: RX_ENABLE_SELF_TEST_MODE STRING "false"
// Retrieval info: CONSTANT: RX_FORCE_SIGNAL_DETECT STRING "true"
// Retrieval info: CONSTANT: RX_PPMSELECT NUMERIC "32"
// Retrieval info: CONSTANT: RX_RATE_MATCH_FIFO_MODE STRING "normal"
// Retrieval info: CONSTANT: RX_RATE_MATCH_PATTERN1 STRING "1101000011"
// Retrieval info: CONSTANT: RX_RATE_MATCH_PATTERN2 STRING "0010111100"
// Retrieval info: CONSTANT: RX_RATE_MATCH_PATTERN_SIZE NUMERIC "10"
// Retrieval info: CONSTANT: RX_RUN_LENGTH NUMERIC "40"
// Retrieval info: CONSTANT: RX_RUN_LENGTH_ENABLE STRING "true"
// Retrieval info: CONSTANT: RX_SIGNAL_DETECT_THRESHOLD NUMERIC "2"
// Retrieval info: CONSTANT: RX_USE_ALIGN_STATE_MACHINE STRING "true"
// Retrieval info: CONSTANT: RX_USE_CLKOUT STRING "false"
// Retrieval info: CONSTANT: RX_USE_CORECLK STRING "true"
// Retrieval info: CONSTANT: RX_USE_CRUCLK STRING "true"
// Retrieval info: CONSTANT: RX_USE_DESERIALIZER_DOUBLE_DATA_MODE STRING "false"
// Retrieval info: CONSTANT: RX_USE_DESKEW_FIFO STRING "true"
// Retrieval info: CONSTANT: RX_USE_DOUBLE_DATA_MODE STRING "true"
// Retrieval info: CONSTANT: RX_USE_RATE_MATCH_PATTERN1_ONLY STRING "false"
// Retrieval info: CONSTANT: TRANSMITTER_TERMINATION STRING "oct_100_ohms"
// Retrieval info: CONSTANT: TX_8B_10B_MODE STRING "normal"
// Retrieval info: CONSTANT: TX_ALLOW_POLARITY_INVERSION STRING "true"
// Retrieval info: CONSTANT: TX_ANALOG_POWER STRING "AUTO"
// Retrieval info: CONSTANT: TX_CHANNEL_BONDING STRING "x4"
// Retrieval info: CONSTANT: TX_CHANNEL_WIDTH NUMERIC "16"
// Retrieval info: CONSTANT: TX_CLKOUT_WIDTH NUMERIC "4"
// Retrieval info: CONSTANT: TX_COMMON_MODE STRING "0.65v"
// Retrieval info: CONSTANT: TX_DATA_RATE NUMERIC "3125"
// Retrieval info: CONSTANT: TX_DATA_RATE_REMAINDER NUMERIC "0"
// Retrieval info: CONSTANT: TX_DIGITALRESET_PORT_WIDTH NUMERIC "1"
// Retrieval info: CONSTANT: TX_ENABLE_BIT_REVERSAL STRING "false"
// Retrieval info: CONSTANT: TX_ENABLE_SELF_TEST_MODE STRING "false"
// Retrieval info: CONSTANT: TX_PLL_BANDWIDTH_TYPE STRING "Auto"
// Retrieval info: CONSTANT: TX_PLL_INCLK0_PERIOD NUMERIC "6400"
// Retrieval info: CONSTANT: TX_PLL_TYPE STRING "CMU"
// Retrieval info: CONSTANT: TX_SLEW_RATE STRING "low"
// Retrieval info: CONSTANT: TX_TRANSMIT_PROTOCOL STRING "xaui"
// Retrieval info: CONSTANT: TX_USE_CORECLK STRING "true"
// Retrieval info: CONSTANT: TX_USE_DOUBLE_DATA_MODE STRING "true"
// Retrieval info: CONSTANT: TX_USE_SERIALIZER_DOUBLE_DATA_MODE STRING "false"
// Retrieval info: CONSTANT: USE_CALIBRATION_BLOCK STRING "true"
// Retrieval info: CONSTANT: VOD_CTRL_SETTING NUMERIC "4"
// Retrieval info: CONSTANT: coreclkout_control_width NUMERIC "1"
// Retrieval info: CONSTANT: gxb_powerdown_width NUMERIC "1"
// Retrieval info: CONSTANT: number_of_quads NUMERIC "1"
// Retrieval info: CONSTANT: reconfig_calibration STRING "true"
// Retrieval info: CONSTANT: reconfig_fromgxb_port_width NUMERIC "17"
// Retrieval info: CONSTANT: reconfig_togxb_port_width NUMERIC "4"
// Retrieval info: CONSTANT: rx_cru_m_divider NUMERIC "10"
// Retrieval info: CONSTANT: rx_cru_n_divider NUMERIC "1"
// Retrieval info: CONSTANT: rx_cru_vco_post_scale_divider NUMERIC "2"
// Retrieval info: CONSTANT: rx_dwidth_factor NUMERIC "2"
// Retrieval info: CONSTANT: rx_signal_detect_loss_threshold STRING "1"
// Retrieval info: CONSTANT: rx_signal_detect_valid_threshold STRING "1"
// Retrieval info: CONSTANT: rx_use_external_termination STRING "false"
// Retrieval info: CONSTANT: rx_word_aligner_num_byte NUMERIC "1"
// Retrieval info: CONSTANT: tx_dwidth_factor NUMERIC "2"
// Retrieval info: CONSTANT: tx_pll_clock_post_divider NUMERIC "1"
// Retrieval info: CONSTANT: tx_pll_m_divider NUMERIC "10"
// Retrieval info: CONSTANT: tx_pll_n_divider NUMERIC "1"
// Retrieval info: CONSTANT: tx_pll_vco_post_scale_divider NUMERIC "2"
// Retrieval info: CONSTANT: tx_use_external_termination STRING "false"
// Retrieval info: USED_PORT: cal_blk_clk 0 0 0 0 INPUT NODEFVAL "cal_blk_clk"
// Retrieval info: USED_PORT: cal_blk_powerdown 0 0 0 0 INPUT NODEFVAL "cal_blk_powerdown"
// Retrieval info: USED_PORT: coreclkout 0 0 1 0 OUTPUT NODEFVAL "coreclkout[0..0]"
// Retrieval info: USED_PORT: gxb_powerdown 0 0 1 0 INPUT NODEFVAL "gxb_powerdown[0..0]"
// Retrieval info: USED_PORT: pll_inclk 0 0 0 0 INPUT NODEFVAL "pll_inclk"
// Retrieval info: USED_PORT: pll_locked 0 0 1 0 OUTPUT NODEFVAL "pll_locked[0..0]"
// Retrieval info: USED_PORT: pll_powerdown 0 0 1 0 INPUT NODEFVAL "pll_powerdown[0..0]"
// Retrieval info: USED_PORT: reconfig_clk 0 0 0 0 INPUT NODEFVAL "reconfig_clk"
// Retrieval info: USED_PORT: reconfig_fromgxb 0 0 17 0 OUTPUT NODEFVAL "reconfig_fromgxb[16..0]"
// Retrieval info: USED_PORT: reconfig_togxb 0 0 4 0 INPUT NODEFVAL "reconfig_togxb[3..0]"
// Retrieval info: USED_PORT: rx_analogreset 0 0 1 0 INPUT NODEFVAL "rx_analogreset[0..0]"
// Retrieval info: USED_PORT: rx_channelaligned 0 0 1 0 OUTPUT NODEFVAL "rx_channelaligned[0..0]"
// Retrieval info: USED_PORT: rx_cruclk 0 0 4 0 INPUT GND "rx_cruclk[3..0]"
// Retrieval info: USED_PORT: rx_ctrldetect 0 0 8 0 OUTPUT NODEFVAL "rx_ctrldetect[7..0]"
// Retrieval info: USED_PORT: rx_datain 0 0 4 0 INPUT NODEFVAL "rx_datain[3..0]"
// Retrieval info: USED_PORT: rx_dataout 0 0 64 0 OUTPUT NODEFVAL "rx_dataout[63..0]"
// Retrieval info: USED_PORT: rx_digitalreset 0 0 1 0 INPUT NODEFVAL "rx_digitalreset[0..0]"
// Retrieval info: USED_PORT: rx_disperr 0 0 8 0 OUTPUT NODEFVAL "rx_disperr[7..0]"
// Retrieval info: USED_PORT: rx_errdetect 0 0 8 0 OUTPUT NODEFVAL "rx_errdetect[7..0]"
// Retrieval info: USED_PORT: rx_freqlocked 0 0 4 0 OUTPUT NODEFVAL "rx_freqlocked[3..0]"
// Retrieval info: USED_PORT: rx_invpolarity 0 0 4 0 INPUT NODEFVAL "rx_invpolarity[3..0]"
// Retrieval info: USED_PORT: rx_locktodata 0 0 4 0 INPUT NODEFVAL "rx_locktodata[3..0]"
// Retrieval info: USED_PORT: rx_locktorefclk 0 0 4 0 INPUT NODEFVAL "rx_locktorefclk[3..0]"
// Retrieval info: USED_PORT: rx_patterndetect 0 0 8 0 OUTPUT NODEFVAL "rx_patterndetect[7..0]"
// Retrieval info: USED_PORT: rx_phase_comp_fifo_error 0 0 4 0 OUTPUT NODEFVAL "rx_phase_comp_fifo_error[3..0]"
// Retrieval info: USED_PORT: rx_pll_locked 0 0 4 0 OUTPUT NODEFVAL "rx_pll_locked[3..0]"
// Retrieval info: USED_PORT: rx_rlv 0 0 4 0 OUTPUT NODEFVAL "rx_rlv[3..0]"
// Retrieval info: USED_PORT: rx_rmfifodatadeleted 0 0 8 0 OUTPUT NODEFVAL "rx_rmfifodatadeleted[7..0]"
// Retrieval info: USED_PORT: rx_rmfifodatainserted 0 0 8 0 OUTPUT NODEFVAL "rx_rmfifodatainserted[7..0]"
// Retrieval info: USED_PORT: rx_rmfifoempty 0 0 4 0 OUTPUT NODEFVAL "rx_rmfifoempty[3..0]"
// Retrieval info: USED_PORT: rx_rmfifofull 0 0 4 0 OUTPUT NODEFVAL "rx_rmfifofull[3..0]"
// Retrieval info: USED_PORT: rx_runningdisp 0 0 8 0 OUTPUT NODEFVAL "rx_runningdisp[7..0]"
// Retrieval info: USED_PORT: rx_seriallpbken 0 0 4 0 INPUT NODEFVAL "rx_seriallpbken[3..0]"
// Retrieval info: USED_PORT: rx_syncstatus 0 0 8 0 OUTPUT NODEFVAL "rx_syncstatus[7..0]"
// Retrieval info: USED_PORT: tx_coreclk 0 0 4 0 INPUT NODEFVAL "tx_coreclk[3..0]"
// Retrieval info: USED_PORT: tx_ctrlenable 0 0 8 0 INPUT NODEFVAL "tx_ctrlenable[7..0]"
// Retrieval info: USED_PORT: tx_datain 0 0 64 0 INPUT NODEFVAL "tx_datain[63..0]"
// Retrieval info: USED_PORT: tx_dataout 0 0 4 0 OUTPUT NODEFVAL "tx_dataout[3..0]"
// Retrieval info: USED_PORT: tx_digitalreset 0 0 1 0 INPUT NODEFVAL "tx_digitalreset[0..0]"
// Retrieval info: USED_PORT: tx_invpolarity 0 0 4 0 INPUT NODEFVAL "tx_invpolarity[3..0]"
// Retrieval info: USED_PORT: tx_phase_comp_fifo_error 0 0 4 0 OUTPUT NODEFVAL "tx_phase_comp_fifo_error[3..0]"
// Retrieval info: CONNECT: rx_patterndetect 0 0 8 0 @rx_patterndetect 0 0 8 0
// Retrieval info: CONNECT: @rx_invpolarity 0 0 4 0 rx_invpolarity 0 0 4 0
// Retrieval info: CONNECT: @rx_locktorefclk 0 0 4 0 rx_locktorefclk 0 0 4 0
// Retrieval info: CONNECT: @rx_analogreset 0 0 1 0 rx_analogreset 0 0 1 0
// Retrieval info: CONNECT: rx_ctrldetect 0 0 8 0 @rx_ctrldetect 0 0 8 0
// Retrieval info: CONNECT: @gxb_powerdown 0 0 1 0 gxb_powerdown 0 0 1 0
// Retrieval info: CONNECT: rx_dataout 0 0 64 0 @rx_dataout 0 0 64 0
// Retrieval info: CONNECT: rx_runningdisp 0 0 8 0 @rx_runningdisp 0 0 8 0
// Retrieval info: CONNECT: @cal_blk_clk 0 0 0 0 cal_blk_clk 0 0 0 0
// Retrieval info: CONNECT: rx_phase_comp_fifo_error 0 0 4 0 @rx_phase_comp_fifo_error 0 0 4 0
// Retrieval info: CONNECT: rx_rmfifofull 0 0 4 0 @rx_rmfifofull 0 0 4 0
// Retrieval info: CONNECT: rx_errdetect 0 0 8 0 @rx_errdetect 0 0 8 0
// Retrieval info: CONNECT: rx_channelaligned 0 0 1 0 @rx_channelaligned 0 0 1 0
// Retrieval info: CONNECT: @tx_coreclk 0 0 4 0 tx_coreclk 0 0 4 0
// Retrieval info: CONNECT: @tx_digitalreset 0 0 1 0 tx_digitalreset 0 0 1 0
// Retrieval info: CONNECT: rx_pll_locked 0 0 4 0 @rx_pll_locked 0 0 4 0
// Retrieval info: CONNECT: coreclkout 0 0 1 0 @coreclkout 0 0 1 0
// Retrieval info: CONNECT: rx_syncstatus 0 0 8 0 @rx_syncstatus 0 0 8 0
// Retrieval info: CONNECT: @rx_seriallpbken 0 0 4 0 rx_seriallpbken 0 0 4 0
// Retrieval info: CONNECT: @reconfig_clk 0 0 0 0 reconfig_clk 0 0 0 0
// Retrieval info: CONNECT: tx_phase_comp_fifo_error 0 0 4 0 @tx_phase_comp_fifo_error 0 0 4 0
// Retrieval info: CONNECT: @reconfig_togxb 0 0 4 0 reconfig_togxb 0 0 4 0
// Retrieval info: CONNECT: pll_locked 0 0 1 0 @pll_locked 0 0 1 0
// Retrieval info: CONNECT: @rx_digitalreset 0 0 1 0 rx_digitalreset 0 0 1 0
// Retrieval info: CONNECT: @rx_cruclk 0 0 4 0 rx_cruclk 0 0 4 0
// Retrieval info: CONNECT: @tx_invpolarity 0 0 4 0 tx_invpolarity 0 0 4 0
// Retrieval info: CONNECT: rx_rlv 0 0 4 0 @rx_rlv 0 0 4 0
// Retrieval info: CONNECT: @pll_inclk 0 0 0 0 pll_inclk 0 0 0 0
// Retrieval info: CONNECT: @tx_ctrlenable 0 0 8 0 tx_ctrlenable 0 0 8 0
// Retrieval info: CONNECT: tx_dataout 0 0 4 0 @tx_dataout 0 0 4 0
// Retrieval info: CONNECT: @tx_datain 0 0 64 0 tx_datain 0 0 64 0
// Retrieval info: CONNECT: reconfig_fromgxb 0 0 17 0 @reconfig_fromgxb 0 0 17 0
// Retrieval info: CONNECT: rx_rmfifoempty 0 0 4 0 @rx_rmfifoempty 0 0 4 0
// Retrieval info: CONNECT: @cal_blk_powerdown 0 0 0 0 cal_blk_powerdown 0 0 0 0
// Retrieval info: CONNECT: rx_freqlocked 0 0 4 0 @rx_freqlocked 0 0 4 0
// Retrieval info: CONNECT: @rx_locktodata 0 0 4 0 rx_locktodata 0 0 4 0
// Retrieval info: CONNECT: @rx_datain 0 0 4 0 rx_datain 0 0 4 0
// Retrieval info: CONNECT: rx_rmfifodatainserted 0 0 8 0 @rx_rmfifodatainserted 0 0 8 0
// Retrieval info: CONNECT: rx_rmfifodatadeleted 0 0 8 0 @rx_rmfifodatadeleted 0 0 8 0
// Retrieval info: CONNECT: rx_disperr 0 0 8 0 @rx_disperr 0 0 8 0
// Retrieval info: CONNECT: @pll_powerdown 0 0 1 0 pll_powerdown 0 0 1 0
// Retrieval info: GEN_FILE: TYPE_NORMAL hxaui_alt4gxb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL hxaui_alt4gxb.ppf TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL hxaui_alt4gxb.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL hxaui_alt4gxb.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL hxaui_alt4gxb.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL hxaui_alt4gxb_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL hxaui_alt4gxb_bb.v TRUE
// Retrieval info: LIB_FILE: stratixiv_hssi
