# (C) 2001-2013 Altera Corporation. All rights reserved.
# Your use of Altera Corporation's design tools, logic functions and other 
# software and tools, and its AMPP partner logic functions, and any output 
# files any of the foregoing (including device programming or simulation 
# files), and any associated documentation or information are expressly subject 
# to the terms and conditions of the Altera Program License Subscription 
# Agreement, Altera MegaCore Function License Agreement, or other applicable 
# license agreement, including, without limitation, that your use is for the 
# sole purpose of programming logic devices manufactured by Altera and sold by 
# Altera or its authorized distributors.  Please refer to the applicable 
# agreement for further details.


# TCL File Generated by Component Editor 10.1
# Wed Aug 11 16:15:13 EDT 2010
# DO NOT MODIFY


# +-----------------------------------
# | 
# | altera_avalon_passthru "Altera Avalon Pass-Thru" v1.0
# | null 2010.08.11.16:15:13
# | 
# | 
# | /build/kbrunham/10.1/82/p4/ip/altera_avalon_passthru/altera_avalon_passthru.v
# | 
# |    ./altera_avalon_passthru.v syn, sim
# | 
# +-----------------------------------

# +-----------------------------------
# | request TCL package from ACDS 10.1
# | 
package require -exact sopc 10.1
# | 
# +-----------------------------------

# +-----------------------------------
# | module altera_avalon_passthru
# | 
set_module_property NAME altera_avalon_mm_passthru
set_module_property VERSION 13.1
set_module_property INTERNAL true
set_module_property GROUP "Memories and Memory Controllers/UniPHY Components"
set_module_property AUTHOR "Altera Corporation"
set_module_property DISPLAY_NAME "Altera Avalon Pass-Thru"
set_module_property DESCRIPTION "Altera Avalon Pass-Thru for Micro Cores"
set_module_property TOP_LEVEL_HDL_FILE altera_avalon_passthru_core.v
set_module_property TOP_LEVEL_HDL_MODULE altera_avalon_passthru_core
set_module_property INSTANTIATE_IN_SYSTEM_MODULE true
set_module_property EDITABLE true
set_module_property ANALYZE_HDL TRUE
set_module_property SIMULATION_MODEL_IN_VHDL true

set_module_property VALIDATION_CALLBACK my_validation
set_module_property ELABORATION_CALLBACK my_elaboration

# | 
# +-----------------------------------

# +-----------------------------------
# | files
# | 
add_file altera_avalon_passthru_core.v {SYNTHESIS SIMULATION}
# | 
# +-----------------------------------

# +-----------------------------------
# | parameters
# | 
add_parameter WORD_SIZE INTEGER 8
set_parameter_property WORD_SIZE DEFAULT_VALUE 8
set_parameter_property WORD_SIZE DISPLAY_NAME "Word Size"
set_parameter_property WORD_SIZE DESCRIPTION "Size in bits of the master words"
set_parameter_property WORD_SIZE TYPE INTEGER
set_parameter_property WORD_SIZE UNITS None
set_parameter_property WORD_SIZE AFFECTS_GENERATION false
set_parameter_property WORD_SIZE AFFECTS_ELABORATION true
set_parameter_property WORD_SIZE HDL_PARAMETER true
set_parameter_property WORD_SIZE ALLOWED_RANGES 1:65536

add_parameter DATA_WIDTH INTEGER 32
set_parameter_property DATA_WIDTH DEFAULT_VALUE 32
set_parameter_property DATA_WIDTH DISPLAY_NAME "Data Width"
set_parameter_property DATA_WIDTH DESCRIPTION "Size in bits of the data interface"
set_parameter_property DATA_WIDTH TYPE INTEGER
set_parameter_property DATA_WIDTH UNITS None
set_parameter_property DATA_WIDTH AFFECTS_GENERATION false
set_parameter_property DATA_WIDTH AFFECTS_ELABORATION true
set_parameter_property DATA_WIDTH HDL_PARAMETER true
set_parameter_property DATA_WIDTH ALLOWED_RANGES 1:65536

add_parameter ADDRESS_WIDTH INTEGER 32
set_parameter_property ADDRESS_WIDTH DEFAULT_VALUE 32
set_parameter_property ADDRESS_WIDTH DISPLAY_NAME "Address Width"
set_parameter_property ADDRESS_WIDTH DESCRIPTION "Size in bits of the Avalon-MM Slave Address"
set_parameter_property ADDRESS_WIDTH AFFECTS_ELABORATION true
set_parameter_property ADDRESS_WIDTH TYPE INTEGER
set_parameter_property ADDRESS_WIDTH UNITS None
set_parameter_property ADDRESS_WIDTH AFFECTS_GENERATION false
set_parameter_property ADDRESS_WIDTH HDL_PARAMETER false
set_parameter_property ADDRESS_WIDTH ALLOWED_RANGES 1:65536

add_parameter BURSTCOUNT_WIDTH INTEGER 1
set_parameter_property BURSTCOUNT_WIDTH DEFAULT_VALUE 1
set_parameter_property BURSTCOUNT_WIDTH DISPLAY_NAME "Burst Size"
set_parameter_property BURSTCOUNT_WIDTH DESCRIPTION "Size in bits of the Avalon-MM Burst Size"
set_parameter_property BURSTCOUNT_WIDTH AFFECTS_ELABORATION true
set_parameter_property BURSTCOUNT_WIDTH TYPE INTEGER
set_parameter_property BURSTCOUNT_WIDTH UNITS None
set_parameter_property BURSTCOUNT_WIDTH AFFECTS_GENERATION false
set_parameter_property BURSTCOUNT_WIDTH HDL_PARAMETER true
set_parameter_property BURSTCOUNT_WIDTH ALLOWED_RANGES 1:6553

add_parameter AVL_ADDRESS_WIDTH INTEGER 32
set_parameter_property AVL_ADDRESS_WIDTH DERIVED true
set_parameter_property AVL_ADDRESS_WIDTH VISIBLE false
set_parameter_property AVL_ADDRESS_WIDTH DISPLAY_NAME "Avalon Address Width"
set_parameter_property AVL_ADDRESS_WIDTH DESCRIPTION "Size in bits of the Avalon-MM Master Address (Derived)"
set_parameter_property AVL_ADDRESS_WIDTH HDL_PARAMETER true

add_parameter AVL_BE_WIDTH INTEGER 4
set_parameter_property AVL_BE_WIDTH DERIVED true
set_parameter_property AVL_BE_WIDTH VISIBLE false
set_parameter_property AVL_BE_WIDTH DISPLAY_NAME "Avalon Byte Enable Width"
set_parameter_property AVL_BE_WIDTH DESCRIPTION "Size in bits of the Avalon-MM Master Byte Enable (Derived)"
set_parameter_property AVL_BE_WIDTH HDL_PARAMETER false


# | 
# +-----------------------------------

proc my_validation {} {
	set awidth [get_parameter_value ADDRESS_WIDTH]
	set dwidth [get_parameter_value DATA_WIDTH]
	set wsize [get_parameter_value WORD_SIZE]
	
	set d_mod_s [expr {$dwidth % $wsize}]

	if {$wsize > $dwidth} {
		send_message error "Data Width greater than Word Size"
	}

	
	if {$d_mod_s != 0} {
		send_message error "Data Width not a multiple of Word Size"
	}

	
}


proc my_elaboration {} {
	set awidth [get_parameter_value ADDRESS_WIDTH]
	set dwidth [get_parameter_value DATA_WIDTH]
	set wsize [get_parameter_value WORD_SIZE]
	
	set be_width [expr {$dwidth / $wsize}]
	set avl_width $awidth
	
	set found_width 0
	for {set i 1} {$i < 32}  {incr i} {
		set pow_i [expr {pow(2,$i)}]
		if {$pow_i >= $be_width} {
			set avl_width [expr {$awidth + $i}]
			set found_width 1
			break
		}
	}
	
	if {$found_width == 0} {
		send_message error "Could not determine address width"
	}
	
	
	set_parameter_value AVL_BE_WIDTH $be_width
	set_parameter_value AVL_ADDRESS_WIDTH $avl_width

	add_interface_port Exported_Avalon_Interface export_address export Input $avl_width
	add_interface_port Exported_Avalon_Interface export_byteenable export Input $be_width
	add_interface_port Avalon_Master avalon_address address Output $avl_width
	add_interface_port Avalon_Master avalon_byteenable byteenable Output $be_width

	
}

# +-----------------------------------
# | display items
# | 
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point Exported_Avalon_Interface
# | 
add_interface Exported_Avalon_Interface conduit end

set_interface_property Exported_Avalon_Interface ENABLED true

add_interface_port Exported_Avalon_Interface export_readdata export Output DATA_WIDTH
add_interface_port Exported_Avalon_Interface export_writedata export Input DATA_WIDTH
add_interface_port Exported_Avalon_Interface export_read export Input 1
add_interface_port Exported_Avalon_Interface export_write export Input 1
add_interface_port Exported_Avalon_Interface export_waitrequest export Output 1
add_interface_port Exported_Avalon_Interface export_readdatavalid export Output 1
add_interface_port Exported_Avalon_Interface export_resetrequest export Input 1
add_interface_port Exported_Avalon_Interface export_arbiterlock export Input 1
add_interface_port Exported_Avalon_Interface export_flush export Input 1
add_interface_port Exported_Avalon_Interface export_clock export Output 1
add_interface_port Exported_Avalon_Interface export_burstcount export Input BURSTCOUNT_WIDTH
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point Avalon_Master
# | 
add_interface Avalon_Master avalon start
set_interface_property Avalon_Master associatedClock Avalon_Clock
set_interface_property Avalon_Master burstOnBurstBoundariesOnly false
set_interface_property Avalon_Master doStreamReads false
set_interface_property Avalon_Master doStreamWrites false
set_interface_property Avalon_Master linewrapBursts false

set_interface_property Avalon_Master ENABLED true

add_interface_port Avalon_Master avalon_readdata readdata Input DATA_WIDTH
add_interface_port Avalon_Master avalon_writedata writedata Output DATA_WIDTH
add_interface_port Avalon_Master avalon_read read Output 1
add_interface_port Avalon_Master avalon_write write Output 1
add_interface_port Avalon_Master avalon_waitrequest waitrequest Input 1
add_interface_port Avalon_Master avalon_arbiterlock arbiterlock Output 1
add_interface_port Avalon_Master avalon_readdatavalid readdatavalid Input 1
add_interface_port Avalon_Master avalon_flush flush Output 1
add_interface_port Avalon_Master avalon_resetrequest resetrequest Output 1
add_interface_port Avalon_Master avalon_burstcount burstcount Output BURSTCOUNT_WIDTH
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point Avalon_Clock
# | 
add_interface Avalon_Clock clock start
#add_interface Avalon_Clock clock end

set_interface_property Avalon_Clock ENABLED true

#add_interface_port Avalon_Clock avalon_clock clk Input 1
add_interface_port Avalon_Clock avalon_clock clk Output 1
# | 
# +-----------------------------------
