# (C) 2001-2013 Altera Corporation. All rights reserved.
# Your use of Altera Corporation's design tools, logic functions and other 
# software and tools, and its AMPP partner logic functions, and any output 
# files any of the foregoing (including device programming or simulation 
# files), and any associated documentation or information are expressly subject 
# to the terms and conditions of the Altera Program License Subscription 
# Agreement, Altera MegaCore Function License Agreement, or other applicable 
# license agreement, including, without limitation, that your use is for the 
# sole purpose of programming logic devices manufactured by Altera and sold by 
# Altera or its authorized distributors.  Please refer to the applicable 
# agreement for further details.


# TCL File Generated by Component Editor 12.0
# Mon Mar 05 18:44:49 MYT 2012
# DO NOT MODIFY


# 
# altera_eth_rs_mux "altera_eth_rs_mux" v1.0
# null 2012.03.05.18:44:49
# 
# 

# 
# request TCL package from ACDS 9.1
# 
package require -exact sopc 9.1


# 
# module altera_eth_rs_mux
# 
set_module_property NAME altera_eth_rs_mux
set_module_property VERSION 13.1
set_module_property INTERNAL true
set_module_property GROUP "Interface Protocols/Ethernet/Submodules"
set_module_property AUTHOR "Altera Corporation"
set_module_property DISPLAY_NAME altera_eth_rs_mux
set_module_property TOP_LEVEL_HDL_FILE altera_eth_rs_mux.v
set_module_property TOP_LEVEL_HDL_MODULE altera_eth_rs_mux
set_module_property INSTANTIATE_IN_SYSTEM_MODULE true
set_module_property EDITABLE true
set_module_property ANALYZE_HDL false
set_module_property ELABORATION_CALLBACK elaborate
set_module_property VALIDATION_CALLBACK validate



set HDL_LIB_DIR "../lib"

add_fileset simulation_verilog SIM_VERILOG sim_ver
add_fileset simulation_vhdl SIM_VHDL sim_vhd
set_fileset_property simulation_verilog TOP_LEVEL altera_eth_rs_mux

proc sim_ver {name} {
    if {1} {
        add_fileset_file mentor/altera_eth_rs_mux.v VERILOG_ENCRYPT PATH "mentor/altera_eth_rs_mux.v" {MENTOR_SPECIFIC}
    }
    if {1} {
        add_fileset_file aldec/altera_eth_rs_mux.v VERILOG_ENCRYPT PATH "aldec/altera_eth_rs_mux.v" {ALDEC_SPECIFIC}
    }
    if {0} {
        add_fileset_file cadence/altera_eth_rs_mux.v VERILOG_ENCRYPT PATH "cadence/altera_eth_rs_mux.v" {CADENCE_SPECIFIC}
    }
    if {0} {
        add_fileset_file synopsys/altera_eth_rs_mux.v VERILOG_ENCRYPT PATH "synopsys/altera_eth_rs_mux.v" {SYNOPSYS_SPECIFIC}
    }

}

proc sim_vhd {name} {
   if {1} {
      add_fileset_file mentor/altera_eth_rs_mux.v VERILOG_ENCRYPT PATH "mentor/altera_eth_rs_mux.v" {MENTOR_SPECIFIC}
   }
   if {1} {
      add_fileset_file aldec/altera_eth_rs_mux.v VERILOG_ENCRYPT PATH "aldec/altera_eth_rs_mux.v" {ALDEC_SPECIFIC}
   }
   if {0} {
      add_fileset_file cadence/altera_eth_rs_mux.v VERILOG_ENCRYPT PATH "cadence/altera_eth_rs_mux.v" {CADENCE_SPECIFIC}
   }
   if {0} {
      add_fileset_file synopsys/altera_eth_rs_mux.v VERILOG_ENCRYPT PATH "synopsys/altera_eth_rs_mux.v" {SYNOPSYS_SPECIFIC}
   }

}





# +-----------------------------------
# | files
# | 
add_file altera_eth_rs_mux.v {SYNTHESIS}
add_file altera_eth_rs_mux.ocp {SYNTHESIS}

# | 
# +-----------------------------------

# Module parameters
add_parameter "SYMBOLS_PER_BEAT" "integer" "8" ""
set_parameter_property "SYMBOLS_PER_BEAT" "visible" "true"
set_parameter_property "SYMBOLS_PER_BEAT" "displayName" "SYMBOLS_PER_BEAT"
set_parameter_property "SYMBOLS_PER_BEAT" "derived" "false"

add_parameter "BITS_PER_SYMBOL" "integer" "8" ""
set_parameter_property "BITS_PER_SYMBOL" "visible" "true"
set_parameter_property "BITS_PER_SYMBOL" "displayName" "BITS_PER_SYMBOL"
set_parameter_property "BITS_PER_SYMBOL" "derived" "false"

add_parameter "ERROR_WIDTH" "integer" "1" ""
set_parameter_property "ERROR_WIDTH" "visible" "true"
set_parameter_property "ERROR_WIDTH" "displayName" "ERROR_WIDTH"
set_parameter_property "ERROR_WIDTH" "derived" "false"


add_parameter "MAX_CHANNELS" "integer" "0" ""
set_parameter_property "MAX_CHANNELS" "visible" "true"
set_parameter_property "MAX_CHANNELS" "displayName" "MAX_CHANNELS"
set_parameter_property "MAX_CHANNELS" "derived" "false"

add_parameter "EMPTY_WIDTH" "integer" "3" ""
set_parameter_property "EMPTY_WIDTH" "visible" "true"
set_parameter_property "EMPTY_WIDTH" "displayName" "EMPTY_WIDTH"
set_parameter_property "EMPTY_WIDTH" "derived" "true"




proc validate {} {

   # non-derived parameters
   # -----------------------------------------------------------------
   
   set SYMBOLS_PER_BEAT [ get_parameter_value "SYMBOLS_PER_BEAT" ]
   set BITS_PER_SYMBOL [ get_parameter_value "BITS_PER_SYMBOL" ]
   set ERROR_WIDTH [ get_parameter_value "ERROR_WIDTH" ]
   set MAX_CHANNELS [ get_parameter_value "MAX_CHANNELS" ]

   # derived parameters
   # -----------------------------------------------------------------
      
   set EMPTY_WIDTH [ log2ceil $SYMBOLS_PER_BEAT ]
   set_parameter_value "EMPTY_WIDTH" $EMPTY_WIDTH

}

proc elaborate {} {

   # non-derived parameters
   # -----------------------------------------------------------------
   
   set SYMBOLS_PER_BEAT [ get_parameter_value "SYMBOLS_PER_BEAT" ]
   set BITS_PER_SYMBOL [ get_parameter_value "BITS_PER_SYMBOL" ]
   set ERROR_WIDTH [ get_parameter_value "ERROR_WIDTH" ]
   set MAX_CHANNELS [ get_parameter_value "MAX_CHANNELS" ]

   # derived parameters
   # -----------------------------------------------------------------
   
   set datawidth [ expr $SYMBOLS_PER_BEAT * $BITS_PER_SYMBOL ]
      
   set EMPTY_WIDTH [ log2ceil $SYMBOLS_PER_BEAT ]
    
   set address_width [ log2ceil $MAX_CHANNELS ]
	# 
	# connection point clock_sink
	# 
	add_interface clock_reset clock end
	#set_interface_property clock_reset_gmii clockRate 156250
	set_interface_property clock_reset ENABLED true

	add_interface_port clock_reset clk clk Input 1
	add_interface_port clock_reset reset reset Input 1


	# 
	# connection point in0
	# 
	add_interface in0 avalon_streaming end
	set_interface_property in0 associatedClock clock_reset
	set_interface_property in0 dataBitsPerSymbol $SYMBOLS_PER_BEAT
	set_interface_property in0 symbolsPerBeat $SYMBOLS_PER_BEAT
	set_interface_property in0 errorDescriptor ""
	set_interface_property in0 firstSymbolInHighOrderBits true
	set_interface_property in0 maxChannel 0
	set_interface_property in0 readyLatency 0
	set_interface_property in0 ENABLED true


	add_interface_port in0 in_valid_0 valid Input 1
	add_interface_port in0 in_data_0 data Input $datawidth
	add_interface_port in0 in_error_0 error Input $ERROR_WIDTH
	add_interface_port in0 in_startofpacket_0 startofpacket Input 1
	add_interface_port in0 in_endofpacket_0 endofpacket Input 1
	add_interface_port in0 in_empty_0 empty Input $EMPTY_WIDTH

	# 
	# connection point in1
	# 
	add_interface in1 avalon_streaming end
	set_interface_property in1 associatedClock clock_reset
	set_interface_property in1 dataBitsPerSymbol  $BITS_PER_SYMBOL
	set_interface_property in1 symbolsPerBeat $SYMBOLS_PER_BEAT
	set_interface_property in1 errorDescriptor ""
	set_interface_property in1 firstSymbolInHighOrderBits true
	set_interface_property in1 maxChannel 0
	set_interface_property in1 readyLatency 0
	set_interface_property in1 ENABLED true


	add_interface_port in1 in_valid_1 valid Input 1
	add_interface_port in1 in_data_1 data Input $datawidth
	add_interface_port in1 in_error_1 error Input $ERROR_WIDTH
	add_interface_port in1 in_startofpacket_1 startofpacket Input 1
	add_interface_port in1 in_endofpacket_1 endofpacket Input 1
	add_interface_port in1 in_empty_1 empty Input $EMPTY_WIDTH


	# 
	# connection point out
	# 
	add_interface out avalon_streaming start
	set_interface_property out associatedClock clock_reset
	set_interface_property out dataBitsPerSymbol  $BITS_PER_SYMBOL
	set_interface_property out symbolsPerBeat $SYMBOLS_PER_BEAT
	set_interface_property out errorDescriptor ""
	set_interface_property out firstSymbolInHighOrderBits true
	set_interface_property out maxChannel 0
	set_interface_property out readyLatency 0
	set_interface_property out ENABLED true

	add_interface_port out out_valid valid Output 1

	add_interface_port out out_data data Output $datawidth
	add_interface_port out out_error error Output $ERROR_WIDTH
	add_interface_port out out_startofpacket startofpacket Output 1
	add_interface_port out out_endofpacket endofpacket Output 1
	add_interface_port out out_empty empty Output $EMPTY_WIDTH


	# 
	# connection point sel
	# 
	add_interface "sel" conduit end
	set_interface_property "sel" ENABLED true
	add_interface_port "sel" sel export Input 2
	# 
    
    set_port_property in_error_0 VHDL_TYPE STD_LOGIC_VECTOR
    set_port_property in_error_1 VHDL_TYPE STD_LOGIC_VECTOR
    set_port_property out_error VHDL_TYPE STD_LOGIC_VECTOR

}

# ------------------------------------------------------------------------------
proc validate {} {
    
    # Parameters
    # ---------------------------------------------------------------------
    # N/A
    
    
    # Avalon Slave connection point 
    # ---------------------------------------------------------------------
    # N/A
    
    
    # Avalon Streaming Source connection point 
    # ---------------------------------------------------------------------
    # N/A
    
    
    #  Avalon Streaming Sink connection point 
    # ---------------------------------------------------------------------
    # N/A
    
}

# +-----------------------------------
# | Utility funcitons
# | 
proc log2ceil {num} {

    set val 0
    set i 1
    while {$i < $num} {
        set val [expr $val + 1]
        set i [expr 1 << $val]
    }

    return $val;
}
# | 
# +-----------------------------------

