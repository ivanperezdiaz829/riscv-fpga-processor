// (C) 2001-2013 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions and other 
// software and tools, and its AMPP partner logic functions, and any output 
// files any of the foregoing (including device programming or simulation 
// files), and any associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License Subscription 
// Agreement, Altera MegaCore Function License Agreement, or other applicable 
// license agreement, including, without limitation, that your use is for the 
// sole purpose of programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the applicable 
// agreement for further details.


@@ proc sanitize_direction {dir} { set dir [string tolower $dir]; if {$dir == "bidir"} { set dir "inout" }; return $dir}
@@ clear_array data
@@ array set data ${interfacePeripheralList}
@@ clear_array interfaces
@@ array set interfaces $data(interfaces)
@@ clear_array instances
@@ array set instances  $data(instances)
@@ clear_array skip
@@ array set skip $skip_rendering
@@ if {![info exists skip(module)]} { ;# begin module
@@ set comma " "
module ${output_name}(
@@ foreach interface_name $interfaces([ORDERED_NAMES]) {
@@   clear_array interface
@@   array set interface $interfaces($interface_name)
@@   if { [info exists interface([QSYS_ONLY])] == 0 } {							
// $interface_name
@@     clear_array signals
@@     array set   signals $interface(signals)
@@     foreach signal_name $signals([ORDERED_NAMES]) {
@@       clear_array signal
@@       array set signal $signals($signal_name)
@@       set direction [sanitize_direction $signal(direction)]
 ${comma}$direction wire [$signal(width) - 1 : 0 ] $signal_name
@@       set comma ","
@@     }
@@   }
@@ }							
);
@@ } ;# end module

@@ foreach {signal_name oe output} $tristate_output_assignments {
assign ${signal_name} = ${oe} ? ${output} : 'z;
@@ }
@@ foreach {lh rh} $exported_signal_literal_assignments {
assign ${lh} = ${rh};
@@ }
@@ if {$data(intermediate_wire_count) > 0} {

wire [$data(intermediate_wire_count) - 1 : 0] intermediate;
@@ }
@@ if {$floating_width > 0} {

wire [$floating_width - 1 : 0] floating;
@@ }
@@ foreach raw_assign $raw_assigns {
@@   lassign $raw_assign lhs rhs
assign ${lhs} = ${rhs};
@@ }
@@ array set instance_port_to_fragpartner_names  $instance_port_to_fragpartner_names_string
@@ array set instance_port_to_fragpartner_ranges $instance_port_to_fragpartner_ranges_string
@@ array set instance_to_ports $instance_to_ports_string
@@ foreach instance_name $instances([ORDERED_NAMES]) {
@@   set port_comma " "
@@   clear_array instance
@@   array set instance $instances($instance_name)

$instance(entity_name) ${instance_name}(
@@   set ports $instance_to_ports($instance_name)
@@   foreach port_name $ports {
${port_comma}.${port_name}({
@@     set frag_key ${instance_name}.${port_name}
@@     set frag_names  $instance_port_to_fragpartner_names($frag_key)
@@     set frag_ranges $instance_port_to_fragpartner_ranges($frag_key)
@@     set frag_comma " "
@@     foreach frag_name $frag_names frag_range $frag_ranges {
   ${frag_comma}${frag_name} // ${frag_range}
@@       set frag_comma ","
@@     }
  })
@@     set port_comma ","
@@   }
);

@@   set parameters $instance(parameters)
@@   foreach {parameter value} $parameters {
defparam ${instance_name}.${parameter} = ${value};
@@   }
@@ }
@@ if {![info exists skip(endmodule)]} {
endmodule
@@ }
