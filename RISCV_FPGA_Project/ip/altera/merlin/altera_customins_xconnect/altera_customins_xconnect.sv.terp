// (C) 2001-2013 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions and other 
// software and tools, and its AMPP partner logic functions, and any output 
// files any of the foregoing (including device programming or simulation 
// files), and any associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License Subscription 
// Agreement, Altera MegaCore Function License Agreement, or other applicable 
// license agreement, including, without limitation, that your use is for the 
// sole purpose of programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the applicable 
// agreement for further details.


// \$Id: //acds/rel/13.1/ip/merlin/altera_customins_xconnect/altera_customins_xconnect.sv.terp#1 $
// \$Revision: #1 $
// \$Date: 2013/08/11 $
// \$Author: swbranch $

// -------------------------------------------------------
// Custom Instruction Interconnect
//
// -------------------------------------------------------

`timescale 1 ns / 1 ns

@@ set num_outputs [ llength $master_index ] 
@@ set opcode_l_list $opcode_l
@@ set opcode_h_list $opcode_h

module $output_name
(
    // -------------------
    // Custom instruction masters
    // -------------------
@@ for { set i 0 } { $i < $num_outputs } { incr i } {
    output [31 : 0] ci_master${i}_dataa,
    output [31 : 0] ci_master${i}_datab,
    input  [31 : 0] ci_master${i}_result,
    output [ 7 : 0] ci_master${i}_n,
    output          ci_master${i}_readra,
    output          ci_master${i}_readrb,
    output          ci_master${i}_writerc,
    output [ 4 : 0] ci_master${i}_a,
    output [ 4 : 0] ci_master${i}_b,
    output [ 4 : 0] ci_master${i}_c,
    output [31 : 0] ci_master${i}_ipending,
    output          ci_master${i}_estatus,
  @@ if { $multicycle == 1 } {
    output          ci_master${i}_clk,   
    output          ci_master${i}_clken,
    output          ci_master${i}_reset, 
    output          ci_master${i}_reset_req,
    output          ci_master${i}_start,
    input           ci_master${i}_done,
  @@ }

@@ }

    // -------------------
    // Custom instruction slave
    // -------------------
@@ if { $multicycle == 1 } {
    input           ci_slave_clk,   
    input           ci_slave_clken,
    input           ci_slave_reset, 
    input           ci_slave_reset_req,
    input           ci_slave_start,
    output          ci_slave_done,
@@ }
    input  [31 : 0] ci_slave_dataa,
    input  [31 : 0] ci_slave_datab,
    output [31 : 0] ci_slave_result,
    input  [ 7 : 0] ci_slave_n,
    input           ci_slave_readra,
    input           ci_slave_readrb,
    input           ci_slave_writerc,
    input  [ 4 : 0] ci_slave_a,
    input  [ 4 : 0] ci_slave_b,
    input  [ 4 : 0] ci_slave_c,
    input  [31 : 0] ci_slave_ipending,
    input           ci_slave_estatus

);

@@ for { set i 0 } { $i < $num_outputs } { incr i } {
    wire select${i};
@@ }

    // -------------------------------------------------------
    // Wire non-control signals through to each master
    // -------------------------------------------------------
@@ for { set i 0 } { $i < $num_outputs } { incr i } {
    assign  ci_master${i}_dataa    = ci_slave_dataa;
    assign  ci_master${i}_datab    = ci_slave_datab;
    assign  ci_master${i}_n        = ci_slave_n;
    assign  ci_master${i}_a        = ci_slave_a;
    assign  ci_master${i}_b        = ci_slave_b;
    assign  ci_master${i}_c        = ci_slave_c;
    assign  ci_master${i}_ipending = ci_slave_ipending;
    assign  ci_master${i}_estatus  = ci_slave_estatus;
  @@ if { $multicycle == 1 } {
    assign  ci_master${i}_clk      = ci_slave_clk;
    assign  ci_master${i}_clken    = ci_slave_clken;
    assign  ci_master${i}_reset_req = ci_slave_reset_req;
    assign  ci_master${i}_reset    = ci_slave_reset;
  @@ }

@@ }

    // -------------------------------------------------------
    // Figure out which output is selected, and use that to
    // gate control signals
    // -------------------------------------------------------
@@ for { set i 0 } { $i < $num_outputs } { incr i } {
@@
@@ set low [ lindex $opcode_l_list $i ]
@@ set hi  [ lindex $opcode_h_list $i ]
@@
    assign select${i} = ci_slave_n >= $low && ci_slave_n < $hi;

    assign ci_master${i}_readra  = (select${i} && ci_slave_readra);
    assign ci_master${i}_readrb  = (select${i} && ci_slave_readrb);
    assign ci_master${i}_writerc = (select${i} && ci_slave_writerc);
  @@ if { $multicycle == 1 } {
    assign ci_master${i}_start   = (select${i} && ci_slave_start);
  @@ }

@@ }

    // -------------------------------------------------------
    // Use the select signal to figure out which result to mux
    // back
    // -------------------------------------------------------
    assign ci_slave_result = {32{ select0 }} & ci_master0_result
@@ for { set i 1 } { $i < $num_outputs } { incr i } {
         | {32{ select${i} }} & ci_master${i}_result
@@ }
    ;

@@ if { $multicycle == 1 } {
    assign ci_slave_done = select0 & ci_master0_done
  @@ for { set i 1 } { $i < $num_outputs } { incr i } {
         | select${i} & ci_master${i}_done
  @@ }
    ;
@@ }

endmodule
