// (C) 2001-2013 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions and other 
// software and tools, and its AMPP partner logic functions, and any output 
// files any of the foregoing (including device programming or simulation 
// files), and any associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License Subscription 
// Agreement, Altera MegaCore Function License Agreement, or other applicable 
// license agreement, including, without limitation, that your use is for the 
// sole purpose of programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the applicable 
// agreement for further details.


// \$Id: //acds/rel/13.1/ip/merlin/altera_irq_mapper/altera_irq_mapper.sv.terp#1 $
// \$Revision: #1 $
// \$Date: 2013/08/11 $
// \$Author: swbranch $

// -------------------------------------------------------
// Altera IRQ Mapper
//
// Parameters
//   NUM_RCVRS        : $NUM_RCVRS
//   SENDER_IRW_WIDTH : $SENDER_IRQ_WIDTH
//   IRQ_MAP          : $IRQ_MAP
//
// -------------------------------------------------------

`timescale 1 ns / 1 ns

module $output_name
(
    // -------------------
    // Clock & Reset
    // -------------------
    input clk,
    input reset,

    // -------------------
    // IRQ Receivers
    // -------------------
@@ for {set r 0} {$r < $NUM_RCVRS} {incr r} {
    input                receiver${r}_irq,
@@ }

    // -------------------
    // Command Source (Output)
    // -------------------
@@ set x [expr $SENDER_IRQ_WIDTH-1]
    output reg [$x : 0] sender_irq
);

@@ #
@@ # Some help for simulators; Quartus does the right thing
@@ # here.
@@ #
@@ if { $NUM_RCVRS == 0 } {
    initial sender_irq = 0;
@@ }

    always @* begin
	sender_irq = 0;

@@    set pairs [split $IRQ_MAP ","]
@@    foreach pair $pairs {
@@	set ab [split $pair ":"]
@@	set a [lindex $ab 0]
@@	set b [lindex $ab 1]
        sender_irq[$b] = receiver${a}_irq;
@@    }
    end

endmodule
