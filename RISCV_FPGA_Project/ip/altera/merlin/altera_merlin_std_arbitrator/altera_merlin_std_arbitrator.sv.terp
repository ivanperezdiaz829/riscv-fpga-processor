// (C) 2001-2013 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions and other 
// software and tools, and its AMPP partner logic functions, and any output 
// files any of the foregoing (including device programming or simulation 
// files), and any associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License Subscription 
// Agreement, Altera MegaCore Function License Agreement, or other applicable 
// license agreement, including, without limitation, that your use is for the 
// sole purpose of programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the applicable 
// agreement for further details.


// \$Id: //acds/rel/13.1/ip/merlin/altera_merlin_std_arbitrator/altera_merlin_std_arbitrator.sv.terp#1 $
// \$Revision: #1 $
// \$Date: 2013/08/11 $
// \$Author: swbranch $

// ------------------------------------------------------------
// Wrapper for the standard arbitrator
//
// Provides a Merlin arbitrator API around the standard arb
// implementation.
// ------------------------------------------------------------

`timescale 1 ns / 1 ns
// ------------------------------------------
// Generation parameters:
//   output_name:         $output_name
//   NUM_REQUESTERS:      $num_requesters
//   SCHEME:              $scheme
//   ST_DATA_W:           $st_data_w
//   ST_CHANNEL_W:        $st_channel_w
// ------------------------------------------

module $output_name
(
    // --------------------------------------
    // Request sinks
    // --------------------------------------
@@ for { set i 0 } { $i < $num_requesters } { incr i } {
    input                       sink${i}_valid,
@@ if {$use_data != 0} { 
    input [$st_data_w-1    : 0]  sink${i}_data, 
@@	}
@@ if {$use_channel != 0 } {
    input [$st_channel_w-1 : 0]  sink${i}_channel,
@@	}
@@ if {$use_packets != 0 } {
    input                       sink${i}_startofpacket,
    input                       sink${i}_endofpacket,
@@	}
@@ }

    // --------------------------------------
    // Clock/reset
    // --------------------------------------
    input clk,
    input reset,
   
    // --------------------------------------
    // Grant source
    // --------------------------------------
    output [$num_requesters-1:0] next_grant,    // st source data
    input                       ack            // st source ready
);

    localparam NUM_REQUESTERS = $num_requesters;
    localparam SCHEME         = $scheme;
    localparam ST_DATA_W      = $st_data_w;
    localparam ST_CHANNEL_W   = $st_channel_w;
    // --------------------------------------
    // Signals
    // --------------------------------------
    wire [NUM_REQUESTERS-1:0]   request;

@@ for { set i 0 } { $i < $num_requesters } { incr i } {
    assign request[$i] = sink${i}_valid;
@@ }

    altera_merlin_std_arbitrator_core
    #(
        .NUM_REQUESTERS(NUM_REQUESTERS),
        .SCHEME        (SCHEME)
    ) 
    arb (
        .request    (request),
        .next_grant (next_grant),
        .ack        (ack),

        .clk        (clk),
        .reset      (reset)
    );

endmodule

