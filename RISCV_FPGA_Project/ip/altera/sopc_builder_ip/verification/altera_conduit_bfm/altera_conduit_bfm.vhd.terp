-- (C) 2001-2013 Altera Corporation. All rights reserved.
-- Your use of Altera Corporation's design tools, logic functions and other 
-- software and tools, and its AMPP partner logic functions, and any output 
-- files any of the foregoing (including device programming or simulation 
-- files), and any associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License Subscription 
-- Agreement, Altera MegaCore Function License Agreement, or other applicable 
-- license agreement, including, without limitation, that your use is for the 
-- sole purpose of programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the applicable 
-- agreement for further details.


-- \$Id: //acds/main/ip/sopc/components/verification/altera_tristate_conduit_bfm/altera_tristate_conduit_bfm.sv.terp#7 $
-- \$Revision: #7 $
-- \$Date: 2010/08/05 $
-- \$Author: klong $
-------------------------------------------------------------------------------
-- =head1 NAME
-- altera_conduit_bfm
-- =head1 SYNOPSIS
-- Bus Functional Model (BFM) for a Standard Conduit BFM
-------------------------------------------------------------------------------
-- =head1 DESCRIPTION
-- This is a Bus Functional Model (BFM) for a Standard Conduit Master.
-- This BFM sampled the input/bidirection port value or driving user's value to 
-- output ports when user call the API.  
-- This BFM's HDL is been generated through terp file in Qsys/SOPC Builder.
-- Generation parameters:
-- output_name:                  $output_name
-- role:width:direction:         $rolemap
-- clocked                       $clocked
-------------------------------------------------------------------------------
@@
@@ proc get_io_name_format {io_name_length io_name} {
@@    return [format "%-${io_name_length}s" $io_name]
@@ }

library ieee;
use ieee.std_logic_1164.all;

library work;
use work.all;
use work.${output_name}_vhdl_pkg.all;
@@
@@ set max_rolename_length 0
@@ set roleinfo_list [split $rolemap ","]
@@ set rolename_list ""
@@ foreach roleinfo $roleinfo_list {
@@    set roleinfo   [split $roleinfo ":"]
@@
@@    set rolename   [lindex $roleinfo 0]
@@    set width      [lindex $roleinfo 1]
@@    set direction  [lindex $roleinfo 2]
@@
@@    set roleinfo_array($rolename,msb)   [expr $width - 1]
@@    set roleinfo_array($rolename,direction) [string tolower $direction]
@@
@@    lappend rolename_list $rolename
@@
@@    set rolename_length  [string length $rolename]
@@    if {$rolename_length > $max_rolename_length} {
@@       set max_rolename_length $rolename_length
@@    }
@@ }
@@ set io_name_length [expr $max_rolename_length + 6]

entity ${output_name} is
   port (
@@ if {$clocked} {
@@    set io_name_fmt [get_io_name_format $io_name_length clk]
      $io_name_fmt : in    std_logic;
@@    set io_name_fmt [get_io_name_format $io_name_length reset]
      $io_name_fmt : in    std_logic;
@@ }
@@
@@ set loop_counter     0
@@ set num_of_signals   [llength $rolename_list]
@@ set semicolon        ";"
@@ foreach rolename $rolename_list {
@@    incr loop_counter
@@    if {$loop_counter == $num_of_signals} {
@@       set semicolon ""
@@    }
@@
@@    set io_name_fmt [get_io_name_format $io_name_length sig_${rolename}]
@@    if {[string equal $roleinfo_array($rolename,direction) "input"]} {
      $io_name_fmt : in    std_logic_vector($roleinfo_array($rolename,msb) downto 0)${semicolon}
@@       
@@    } elseif {[string equal $roleinfo_array($rolename,direction) "output"]} {
      $io_name_fmt : out   std_logic_vector($roleinfo_array($rolename,msb) downto 0)${semicolon}
@@
@@    } elseif {[string equal $roleinfo_array($rolename,direction) "bidir"]} {
      $io_name_fmt : inout std_logic_vector($roleinfo_array($rolename,msb) downto 0)${semicolon}
@@    }
@@ }
   );
end ${output_name};

architecture ${output_name}_arch of ${output_name} is 

@@ if {!$clocked} {
      signal update : std_logic := '0';

@@ }
   begin
@@
@@ if {!$clocked} {   
      process begin
         wait for 1 ps;
         update <= not update;
      end process;
@@ }

@@ if {$clocked} {
      process (clk) begin
      if (clk'event and clk = '1') then
@@ } else {
      process (update) begin
@@ }
@@
@@ foreach rolename $rolename_list {
@@    if {[string equal $roleinfo_array($rolename,direction) "input"]} {
@@       set io_name_fmt [get_io_name_format $io_name_length ${rolename}_in]
         $io_name_fmt <= sig_${rolename};
@@    } elseif {[string equal $roleinfo_array($rolename,direction) "output"]} {
@@       set io_name_fmt [get_io_name_format $io_name_length sig_${rolename}]
         $io_name_fmt <= out_trans.${rolename}_out after 1 ps;
@@    } elseif {[string equal $roleinfo_array($rolename,direction) "bidir"]} {
@@

         if out_trans.${rolename}_oe = '1' then
@@       set io_name_fmt [get_io_name_format $io_name_length sig_${rolename}]
            $io_name_fmt <= out_trans.${rolename}_out after 1 ps;
@@       set io_name_fmt [get_io_name_format $io_name_length ${rolename}_in]
            $io_name_fmt <= (others => 'Z');
         else
@@       set io_name_fmt [get_io_name_format $io_name_length sig_${rolename}]
            $io_name_fmt <= (others => 'Z');
@@       set io_name_fmt [get_io_name_format $io_name_length ${rolename}_in]
            $io_name_fmt <= sig_${rolename};
         end if;
@@    }
@@ }
@@
@@ if {$clocked} {
@@       set io_name_fmt [get_io_name_format $io_name_length reset_in]
         $io_name_fmt <= reset;
      end if;
@@ }
      end process;

end ${output_name}_arch;
