-- (C) 2001-2013 Altera Corporation. All rights reserved.
-- Your use of Altera Corporation's design tools, logic functions and other 
-- software and tools, and its AMPP partner logic functions, and any output 
-- files any of the foregoing (including device programming or simulation 
-- files), and any associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License Subscription 
-- Agreement, Altera MegaCore Function License Agreement, or other applicable 
-- license agreement, including, without limitation, that your use is for the 
-- sole purpose of programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the applicable 
-- agreement for further details.


-- \$Id: //acds/main/ip/sopc/components/verification/altera_tristate_conduit_bfm/altera_tristate_conduit_bfm.sv.terp#15 $
-- \$Revision: #15 $
-- \$Date: 2011/04/25 $
-- \$Author: klong $
-------------------------------------------------------------------------------
-- =head1 NAME
-- altera_tristate_conduit_bfm
-- =head1 SYNOPSIS
-- Bus Functional Model (BFM) for a Tristate Conduit BFM
-------------------------------------------------------------------------------
-- =head1 DESCRIPTION
-- This is a Bus Functional Model (BFM) for a Tristate Conduit Master.
-- The behavior of each clock cycle of the Tristate protocol on the interface
-- is governed by a transaction. Transactions are constructed using the
-- the public API methods provided and are then pushed into a dispatch
-- queue, either one at a time or as entire sequences. Input transactions 
-- are popped out of a separate input transaction queue and inform the client of
-- statistics such as latency cycles required until interface been granted.
-- This BFM's HDL is been generated through terp file in Qsys.
-- Generation parameters:
-- output_name:                                       $output_name
-- role:width:use_output:use_outputenable:use_input   $rolemap
-------------------------------------------------------------------------------
@@
@@ proc get_io_name_format {io_name_length io_name} {
@@    return [format "%-${io_name_length}s" $io_name]
@@ }

use std.textio.all ;

library ieee ;
use ieee.std_logic_1164.all ;
use ieee.numeric_std.all ;
use ieee.math_real.all ;

library work;
use work.all;
use work.${output_name}_vhdl_fifo_pkg.all;
use work.${output_name}_vhdl_pkg.all;
@@
@@ set max_rolename_length 0
@@ set num_input_signal    0
@@ set num_output_signal   0
@@
@@ set roleinfo_list [split $rolemap ","]
@@ set rolename_list ""
@@ foreach roleinfo $roleinfo_list {
@@    set roleinfo   [split $roleinfo ":"]
@@    
@@    set rolename      [lindex $roleinfo 0]
@@    set width         [lindex $roleinfo 1]
@@    set use_output    [lindex $roleinfo 2]
@@    set use_outputen  [lindex $roleinfo 3]
@@    set use_input     [lindex $roleinfo 4]
@@    
@@    set roleinfo_array(${rolename},msb) [expr $width - 1]
@@    set roleinfo_array(${rolename},use_output) $use_output
@@    set roleinfo_array(${rolename},use_outputen) $use_outputen
@@    set roleinfo_array(${rolename},use_input) $use_input
@@    
@@    lappend rolename_list $rolename
@@
@@    if {$use_input == 1} {
@@       incr num_input_signal
@@    }
@@
@@    if {$use_output == 1} {
@@       incr num_output_signal
@@    }
@@
@@    set rolename_length  [string length $rolename]
@@    if {$rolename_length > $max_rolename_length} {
@@       set max_rolename_length $rolename_length
@@    }
@@ }
@@ set io_name_length [expr $max_rolename_length + 9]

entity ${output_name} is
   port (
@@ set io_name_fmt [get_io_name_format $io_name_length clk]
      $io_name_fmt : in  std_logic;
@@
@@ foreach rolename $rolename_list {
@@    if {$roleinfo_array(${rolename},use_input) == 1} {
@@       set io_name_fmt [get_io_name_format $io_name_length ${rolename}_in]
      $io_name_fmt : in  std_logic_vector($roleinfo_array(${rolename},msb) downto 0);
@@    }
@@    if {$roleinfo_array(${rolename},use_output) == 1} {
@@       set io_name_fmt [get_io_name_format $io_name_length ${rolename}_out]
      $io_name_fmt : out std_logic_vector($roleinfo_array(${rolename},msb) downto 0) := (others => 'Z');
@@    }
@@    if {$roleinfo_array(${rolename},use_outputen) == 1} {
@@       set io_name_fmt [get_io_name_format $io_name_length ${rolename}_outen]
      $io_name_fmt : out std_logic := '0';
@@    }
@@ }
@@ set io_name_fmt [get_io_name_format $io_name_length request]
      $io_name_fmt : out std_logic := '0';
@@
@@ set io_name_fmt [get_io_name_format $io_name_length grant]
      $io_name_fmt : in  std_logic
   );
end ${output_name};

architecture ${output_name}_arch of ${output_name} is
   
   -- status signal
   signal request_local                   : std_logic;
   signal request_delay                   : std_logic;
   signal bfm_is_free                     : std_logic := '1';
   signal grant_should_remain_asserted    : std_logic := '0';
   signal completed_output_trans          : integer   := 0;
   
begin
   
   request <= request_local;
   
   process (clk)
      variable output_trans         : ${output_name}_output_trans_t;
      variable input_trans          : ${output_name}_input_trans_t;   
      variable null_output_trans    : ${output_name}_output_trans_t;
      variable null_input_trans     : ${output_name}_input_trans_t;   
      
      variable waited_cycles        : integer := 0;
      variable data_cycle_index     : integer := 0;
      variable latency              : integer := 0;
      
      procedure drive_interface_idle is
      begin
@@ set io_name_fmt [get_io_name_format $io_name_length request_local]
         $io_name_fmt <= '0' after 1 ps;
@@
@@ foreach rolename $rolename_list {
@@    if {$roleinfo_array(${rolename},use_output) == 1} {
@@       set io_name_fmt [get_io_name_format $io_name_length ${rolename}_out]
         $io_name_fmt <= (others => 'Z') after 1 ps;
@@    }
@@    if {$roleinfo_array(${rolename},use_outputen) == 1} {
@@       set io_name_fmt [get_io_name_format $io_name_length ${rolename}_outen]
         $io_name_fmt <= '0' after 1 ps;
@@    }
@@ }
      end procedure drive_interface_idle;
   
      procedure clear_trans_fifo is
      begin
         -- reset transaction information
         output_trans_fifo.clear;
         input_trans_fifo.clear;
         output_trans := null_output_trans;
         input_trans  := null_input_trans;

         -- reset status signal
         data_cycle_index              := 0;
         bfm_is_free                   <= '1';
         grant_should_remain_asserted  <= '0';
      end procedure clear_trans_fifo;
      
      procedure wait_this_cycle is
      begin
         drive_interface_idle;
         waited_cycles := waited_cycles + 1;
      end procedure wait_this_cycle;
      
      procedure drive_output_signal is
      begin
         
@@ foreach rolename $rolename_list {
@@    if {$roleinfo_array(${rolename},use_outputen) == 1} {
@@       set io_name_fmt [get_io_name_format $io_name_length ${rolename}_outen]
         $io_name_fmt    <= output_trans.data(data_cycle_index).${rolename}_outen after 1 ps;
@@       if {$roleinfo_array(${rolename},use_output) == 1} {
@@          set io_name_fmt [get_io_name_format $io_name_length ${rolename}_out]
         if (output_trans.data(data_cycle_index).${rolename}_outen = '1') then
            $io_name_fmt <= output_trans.data(data_cycle_index).${rolename}_out after 1 ps;
         else
            $io_name_fmt <= (others => 'Z') after 1 ps;
         end if;
         
@@       }
@@    } else {
@@       if {$roleinfo_array(${rolename},use_output) == 1} {
@@          set io_name_fmt [get_io_name_format $io_name_length ${rolename}_out]
         $io_name_fmt    <= output_trans.data(data_cycle_index).${rolename}_out after 1 ps;
@@       }
@@    }
@@ }

      end procedure drive_output_signal;
      
      procedure sample_input_signal is
      begin
         
         if (latency > 0) then
            latency := latency - 1;
         end if;
         
@@ set io_name_fmt [get_io_name_format $io_name_length latency]
         input_trans.${io_name_fmt} := latency;
@@
@@ foreach rolename $rolename_list {
@@    if {$roleinfo_array(${rolename},use_input) == 1} {
@@       set io_name_fmt [get_io_name_format $io_name_length ${rolename}_in]
         input_trans.${io_name_fmt} := ${rolename}_in;
@@    }
@@ }
         input_trans_fifo.push(input_trans);
         latency := 0;
         
      end procedure sample_input_signal;
   
   begin      
      if (clk'event and clk = '1') then
         if (bfm_is_free = '1') then
            drive_interface_idle;
            
            if (grant = '1') then
               sample_input_signal;
            end if;
            
            if (output_trans_fifo.size > 0) then
            -- grab new transaction
               bfm_is_free <= '0';
               output_trans := output_trans_fifo.pop;
            
               if (waited_cycles < output_trans.idles) then
                  wait_this_cycle;
               else
                  request_local <= '1';
                  drive_output_signal;
                  
                  latency := latency + 1;
               end if;
            else
               if (bfm_is_free = '1' and completed_output_trans > 0) then
                  all_transactions_complete <= '1';
               end if;
            end if;
         else
            if (waited_cycles < output_trans.idles) then
            -- handles remaining idles
               wait_this_cycle;          
            elsif (grant = '0') then
            -- wait for grant
               request_local <= '1';
               drive_output_signal;
               
               latency := latency + 1;
            else
            -- interface granted
               data_cycle_index := data_cycle_index + 1;
               
               sample_input_signal;
               drive_output_signal;
               
               if (data_cycle_index = output_trans.num_of_transactions - 1) then
                  request_local                 <= '0';
                  bfm_is_free                   <= '1';
                  grant_should_remain_asserted  <= '0';
                  completed_output_trans        <= completed_output_trans + 1;
                  waited_cycles                 := 0;
                  data_cycle_index              := 0;
               else
                  request_local                 <= '1';
                  bfm_is_free                   <= '0';
                  grant_should_remain_asserted  <= '1';
               end if;
            
            end if;
         end if;
      else
         all_transactions_complete <= '0';
      end if;
   end process;
   
   process (clk) begin
      if (clk'event and clk = '1') then
         request_delay <= request_local;
      end if;
   end process;
   
   -- event for fifo size
   process (clk) begin
      if (clk'event and clk = '1') then
      
         if (output_trans_fifo.size > output_trans_fifo.get_fifo_max_level) then
            max_transaction_queue_size <= '1';
         end if;
         
         if (output_trans_fifo.size < output_trans_fifo.get_fifo_min_level) then
            min_transaction_queue_size <= '1';
         end if;
      else
         max_transaction_queue_size <= '0';
         min_transaction_queue_size <= '0';
      end if;
   end process;
   
   -- event for grant signal
   process (clk) begin
      if (clk'event and clk = '1') then
         if (grant = '1') then
            interface_granted <= '1';
         end if;
      else
         interface_granted <= '0';
      end if;
   end process;
   
   -- event for grant deassertion
   process (clk, grant) begin
      if (grant'event and grant = '0') then
         if (request_delay = '1' and bfm_is_free = '0') then
            grant_deasserted_while_request_remain_asserted <= '1';
         end if;
      else
         grant_deasserted_while_request_remain_asserted <= '0';
      end if;
   end process;
   
end ${output_name}_arch;
